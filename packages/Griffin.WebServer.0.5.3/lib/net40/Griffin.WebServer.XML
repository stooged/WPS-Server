<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Griffin.WebServer</name>
    </assembly>
    <members>
        <member name="T:Griffin.WebServer.Files.ByteRangeStream">
            <summary>
            Used to transfer a byte range
            </summary>
            <remarks>Will transfer the required ranges to the client. Do note that using multiple ranges means that the response will
            be sent as <c>multipart/byteranges</c>. You therefore have to set that header.</remarks>
        </member>
        <member name="M:Griffin.WebServer.Files.ByteRangeStream.#ctor(Griffin.Net.Protocols.Http.RangeCollection,System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.WebServer.Files.ByteRangeStream" /> class.
            </summary>
            <param name="ranges">The HTTP range header contents.</param>
            <param name="innerStream">The inner stream which we should transfer a range from. The stream is owned by this class.</param>
        </member>
        <member name="P:Griffin.WebServer.Files.ByteRangeStream.CanRead">
            <summary>
            When overridden in a derived class, gets a value indicating whether the current stream supports reading.
            </summary>
            <returns>true if the stream supports reading; otherwise, false.</returns>
        </member>
        <member name="P:Griffin.WebServer.Files.ByteRangeStream.CanSeek">
            <summary>
            When overridden in a derived class, gets a value indicating whether the current stream supports seeking.
            </summary>
            <returns>always false.</returns>
        </member>
        <member name="P:Griffin.WebServer.Files.ByteRangeStream.CanWrite">
            <summary>
            When overridden in a derived class, gets a value indicating whether the current stream supports writing.
            </summary>
            <returns>always false.</returns>
        </member>
        <member name="P:Griffin.WebServer.Files.ByteRangeStream.Length">
            <summary>
            When overridden in a derived class, gets the length in bytes of the stream.
            </summary>
            <returns>A long value representing the length of the stream in bytes.</returns>
        </member>
        <member name="P:Griffin.WebServer.Files.ByteRangeStream.Position">
            <summary>
            Gets the position in the ranges to send
            </summary>
            <returns>The current position within the stream.</returns>
            <exception cref="T:System.NotSupportedException">this stream can only be used to read ranges.</exception>
        </member>
        <member name="M:Griffin.WebServer.Files.ByteRangeStream.Flush">
            <summary>
            When overridden in a derived class, clears all buffers for this stream and causes any buffered data to be written to the underlying device.
            </summary>
        </member>
        <member name="M:Griffin.WebServer.Files.ByteRangeStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            When overridden in a derived class, sets the position within the current stream.
            </summary>
            <param name="offset">A byte offset relative to the <paramref name="origin" /> parameter.</param>
            <param name="origin">A value of type <see cref="T:System.IO.SeekOrigin" /> indicating the reference point used to obtain the new position.</param>
            <returns>
            The new position within the current stream.
            </returns>
            <exception cref="T:System.NotSupportedException">You may not seek in this stream. The ranges are handled internally.</exception>
        </member>
        <member name="M:Griffin.WebServer.Files.ByteRangeStream.SetLength(System.Int64)">
            <summary>
            When overridden in a derived class, sets the length of the current stream.
            </summary>
            <param name="value">The desired length of the current stream in bytes.</param>
            <exception cref="T:System.NotSupportedException">You may not set length for this stream. The ranges are handled internally.</exception>
        </member>
        <member name="M:Griffin.WebServer.Files.ByteRangeStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            When overridden in a derived class, reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.
            </summary>
            <param name="buffer">An array of bytes. When this method returns, the buffer contains the specified byte array with the values between <paramref name="offset" /> and (<paramref name="offset" /> + <paramref name="count" /> - 1) replaced by the bytes read from the current source.</param>
            <param name="offset">The zero-based byte offset in <paramref name="buffer" /> at which to begin storing the data read from the current stream.</param>
            <param name="count">The maximum number of bytes to be read from the current stream.</param>
            <returns>
            The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">count;Tried to read more than was configured for the range.</exception>
        </member>
        <member name="M:Griffin.WebServer.Files.ByteRangeStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.
            </summary>
            <param name="buffer">An array of bytes. This method copies <paramref name="count" /> bytes from <paramref name="buffer" /> to the current stream.</param>
            <param name="offset">The zero-based byte offset in <paramref name="buffer" /> at which to begin copying bytes to the current stream.</param>
            <param name="count">The number of bytes to be written to the current stream.</param>
            <exception cref="T:System.NotSupportedException">This stream should only be used to read ranges.</exception>
        </member>
        <member name="T:Griffin.WebServer.Files.CompositeFileService">
            <summary>
            Can serve files from multiple services.
            </summary>
        </member>
        <member name="M:Griffin.WebServer.Files.CompositeFileService.#ctor(Griffin.WebServer.Files.IFileService[])">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.WebServer.Files.CompositeFileService"/> class.
            </summary>
            <param name="fileServices">One or more file services.</param>
        </member>
        <member name="M:Griffin.WebServer.Files.CompositeFileService.GetFile(Griffin.WebServer.Files.FileContext)">
            <summary>
            Loops through all services and returns the first matching file.
            </summary>
            <param name="context">Context used to locate and return files</param>
        </member>
        <member name="M:Griffin.WebServer.Files.CompositeFileService.IsDirectory(System.Uri)">
            <summary>
            Gets if the specified url corresponds to a directory serving files
            </summary>
            <param name="uri">Uri</param>
            <returns></returns>
        </member>
        <member name="M:Griffin.WebServer.Files.CompositeFileService.GetFiles(System.Uri)">
            <summary>
            Get all files that exists in the specified directory
            </summary>
            <param name="uri">Uri</param>
            <returns></returns>
            <remarks>Will return all matching files from all services.</remarks>
        </member>
        <member name="M:Griffin.WebServer.Files.CompositeFileService.GetDirectories(System.Uri)">
            <summary>
            Gets a list of all sub directores
            </summary>
            <param name="uri">URI (as requested by the HTTP client) which should correspond to a directory.</param>
            <returns></returns>
            <remarks>Will return all matching directories from all inner services.</remarks>
        </member>
        <member name="T:Griffin.WebServer.Files.DiskFileService">
            <summary>
                Serves files from the hard drive.
            </summary>
        </member>
        <member name="M:Griffin.WebServer.Files.DiskFileService.#ctor(System.String,System.String,System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:Griffin.WebServer.Files.CompositeFileService" /> class.
            </summary>
            <param name="rootFilePath">Path to serve files from.</param>
            <param name="rootUri">Serve all files which are located under this URI</param>
            <param name="substituteGzipFiles">
                When enabled, if a file is requested and a file with the same name + .gz exists, that
                version will be served instead (so long as the client supports this)
            </param>
            <example>
                <code>
            var diskFiles = new DiskFileService("/public/", @"C:\www\public\");
            var module = new FileModule(diskFiles);
            
            var moduleManager = new ModuleManager();
            moduleManager.Add(module);
            </code>
            </example>
        </member>
        <member name="P:Griffin.WebServer.Files.DiskFileService.DefaultHtmlFile">
            <summary>
                Default file to serve if none is specified in the context
            </summary>
        </member>
        <member name="M:Griffin.WebServer.Files.DiskFileService.GetFile(Griffin.WebServer.Files.FileContext)">
            <summary>
                Get a file
            </summary>
            <param name="context">Context used to locate and return files</param>
        </member>
        <member name="M:Griffin.WebServer.Files.DiskFileService.IsDirectory(System.Uri)">
            <summary>
                Gets if the specified url corresponds to a directory serving files
            </summary>
            <param name="uri">Uri</param>
            <returns></returns>
        </member>
        <member name="M:Griffin.WebServer.Files.DiskFileService.GetFiles(System.Uri)">
            <summary>
                Get all files that exists in the specified directory
            </summary>
            <param name="uri">Uri</param>
            <returns></returns>
        </member>
        <member name="M:Griffin.WebServer.Files.DiskFileService.GetDirectories(System.Uri)">
            <summary>
                Gets a list of all sub directores
            </summary>
            <param name="uri">URI (as requested by the HTTP client) which should correspond to a directory.</param>
            <returns></returns>
        </member>
        <member name="T:Griffin.WebServer.Files.FileContext">
            <summary>
            Context used by <see cref="T:Griffin.WebServer.Files.IFileService"/> when locating files.
            </summary>
            <remarks>
            There are three scenarios for files:
            <list type="table">
            <item>
            <term>Not found</term>
            <description>Simply do not change the context, just return from the method.</description>
            </item>
            <item>
            <term>Found but not modified.</term>
            <description>The file UTC date/time is less or equal to <see cref="P:Griffin.WebServer.Files.FileContext.BrowserCacheDate"/>. Use <see cref="M:Griffin.WebServer.Files.FileContext.SetNotModified(System.String,System.DateTime)"/> and return</description>
            </item>
            <item>
            <term>Found and newer</term>
            <description>The file UTC date/time is newer than <see cref="P:Griffin.WebServer.Files.FileContext.BrowserCacheDate"/>. Use <see cref="M:Griffin.WebServer.Files.FileContext.SetFile(System.String,System.IO.Stream,System.DateTime)"/> and return.</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:Griffin.WebServer.Files.FileContext.#ctor(Griffin.Net.Protocols.Http.IHttpRequest,System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.WebServer.Files.FileContext"/> class.
            </summary>
            <param name="request">The request.</param>
            <param name="browserCacheDate">Usually the header "If-Modified-Since"</param>
        </member>
        <member name="P:Griffin.WebServer.Files.FileContext.IsFound">
            <summary>
            Gets if file was found;
            </summary>
            <remarks>The stream is not set if the file was found but not modified.</remarks>
        </member>
        <member name="P:Griffin.WebServer.Files.FileContext.IsModified">
            <summary>
            Gets if file was modified since it was last requested;
            </summary>
        </member>
        <member name="P:Griffin.WebServer.Files.FileContext.IsGzipSubstitute">
            <summary>
            Get whether the requsted file was substituted for a gzip compressed version.
            </summary>
        </member>
        <member name="P:Griffin.WebServer.Files.FileContext.Request">
            <summary>
            Gets the request (the Uri specifies the wanted file)
            </summary>
        </member>
        <member name="P:Griffin.WebServer.Files.FileContext.BrowserCacheDate">
            <summary>
            Gets date when file was cached in the browser.
            </summary>
        </member>
        <member name="P:Griffin.WebServer.Files.FileContext.LastModifiedAtUtc">
            <summary>
            Gets the date when the file was modified (UTC time)
            </summary>
        </member>
        <member name="P:Griffin.WebServer.Files.FileContext.FileStream">
            <summary>
            Gets file stream
            </summary>
            <remarks>The server will own the stream</remarks>
        </member>
        <member name="P:Griffin.WebServer.Files.FileContext.Filename">
            <summary>
            Gets filename
            </summary>
        </member>
        <member name="M:Griffin.WebServer.Files.FileContext.SetFile(System.String,System.IO.Stream,System.DateTime)">
            <summary>
            Set file that should be returned.
            </summary>
            <param name="fileName">File name</param>
            <param name="stream">File stream</param>
            <param name="lastModifiedAtUtc">When the file was modified (UTC time).</param>
            <remarks>
            <para>The stream will be disposed by the server after it's being sent</para>
            <para>Use <see cref="M:Griffin.WebServer.Files.FileContext.SetNotModified(System.String,System.DateTime)"/> if the file has not been modified</para>
            </remarks>
        </member>
        <member name="M:Griffin.WebServer.Files.FileContext.SetNotModified(System.String,System.DateTime)">
            <summary>
            File has not been modified.
            </summary>
            <param name="fileName">File name including extension.</param>
            <param name="date"></param>
        </member>
        <member name="M:Griffin.WebServer.Files.FileContext.SetGzipSubstitute">
            <summary>
            The file has been swapped for a gzip compressed version.
            </summary>
        </member>
        <member name="T:Griffin.WebServer.Files.FileInformation">
            <summary>
            Small DTO for files
            </summary>
        </member>
        <member name="P:Griffin.WebServer.Files.FileInformation.Name">
            <summary>
            Gets file name including extension but no path
            </summary>
        </member>
        <member name="P:Griffin.WebServer.Files.FileInformation.LastModifiedAtUtc">
            <summary>
            Gets when the file was modified
            </summary>
        </member>
        <member name="P:Griffin.WebServer.Files.FileInformation.Size">
            <summary>
            Gets file size in bytes.
            </summary>
        </member>
        <member name="T:Griffin.WebServer.Files.IFileService">
            <summary>
                Serves files
            </summary>
        </member>
        <member name="M:Griffin.WebServer.Files.IFileService.GetDirectories(System.Uri)">
            <summary>
                Gets a list of all sub directores
            </summary>
            <param name="uri">URI (as requested by the HTTP client) which should correspond to a directory.</param>
            <returns></returns>
        </member>
        <member name="M:Griffin.WebServer.Files.IFileService.GetFile(Griffin.WebServer.Files.FileContext)">
            <summary>
                Download a file.
            </summary>
            <param name="context">Context used to locate and return files</param>
            <remarks><c>true</c> if the file was attached to the response; otherwise false;</remarks>
        </member>
        <member name="M:Griffin.WebServer.Files.IFileService.GetFiles(System.Uri)">
            <summary>
                Get information about all files that exists in the specified directory.
            </summary>
            <param name="uri">Uri</param>
            <returns></returns>
        </member>
        <member name="M:Griffin.WebServer.Files.IFileService.IsDirectory(System.Uri)">
            <summary>
                Gets if the specified url corresponds to a directory serving files.
            </summary>
            <param name="uri">Uri</param>
            <returns></returns>
        </member>
        <member name="M:Griffin.WebServer.Files.IFileService.FileExists(System.Uri)">
            <summary>
            Check if the file corresponds to a file.
            </summary>
            <param name="uri"></param>
            <returns></returns>
        </member>
        <member name="T:Griffin.WebServer.Files.MimeTypeProvider">
            <summary>
            All available mime types
            </summary>
            <remarks>All mime types in here can be served by the file modules. All other files are ignored.</remarks>
        </member>
        <member name="M:Griffin.WebServer.Files.MimeTypeProvider.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:Griffin.WebServer.Files.MimeTypeProvider" /> class from being created.
            </summary>
        </member>
        <member name="P:Griffin.WebServer.Files.MimeTypeProvider.Instance">
            <summary>
            Gets singleton
            </summary>
        </member>
        <member name="M:Griffin.WebServer.Files.MimeTypeProvider.Add(System.String,System.String)">
            <summary>
            Add a mimn type
            </summary>
            <param name="extension">Extension without dot</param>
            <param name="mimeType">The mime type</param>
        </member>
        <member name="M:Griffin.WebServer.Files.MimeTypeProvider.Remove(System.String)">
            <summary>
            Remove a mime type
            </summary>
            <param name="extension">extension without dot</param>
        </member>
        <member name="M:Griffin.WebServer.Files.MimeTypeProvider.Get(System.String)">
            <summary>
            Get mime type for the specified file
            </summary>
            <param name="filename">Full path to file</param>
            <returns>Mime type</returns>
        </member>
        <member name="T:Griffin.WebServer.Files.FileModule">
            <summary>
            Will serve static files
            </summary>
            <example>
            <code>
            // One of the available file services.
            var diskFiles = new DiskFileService("/public/", @"C:\www\public\");
            var module = new FileModule(diskFiles);
            
            // the module manager is added to the HttpServer.
            var moduleManager = new ModuleManager();
            moduleManager.Add(module);
            </code>
            </example>
        </member>
        <member name="M:Griffin.WebServer.Files.FileModule.#ctor(Griffin.WebServer.Files.IFileService)">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.WebServer.Files.FileModule" /> class.
            </summary>
            <param name="fileService">The file service.</param>
        </member>
        <member name="P:Griffin.WebServer.Files.FileModule.ListFiles">
            <summary>
            Gets or sets if we should allow file listing
            </summary>
        </member>
        <member name="P:Griffin.WebServer.Files.FileModule.AllowFileListing">
            <summary>
            Gets or sets if we should allow file listing
            </summary>
        </member>
        <member name="M:Griffin.WebServer.Files.FileModule.BeginRequest(Griffin.WebServer.IHttpContext)">
            <summary>
            Invoked before anything else
            </summary>
            <param name="context">HTTP context</param>
            <remarks>
            <para>The first method that is exeucted in the pipeline.</para>
            Try to avoid throwing exceptions if you can. Let all modules have a chance to handle this method. You may break the processing in any other method than the Begin/EndRequest methods.
            <para>If you are going to handle the request, implement <see cref="T:Griffin.WebServer.Modules.IWorkerModule"/> and do it in the <see cref="M:Griffin.WebServer.Modules.IWorkerModule.HandleRequestAsync(Griffin.WebServer.IHttpContext,System.Action{Griffin.WebServer.Modules.IAsyncModuleResult})"/> method.</para>
            </remarks>
        </member>
        <member name="M:Griffin.WebServer.Files.FileModule.EndRequest(Griffin.WebServer.IHttpContext)">
            <summary>
            End request is typically used for post processing. The response should already contain everything required.
            </summary>
            <param name="context">HTTP context</param>
            <remarks>
            <para>The last method that is executed in the pipeline.</para>
            Try to avoid throwing exceptions if you can. Let all modules have a chance to handle this method. You may break the processing in any other method than the Begin/EndRequest methods.</remarks>
        </member>
        <member name="M:Griffin.WebServer.Files.FileModule.HandleRequest(Griffin.WebServer.IHttpContext)">
            <summary>
            Handle the request.
            </summary>
            <param name="context">HTTP context</param>
            <returns><see cref="F:Griffin.WebServer.Modules.ModuleResult.Stop"/> will stop all processing except <see cref="M:Griffin.WebServer.Modules.IHttpModule.EndRequest(Griffin.WebServer.IHttpContext)"/>.</returns>
            <remarks>Invoked in turn for all modules unless you return <see cref="F:Griffin.WebServer.Modules.ModuleResult.Stop"/>.</remarks>
        </member>
        <member name="F:Griffin.WebServer.Files.FileModule.ListFilesTemplate">
            <summary>
            Template which is used to list files. Should be a complete HTML page where <c>{{Files}}</c> will be replaced with a number of table rows.
            </summary>
        </member>
        <member name="T:Griffin.WebServer.HttpContext">
            <summary>
            Request context
            </summary>
        </member>
        <member name="M:Griffin.WebServer.HttpContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.WebServer.HttpContext" /> class.
            </summary>
        </member>
        <member name="P:Griffin.WebServer.HttpContext.Request">
            <summary>
            Incoming request
            </summary>
        </member>
        <member name="P:Griffin.WebServer.HttpContext.Response">
            <summary>
            Response to send back
            </summary>
        </member>
        <member name="P:Griffin.WebServer.HttpContext.Items">
            <summary>
            Can be used to store items through this request
            </summary>
        </member>
        <member name="P:Griffin.WebServer.HttpContext.Application">
            <summary>
            Used to store items for the entire application.
            </summary>
        </member>
        <member name="P:Griffin.WebServer.HttpContext.Session">
            <summary>
            USed to store items for the current session (if a session has been started)
            </summary>
            <remarks>Will be null if a session has not been started.</remarks>
        </member>
        <member name="P:Griffin.WebServer.HttpContext.LastException">
            <summary>
            All exceptions will be logged by the system, but we generally do only keep track of the last one.
            </summary>
        </member>
        <member name="P:Griffin.WebServer.HttpContext.User">
            <summary>
            Gets or sets currently logged in user.
            </summary>
        </member>
        <member name="P:Griffin.WebServer.HttpContext.Channel">
            <summary>
            Channel connected
            </summary>
        </member>
        <member name="P:Griffin.WebServer.HttpContext.RouteData">
            <summary>
            Gets information stored for the route.
            </summary>
            <remarks>For instance used to convert the URI into parameters.</remarks>
            <seealso cref="T:Griffin.WebServer.Routing.IRequestRouter"/>
        </member>
        <member name="M:Griffin.WebServer.HttpContext.RegisterForDisposal(System.Action{Griffin.WebServer.IHttpContext})">
            <summary>
            Register a callback for the request disposal (i.e. the reply have been sent back and everything is cleaned up)
            </summary>
            <param name="callback">Callback to invoke</param>
        </member>
        <member name="M:Griffin.WebServer.HttpContext.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:Griffin.WebServer.HttpServer">
            <summary>
                Default HTTP Server implementation
            </summary>
            <remarks>This implementation uses modules for everything</remarks>
        </member>
        <member name="M:Griffin.WebServer.HttpServer.#ctor(Griffin.WebServer.IModuleManager)">
            <summary>
                Initializes a new instance of the <see cref="T:Griffin.WebServer.HttpServer" /> class.
            </summary>
            <param name="moduleManager">The modules are used to process the HTTP requests. You need to specify at least one.</param>
        </member>
        <member name="M:Griffin.WebServer.HttpServer.#ctor(Griffin.WebServer.IModuleManager,Griffin.Net.ChannelTcpListenerConfiguration)">
            <summary>
                Initializes a new instance of the <see cref="T:Griffin.WebServer.HttpServer" /> class.
            </summary>
            <param name="moduleManager">The modules are used to process the HTTP requests. You need to specify at least one.</param>
            <param name="configuration">
                You can override the configuration to your likings.
            </param>
            <exception cref="T:System.ArgumentNullException">moduleManager/configuration</exception>
        </member>
        <member name="P:Griffin.WebServer.HttpServer.BodyDecoder">
            <summary>
            if set, the body decoder will be used and the server will produce <see cref="T:Griffin.Net.Protocols.Http.HttpRequest"/> instead of <see cref="!:HttpRequestBase"/>.
            </summary>
            <remarks>
            <para>Specified per default</para>
            </remarks>
        </member>
        <member name="P:Griffin.WebServer.HttpServer.ApplicationInfo">
            <summary>
                You can fill this item with application specific information
            </summary>
            <remarks>
                It will be supplied for every request in the <see cref="T:Griffin.WebServer.IHttpContext" />.
            </remarks>
        </member>
        <member name="P:Griffin.WebServer.HttpServer.LocalPort">
            <summary>
            Gets port that the server is accepting connections on
            </summary>
            <value>
            The local port.
            </value>
            <exception cref="T:System.InvalidOperationException">Listener must have been started first.</exception>
        </member>
        <member name="M:Griffin.WebServer.HttpServer.Add(Griffin.WebServer.Modules.IHttpModule)">
            <summary>
                Add a HTTP module
            </summary>
            <param name="module">Module to include</param>
            <remarks>Modules are executed in the order they are added.</remarks>
        </member>
        <member name="M:Griffin.WebServer.HttpServer.Start(System.Net.IPAddress,System.Int32)">
            <summary>
            Start the HTTP server
            </summary>
            <param name="ipAddress">Address to listen on</param>
            <param name="port">Port to listen on.</param>
            <exception cref="T:System.ArgumentNullException">ipAddress</exception>
            <exception cref="T:System.InvalidOperationException">Stop the server before restarting.</exception>
        </member>
        <member name="M:Griffin.WebServer.HttpServer.Start(System.Net.IPAddress,System.Int32,System.Security.Cryptography.X509Certificates.X509Certificate)">
            <summary>
                Start the HTTP server
            </summary>
            <param name="ipAddress">Address to listen on</param>
            <param name="port">Port to listen on.</param>
            <example>
            <p>You can load a certificate by doing the following:</p>
            <code>
            var certificate = new X509Certificate2(@"C:\certificates\yourCertificate", "yourpassword");
            var server = new HttpServer(new ModuleManager());
            server.Start(IPAddress.Any, 80, certifiate);
            </code>
            </example>
        </member>
        <member name="M:Griffin.WebServer.HttpServer.Stop">
            <summary>
                Stop the server.
            </summary>
        </member>
        <member name="T:Griffin.WebServer.ModelBinders.ArrayModelBinder">
            <summary>
            Can convert simple and complex arrays to view models
            </summary>
            <remarks>
            <para>
            complex arrays mean that the actual type is a view model. Those models must an zero based indexer to be populated
            </para>
            <para>Simple arrays consistes of a single dimension and being primitive. These do not need an index</para>
            </remarks>
            <example>
            Simple array:
            <code>
            int[] ages
            </code>
            would be populated by:
            <code>
            <![CDATA[
            <input type="Age[]" value="10" />
            <input type="Age[]" value="8" />
            <input type="Age[]" value="32" />
            ]]>
            </code>
            Complex example:
            <code>User[] user</code>
            would be populated by:
            <code>
            <![CDATA[
            <input type="User[0].FirstName" value="Arne" />
            <input type="User[0].Age" value="32" />
            <input type="User[1].FirstName" value="Bertial" />
            <input type="User[1].Age" value="4" />
            ]]>
            The index is important so that we can map the correct grouped files together.
            </code>
            </example>
            <seealso cref="T:Griffin.WebServer.ModelBinders.DictionaryModelBinder"/>
        </member>
        <member name="M:Griffin.WebServer.ModelBinders.ArrayModelBinder.CanBind(Griffin.WebServer.ModelBinders.IModelBinderContext)">
            <summary>
            Determines whether this instance can bind the specified model.
            </summary>
            <param name="context">Context infromation.</param>
            <returns>
              <c>true</c> if this instance can handle the model; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Griffin.WebServer.ModelBinders.ArrayModelBinder.Bind(Griffin.WebServer.ModelBinders.IModelBinderContext)">
            <summary>
            Bind the model
            </summary>
            <param name="context">Context information</param>
            <returns>
            An object of the specified type (<seealso cref="!:IModelBinderContext.ModelType)" />
            </returns>
            <exception cref="T:System.FormatException"></exception>
        </member>
        <member name="T:Griffin.WebServer.ModelBinders.ClassBinder">
            <summary>
            Can bind classes which are not abstract or generic.
            </summary>
        </member>
        <member name="M:Griffin.WebServer.ModelBinders.ClassBinder.CanBind(Griffin.WebServer.ModelBinders.IModelBinderContext)">
            <summary>
            Determines whether this instance can bind the specified model.
            </summary>
            <param name="context">Context infromation.</param>
            <returns>
              <c>true</c> if this instance can handle the model; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Griffin.WebServer.ModelBinders.ClassBinder.Bind(Griffin.WebServer.ModelBinders.IModelBinderContext)">
            <summary>
            Bind the model
            </summary>
            <param name="context">Context information</param>
            <returns>
            An object of the specified type (<seealso cref="!:IModelBinderContext.ModelType)" />
            </returns>
        </member>
        <member name="T:Griffin.WebServer.ModelBinders.DictionaryModelBinder">
            <summary>
            Bind dictionaries.
            </summary>
            <remarks><para>The key must be of string type.</para>
            <para>Used to find arrays which string indexes (like "Users[jonas].FirstName"). You can also
            bind arrays with string indexes by using single quotes around them like "Users['1'].FirstName". Useful if you
            want to map using Ids and not array indices.</para>
            </remarks>
            <example>
            You can use string keys:
            <code>
            <![CDATA[
            <input type="User['USR0111'].FirstName" value="Arne" />
            <input type="User[USR0111].Age" value="32" />
            <input type="User[USR37].FirstName" value="Bertial" />
            <input type="User[USR37].Age" value="4" />
            ]]>
            </code>
            Or numbers:
            <code>
            <![CDATA[
            <input type="User['111'].FirstName" value="Arne" />
            <input type="User['111'].Age" value="32" />
            <input type="User['37'].FirstName" value="Bertial" />
            <input type="User['37'].Age" value="4" />
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Griffin.WebServer.ModelBinders.DictionaryModelBinder.CanBind(Griffin.WebServer.ModelBinders.IModelBinderContext)">
            <summary>
            Determines whether this instance can bind the specified context.
            </summary>
            <param name="context">The context.</param>
            <returns>
              <c>true</c> if this instance is an dictionary with a string key; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Griffin.WebServer.ModelBinders.DictionaryModelBinder.Bind(Griffin.WebServer.ModelBinders.IModelBinderContext)">
            <summary>
            Bind the model
            </summary>
            <param name="context">Context information</param>
            <returns>
            An object of the specified type (<seealso cref="!:IModelBinderContext.ModelType)" />
            </returns>
        </member>
        <member name="T:Griffin.WebServer.ModelBinders.EnumModelBinder">
            <summary>
            Can bind enums
            </summary>
            <remarks>The binder both supports integers and strings</remarks>
        </member>
        <member name="M:Griffin.WebServer.ModelBinders.EnumModelBinder.CanBind(Griffin.WebServer.ModelBinders.IModelBinderContext)">
            <summary>
            Determines whether this instance can bind the specified model.
            </summary>
            <param name="context">Context infromation.</param>
            <returns>
              <c>true</c> if this instance can handle the model; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Griffin.WebServer.ModelBinders.EnumModelBinder.Bind(Griffin.WebServer.ModelBinders.IModelBinderContext)">
            <summary>
            Bind the model
            </summary>
            <param name="context">Context information</param>
            <returns>
            An object of the specified type (<seealso cref="!:IModelBinderContext.ModelType)" />
            </returns>
        </member>
        <member name="T:Griffin.WebServer.ModelBinders.IModelBinder">
            <summary>
            Used to bind the string values (in the request) to a model of some sorts.
            </summary>
        </member>
        <member name="M:Griffin.WebServer.ModelBinders.IModelBinder.CanBind(Griffin.WebServer.ModelBinders.IModelBinderContext)">
            <summary>
            Determines whether this instance can bind the specified model.
            </summary>
            <param name="context">Context infromation.</param>
            <returns>
              <c>true</c> if this instance can handle the model; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Griffin.WebServer.ModelBinders.IModelBinder.Bind(Griffin.WebServer.ModelBinders.IModelBinderContext)">
            <summary>
            Bind the model
            </summary>
            <param name="context">Context information</param>
            <returns>An object of the specified type (<seealso cref="!:IModelBinderContext.ModelType)"/></returns>
        </member>
        <member name="T:Griffin.WebServer.ModelBinders.IModelBinderContext">
            <summary>
            Context information for <seealso cref="T:Griffin.WebServer.ModelBinders.IModelBinder"/>.
            </summary>
        </member>
        <member name="P:Griffin.WebServer.ModelBinders.IModelBinderContext.Prefix">
            <summary>
            Gets or sets prefix for this model in the list
            </summary>
            <remarks>Prefixes are used to be albe to load items which are deeper down in the graph.</remarks>
            <example>User[0].</example>
        </member>
        <member name="P:Griffin.WebServer.ModelBinders.IModelBinderContext.ModelType">
            <summary>
            Gets type of model which we are currently mapping (i.e. view model type)
            </summary>
        </member>
        <member name="P:Griffin.WebServer.ModelBinders.IModelBinderContext.ModelName">
            <summary>
            Gets name of the model. Corresponds to the property or argument name
            </summary>
            <remarks>Empty =  root, otherwise the property to load.</remarks>
        </member>
        <member name="P:Griffin.WebServer.ModelBinders.IModelBinderContext.ValueProvider">
            <summary>
            Gets provider used to load values (for instance from HTTP forms)
            </summary>
        </member>
        <member name="M:Griffin.WebServer.ModelBinders.IModelBinderContext.Execute(System.Type,System.String,System.String)">
            <summary>
            Execute another binder
            </summary>
            <param name="modelType">Type that we want to get</param>
            <param name="prefix">Prefix (if this is a nested get)</param>
            <param name="modelName">Property/argument name</param>
            <returns>Created model</returns>
        </member>
        <member name="P:Griffin.WebServer.ModelBinders.ModelBindingException.Message">
            <summary>
            Gets a message that describes the current exception.
            </summary>
            <returns>The error message that explains the reason for the exception, or an empty string("").</returns>
        </member>
        <member name="T:Griffin.WebServer.ModelBinders.ModelBinderContext">
            <summary>
            Default implementation
            </summary>
        </member>
        <member name="M:Griffin.WebServer.ModelBinders.ModelBinderContext.#ctor(System.Type,System.String,System.String,Griffin.WebServer.ValueProviders.IValueProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.WebServer.ModelBinders.ModelBinderContext" /> class.
            </summary>
            <param name="modelType">Type of the model (view model type).</param>
            <param name="modelName">Name of the model (i.e. property or argument name).</param>
            <param name="prefix">The prefix (if this is a nested field like "User.FirstName", prefix = "User.").</param>
            <param name="valueProvider">The value provider.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="P:Griffin.WebServer.ModelBinders.ModelBinderContext.Prefix">
            <summary>
            Gets or sets prefix for this model in the list
            </summary>
            <remarks>Prefixes are used to be albe to load items which are deeper down in the graph.</remarks>
            <example>User[0].</example>
        </member>
        <member name="P:Griffin.WebServer.ModelBinders.ModelBinderContext.ModelType">
            <summary>
            Gets type of model which we are currently mapping (i.e. view model type)
            </summary>
        </member>
        <member name="P:Griffin.WebServer.ModelBinders.ModelBinderContext.ModelName">
            <summary>
            Gets name of the model. Corresponds to the property name
            </summary>
            <remarks>
            Empty =  root, otherwise the property to load.
            </remarks>
        </member>
        <member name="P:Griffin.WebServer.ModelBinders.ModelBinderContext.ValueProvider">
            <summary>
            Gets provider used to load values (for instance from HTTP forms)
            </summary>
        </member>
        <member name="P:Griffin.WebServer.ModelBinders.ModelBinderContext.RootBinder">
            <summary>
            
            </summary>
        </member>
        <member name="M:Griffin.WebServer.ModelBinders.ModelBinderContext.Execute(System.Type,System.String,System.String)">
            <summary>
            Execute a child binding
            </summary>
            <param name="modelType">Child model type</param>
            <param name="prefix"></param>
            <param name="modelName"></param>
            <returns></returns>
        </member>
        <member name="M:Griffin.WebServer.ModelBinders.ModelBinderContext.CreateForChild(System.Type,System.String,System.String)">
            <summary>
            Create a scope for a child model
            </summary>
            <param name="type">The type.</param>
            <param name="prefix">The prefix.</param>
            <param name="modelName">Name of the model.</param>
            <returns></returns>
        </member>
        <member name="M:Griffin.WebServer.ModelBinders.ModelMapper.Clear">
            <summary>
            Remove all binders
            </summary>
        </member>
        <member name="T:Griffin.WebServer.ModelBinders.PrimitiveModelBinder">
            <summary>
            Can bind primitives and <c>string</c>.
            </summary>
        </member>
        <member name="M:Griffin.WebServer.ModelBinders.PrimitiveModelBinder.CanBind(Griffin.WebServer.ModelBinders.IModelBinderContext)">
            <summary>
            Determines whether this instance can bind the specified model.
            </summary>
            <param name="context">Context infromation.</param>
            <returns>
              <c>true</c> if this instance can handle the model; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Griffin.WebServer.ModelBinders.PrimitiveModelBinder.Bind(Griffin.WebServer.ModelBinders.IModelBinderContext)">
            <summary>
            Bind the model
            </summary>
            <param name="context">Context information</param>
            <returns>
            An object of the specified type (<seealso cref="!:IModelBinderContext.ModelType)" />
            </returns>
        </member>
        <member name="T:Griffin.WebServer.ValueProviders.IValueProvider">
            <summary>
            Used to load values from the data source
            </summary>
            <remarks>Fields with exact form name should all be pushed to the same parameter (so that it got several values)</remarks>
        </member>
        <member name="M:Griffin.WebServer.ValueProviders.IValueProvider.Get(System.String)">
            <summary>
            Get a parameter
            </summary>
            <param name="fieldName">Field name</param>
            <returns>Parameter if found; otherwise <c>null</c>.</returns>
        </member>
        <member name="M:Griffin.WebServer.ValueProviders.IValueProvider.Find(System.String)">
            <summary>
            Find all parameters which starts with the specified argument.
            </summary>
            <param name="prefix">Beginning of the field name</param>
            <returns>All matching parameters.</returns>
        </member>
        <member name="T:Griffin.WebServer.ValueProviders.RequestValueProvider">
            <summary>
            Can provide values from HTTP requests.
            </summary>
        </member>
        <member name="M:Griffin.WebServer.ValueProviders.RequestValueProvider.#ctor(Griffin.Net.Protocols.Http.IHttpRequest)">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.WebServer.ValueProviders.RequestValueProvider" /> class.
            </summary>
            <param name="request">The request.</param>
        </member>
        <member name="M:Griffin.WebServer.ValueProviders.RequestValueProvider.Get(System.String)">
            <summary>
            Get a parameter
            </summary>
            <param name="fieldName">Field name</param>
            <returns>
            Parameter if found; otherwise <c>null</c>.
            </returns>
        </member>
        <member name="M:Griffin.WebServer.ValueProviders.RequestValueProvider.Find(System.String)">
            <summary>
            Find all parameters which starts with the specified argument.
            </summary>
            <param name="prefix">Beginning of the field name</param>
            <returns>
            All matching parameters.
            </returns>
        </member>
        <member name="T:Griffin.WebServer.Modules.AsyncModuleResult">
            <summary>
            Implementation of <see cref="T:Griffin.WebServer.Modules.IAsyncModuleResult"/>
            </summary>
        </member>
        <member name="M:Griffin.WebServer.Modules.AsyncModuleResult.#ctor(Griffin.WebServer.IHttpContext,Griffin.WebServer.Modules.ModuleResult)">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.WebServer.Modules.AsyncModuleResult" /> class.
            </summary>
            <param name="context">The context.</param>
            <param name="result">The result.</param>
        </member>
        <member name="P:Griffin.WebServer.Modules.AsyncModuleResult.Context">
            <summary>
            Gets HTTP context which the reply is for.
            </summary>
        </member>
        <member name="P:Griffin.WebServer.Modules.AsyncModuleResult.Result">
            <summary>
            Gets how the module thinks that the processing went.
            </summary>
        </member>
        <member name="P:Griffin.WebServer.Modules.AsyncModuleResult.Exception">
            <summary>
            Gets any exception which was caught during the async operation
            </summary>
            <remarks>It's prefered that the async op itself uses a try/catch to set this exception</remarks>
        </member>
        <member name="T:Griffin.WebServer.Modules.IAsyncModuleResult">
            <summary>
            Response from modules for async operations.
            </summary>
        </member>
        <member name="P:Griffin.WebServer.Modules.IAsyncModuleResult.Context">
            <summary>
            Gets HTTP context which the reply is for.
            </summary>
        </member>
        <member name="P:Griffin.WebServer.Modules.IAsyncModuleResult.Result">
            <summary>
            Gets how the module thinks that the processing went.
            </summary>
        </member>
        <member name="P:Griffin.WebServer.Modules.IAsyncModuleResult.Exception">
            <summary>
            Gets any exception which was caught during the async operation
            </summary>
            <remarks>It's prefered that the async op itself uses a try/catch to set this exception</remarks>
        </member>
        <member name="T:Griffin.WebServer.Modules.IAuthenticationModule">
            <summary>
            The HTTP module is used to authenticate the request (i.e. login the user)
            </summary>
            <remarks>Invoked directly after <see cref="M:Griffin.WebServer.Modules.IHttpModule.BeginRequest(Griffin.WebServer.IHttpContext)"/></remarks>
        </member>
        <member name="M:Griffin.WebServer.Modules.IAuthenticationModule.Authenticate(Griffin.WebServer.IHttpContext)">
            <summary>
            Authorize the request.
            </summary>
            <param name="context">HTTP context</param>
            <returns><see cref="F:Griffin.WebServer.Modules.ModuleResult.Stop"/> will stop all processing including <see cref="M:Griffin.WebServer.Modules.IHttpModule.EndRequest(Griffin.WebServer.IHttpContext)"/>.</returns>
        </member>
        <member name="T:Griffin.WebServer.Modules.IAuthorizationModule">
            <summary>
            Authorize the request (i.e. check the user permissions)
            </summary>
            <remarks>Invoked after <see cref="T:Griffin.WebServer.Modules.IAuthenticationModule"/> and before <see cref="!:IHttpModule.HandleRequest"/>.</remarks>
        </member>
        <member name="M:Griffin.WebServer.Modules.IAuthorizationModule.Authorize(Griffin.WebServer.IHttpContext)">
            <summary>
            Authorize the user.
            </summary>
            <param name="context">HTTP context</param>
            <returns><see cref="F:Griffin.WebServer.Modules.ModuleResult.Stop"/> will stop all processing including <see cref="M:Griffin.WebServer.Modules.IHttpModule.EndRequest(Griffin.WebServer.IHttpContext)"/>.</returns>
        </member>
        <member name="T:Griffin.WebServer.Modules.IHttpModule">
            <summary>
            A http module
            </summary>
            <remarks>
            Each method will be invoked in all methods before continuing. i.e. the <c>BegingRequest</c> method will be invoked in
            all modules before the next method is invoked (which typically is <c>RouteRequest</c>).
            <para>Abort
            means only that the current method will be aborted for the modules. (EndRequest will still be invoked if you trigger
            abort in any of the methods</para></remarks>
        </member>
        <member name="M:Griffin.WebServer.Modules.IHttpModule.BeginRequest(Griffin.WebServer.IHttpContext)">
            <summary>
            Invoked before anything else
            </summary>
            <param name="context">HTTP context</param>
            <remarks>
            <para>The first method that is exeucted in the pipeline.</para>
            Try to avoid throwing exceptions if you can. Let all modules have a chance to handle this method. You may break the processing in any other method than the Begin/EndRequest methods.
            <para>If you are going to handle the request, implement <see cref="T:Griffin.WebServer.Modules.IWorkerModule"/> and do it in the <see cref="!:IWorkerModule.HandleRequest"/> method.</para>
            </remarks>
        </member>
        <member name="M:Griffin.WebServer.Modules.IHttpModule.EndRequest(Griffin.WebServer.IHttpContext)">
            <summary>
            End request is typically used for post processing. The response should already contain everything required.
            </summary>
            <param name="context">HTTP context</param>
            <remarks>
            <para>The last method that is executed in the pipeline.</para>
            Try to avoid throwing exceptions if you can. Let all modules have a chance to handle this method. You may break the processing in any other method than the Begin/EndRequest methods.</remarks>
        </member>
        <member name="T:Griffin.WebServer.Modules.IRoutingModule">
            <summary>
            Used to route requests..
            </summary>
            <remarks>Invoked after <see cref="T:Griffin.WebServer.Modules.IAuthenticationModule"/> but before <see cref="T:Griffin.WebServer.Modules.IAuthorizationModule"/>.</remarks>
        </member>
        <member name="M:Griffin.WebServer.Modules.IRoutingModule.Route(Griffin.WebServer.IHttpContext)">
            <summary>
            Route the request.
            </summary>
            <param name="context">HTTP context</param>
            <returns><see cref="F:Griffin.WebServer.Modules.ModuleResult.Stop"/> will stop all processing including <see cref="M:Griffin.WebServer.Modules.IHttpModule.EndRequest(Griffin.WebServer.IHttpContext)"/>.</returns>
            <remarks>Simply change the request URI to something else.</remarks>
        </member>
        <member name="T:Griffin.WebServer.Modules.IWorkerModule">
            <summary>
            A HTTP module which do something useful with the request.
            </summary>
        </member>
        <member name="M:Griffin.WebServer.Modules.IWorkerModule.HandleRequestAsync(Griffin.WebServer.IHttpContext,System.Action{Griffin.WebServer.Modules.IAsyncModuleResult})">
            <summary>
            Handle the request.
            </summary>
            <param name="context">HTTP context</param>
            <param name="callback">Invoked when the module has completed.</param>
            <returns><see cref="F:Griffin.WebServer.Modules.ModuleResult.Stop"/> will stop all processing except <see cref="M:Griffin.WebServer.Modules.IHttpModule.EndRequest(Griffin.WebServer.IHttpContext)"/>.</returns>
            <remarks>Invoked in turn for all modules unless you return <see cref="F:Griffin.WebServer.Modules.ModuleResult.Stop"/>.</remarks>
        </member>
        <member name="T:Griffin.WebServer.Modules.ModuleResult">
            <summary>
            Used to control module behaviour
            </summary>
        </member>
        <member name="F:Griffin.WebServer.Modules.ModuleResult.Continue">
            <summary>
            Continue with the next module
            </summary>
        </member>
        <member name="F:Griffin.WebServer.Modules.ModuleResult.Stop">
            <summary>
            Stop processing more modules
            </summary>
        </member>
        <member name="T:Griffin.WebServer.Modules.AuthenticationModule">
            <summary>
            Uses <see cref="T:Griffin.Net.Protocols.Http.Authentication.IAuthenticator"/> to authenticate requests and then <see cref="T:Griffin.Net.Protocols.Http.Authentication.IPrincipalFactory"/> to generate the user information.
            </summary>
        </member>
        <member name="M:Griffin.WebServer.Modules.AuthenticationModule.#ctor(Griffin.Net.Protocols.Http.Authentication.IAuthenticator,Griffin.Net.Protocols.Http.Authentication.IPrincipalFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.WebServer.Modules.AuthenticationModule" /> class.
            </summary>
            <param name="authenticator">Used for the actual authentication.</param>
            <param name="principalFactory">Used to create the principal that should be used.</param>
            <exception cref="T:System.ArgumentNullException">autheonticator</exception>
        </member>
        <member name="M:Griffin.WebServer.Modules.AuthenticationModule.BeginRequest(Griffin.WebServer.IHttpContext)">
            <summary>
            Invoked before anything else
            </summary>
            <param name="context">HTTP context</param>
            <remarks>
            <para>The first method that is exeucted in the pipeline.</para>
            Try to avoid throwing exceptions if you can. Let all modules have a chance to handle this method. You may break the processing in any other method than the Begin/EndRequest methods.</remarks>
        </member>
        <member name="M:Griffin.WebServer.Modules.AuthenticationModule.EndRequest(Griffin.WebServer.IHttpContext)">
            <summary>
            End request is typically used for post processing. The response should already contain everything required.
            </summary>
            <param name="context">HTTP context</param>
            <remarks>
            <para>The last method that is executed in the pipeline.</para>
            Try to avoid throwing exceptions if you can. Let all modules have a chance to handle this method. You may break the processing in any other method than the Begin/EndRequest methods.</remarks>
        </member>
        <member name="M:Griffin.WebServer.Modules.AuthenticationModule.Authenticate(Griffin.WebServer.IHttpContext)">
            <summary>
            Authorize the request.
            </summary>
            <param name="context">HTTP context</param>
            <returns><see cref="F:Griffin.WebServer.Modules.ModuleResult.Stop"/> will stop all processing including <see cref="M:Griffin.WebServer.Modules.IHttpModule.EndRequest(Griffin.WebServer.IHttpContext)"/>.</returns>
        </member>
        <member name="T:Griffin.WebServer.Modules.ErrorModule">
            <summary>
            Reports errors to different sources.
            </summary>
            <example>
            <code>
            <![CDATA[
            var module = new ErrorModule();
            module.SendEmailTo("arne@somewhere.com", "myWebserver@mydomain.com");
            module.SendEmailTo("webmaster@mydomain.com", "myWebserver@mydomain.com");
            module.BuildCustomErrorPage(context => "<html><body>Opps, fail with exception: " + context.LastException + ". Too bad :(</html></body>");
            module.LogDetails(details => _logger.Error("Request failed: " + details);
            module.LogDetails(details => EventLog.WriteEntry(details);
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Griffin.WebServer.Modules.ErrorModule.BeginRequest(Griffin.WebServer.IHttpContext)">
            <summary>
            Invoked before anything else
            </summary>
            <param name="context">HTTP context</param>
            <remarks>
            <para>The first method that is exeucted in the pipeline.</para>
            Try to avoid throwing exceptions if you can. Let all modules have a chance to handle this method. You may break the processing in any other method than the Begin/EndRequest methods.</remarks>
        </member>
        <member name="M:Griffin.WebServer.Modules.ErrorModule.EndRequest(Griffin.WebServer.IHttpContext)">
            <summary>
            End request is typically used for post processing. The response should already contain everything required.
            </summary>
            <param name="context">HTTP context</param>
            <remarks>
            <para>The last method that is executed in the pipeline.</para>
            Try to avoid throwing exceptions if you can. Let all modules have a chance to handle this method. You may break the processing in any other method than the Begin/EndRequest methods.</remarks>
        </member>
        <member name="M:Griffin.WebServer.Modules.ErrorModule.SendEmailTo(System.String,System.String)">
            <summary>
            Send the error to an email address
            </summary>
            <param name="toAddress">Recipient.</param>
            <param name="fromAddress">Who the mail should be sent from.</param>
            <remarks>You have to configure your SMTP server in app.config under system.net. google.</remarks>
        </member>
        <member name="M:Griffin.WebServer.Modules.ErrorModule.LogDetails(System.Action{System.String})">
            <summary>
            Log error details to somemwhere
            </summary>
            <param name="action">Will container all information about the HTTP request and the exception that ocurred.</param>
            <remarks>Will include request information, the logged in user and the exception details.</remarks>
        </member>
        <member name="M:Griffin.WebServer.Modules.ErrorModule.BuildCustomErrorPage(System.Func{Griffin.WebServer.IHttpContext,System.String})">
            <summary>
            Build a custom error page
            </summary>
            <param name="action">Should return a string which corresponds to the error page that should be displayed.</param>
        </member>
        <member name="T:Griffin.WebServer.Modules.NamespaceDoc">
            <summary>
            Contains built in modules.
            </summary>
            <remarks>You can create your own modules by inheriting any of the interfaces in this namespace. The <see cref="T:Griffin.WebServer.Modules.IHttpModule"/>
            is the base interface that all other interfaces inherit. Then register your module in the <see cref="T:Griffin.WebServer.IModuleManager"/></remarks>
        </member>
        <member name="T:Griffin.WebServer.IHttpContext">
            <summary>
            Request context information
            </summary>
        </member>
        <member name="P:Griffin.WebServer.IHttpContext.Request">
            <summary>
            Incoming request
            </summary>
        </member>
        <member name="P:Griffin.WebServer.IHttpContext.Response">
            <summary>
            Response to send back
            </summary>
        </member>
        <member name="P:Griffin.WebServer.IHttpContext.Items">
            <summary>
            Can be used to store items through this request
            </summary>
            <remarks>Items which are stored for the current request only</remarks>
        </member>
        <member name="P:Griffin.WebServer.IHttpContext.Application">
            <summary>
            Used to store items for the entire application.
            </summary>
            <remarks>These items are shared between all requests and users</remarks>
            <seealso cref="P:Griffin.WebServer.HttpServer.ApplicationInfo"/>
        </member>
        <member name="P:Griffin.WebServer.IHttpContext.Session">
            <summary>
            USed to store items for the current session (if a session has been started)
            </summary>
            <remarks>Will be null if a session has not been started.
            <para>Shared between all requests for a specific user</para></remarks>
        </member>
        <member name="P:Griffin.WebServer.IHttpContext.LastException">
            <summary>
            All exceptions will be logged by the system, but we generally do only keep track of the last one.
            </summary>
        </member>
        <member name="P:Griffin.WebServer.IHttpContext.User">
            <summary>
            Gets or sets currently logged in user.
            </summary>
        </member>
        <member name="P:Griffin.WebServer.IHttpContext.RouteData">
            <summary>
            Gets information stored for the route.
            </summary>
            <remarks>For instance used to convert the URI into parameters.</remarks>
            <seealso cref="T:Griffin.WebServer.Routing.IRequestRouter"/>
        </member>
        <member name="M:Griffin.WebServer.IHttpContext.RegisterForDisposal(System.Action{Griffin.WebServer.IHttpContext})">
            <summary>
            Register a callback for the request disposal (i.e. the reply have been sent back and everything is cleaned up)
            </summary>
            <param name="callback">Callback to invoke</param>
        </member>
        <member name="T:Griffin.WebServer.IItemStorage">
            <summary>
            Abstraction used for different storages.
            </summary>
        </member>
        <member name="P:Griffin.WebServer.IItemStorage.Item(System.String)">
            <summary>
            Get or set an item
            </summary>
            <param name="name">Case insensitive name</param>
            <returns>Item if found; otherwise <c>null</c>.</returns>
        </member>
        <member name="T:Griffin.WebServer.IModuleManager">
            <summary>
            Takes care of the module execution.
            </summary>
            <remarks>Will catch all exceptions and also log them including the request information. 
            
            It will however not do anything with the exception. You either have to have an error module which checks <see cref="P:Griffin.WebServer.IHttpContext.LastException"/>
            in <c>EndRequest()</c> or override the server to handle the error in it.
            <para>Modules are invoked in the following order
            <list type="number">
            <item><see cref="M:Griffin.WebServer.Modules.IHttpModule.BeginRequest(Griffin.WebServer.IHttpContext)"/></item>
            <item><see cref="T:Griffin.WebServer.Modules.IRoutingModule"/></item>
            <item><see cref="T:Griffin.WebServer.Modules.IAuthenticationModule"/></item>
            <item><see cref="T:Griffin.WebServer.Modules.IAuthorizationModule"/></item>
            <item><see cref="T:Griffin.WebServer.Modules.IWorkerModule"/></item>
            <item><see cref="M:Griffin.WebServer.Modules.IHttpModule.EndRequest(Griffin.WebServer.IHttpContext)"/></item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Griffin.WebServer.IModuleManager.Add(Griffin.WebServer.Modules.IHttpModule)">
            <summary>
            Add a HTTP module
            </summary>
            <param name="module">Module to include</param>
            <remarks>Modules are executed in the order they are added.</remarks>
        </member>
        <member name="M:Griffin.WebServer.IModuleManager.InvokeAsync(Griffin.WebServer.IHttpContext,System.Action{Griffin.WebServer.Modules.IAsyncModuleResult})">
            <summary>
            Handle the request asynchronously.
            </summary>
            <param name="context">HTTP context</param>
            <param name="callback">Callback to invoke when the processing is complete </param>
        </member>
        <member name="T:Griffin.WebServer.MemoryItemStorage">
            <summary>
            Uses a Dictionary to store all items
            </summary>
        </member>
        <member name="P:Griffin.WebServer.MemoryItemStorage.Item(System.String)">
            <summary>
            Get or set an item
            </summary>
            <param name="name">Item name</param>
            <returns>Item if found; otherwise <c>null</c>.</returns>
        </member>
        <member name="T:Griffin.WebServer.ModuleManager">
            <summary>
            Takes care of the module execution.
            </summary>
            <remarks><para>Important! The module manager will catch all exceptions, the last one is always attached to <see cref="P:Griffin.WebServer.IHttpContext.LastException"/>.</para>
            <para>
            It will however not do anything with the exception. You either have to have an error module which checks <see cref="P:Griffin.WebServer.IHttpContext.LastException"/>
            in <c>EndRequest()</c> or override the server to handle the error in it.
            </para>
            <para>Modules are invoked in the following order
            <list type="number">
            <item><see cref="M:Griffin.WebServer.Modules.IHttpModule.BeginRequest(Griffin.WebServer.IHttpContext)"/></item>
            <item><see cref="T:Griffin.WebServer.Modules.IRoutingModule"/></item>
            <item><see cref="T:Griffin.WebServer.Modules.IAuthenticationModule"/></item>
            <item><see cref="T:Griffin.WebServer.Modules.IAuthorizationModule"/></item>
            <item><see cref="T:Griffin.WebServer.Modules.IWorkerModule"/></item>
            <item><see cref="M:Griffin.WebServer.Modules.IHttpModule.EndRequest(Griffin.WebServer.IHttpContext)"/></item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Griffin.WebServer.ModuleManager.Add(Griffin.WebServer.Modules.IHttpModule)">
            <summary>
            Add a HTTP module
            </summary>
            <param name="module">Module to include</param>
            <remarks>Modules are executed in the order they are added.</remarks>
        </member>
        <member name="M:Griffin.WebServer.ModuleManager.InvokeAsync(Griffin.WebServer.IHttpContext,System.Action{Griffin.WebServer.Modules.IAsyncModuleResult})">
            <summary>
            Invoke all modules
            </summary>
            <param name="context"></param>
            <returns><c>true</c> if no modules have aborted the handling. Any module throwing an exception is also considered to be abort.</returns>
        </member>
        <member name="T:Griffin.WebServer.Routing.RouterModule">
            <summary>
            Used to route the request.
            </summary>
            <remarks>You may either simply rewrite the request URI or by using a response redirect.</remarks>
        </member>
        <member name="M:Griffin.WebServer.Routing.RouterModule.BeginRequest(Griffin.WebServer.IHttpContext)">
            <summary>
            Invoked before anything else
            </summary>
            <param name="context">HTTP context</param>
            <remarks>
            <para>The first method that is exeucted in the pipeline.</para>
            Try to avoid throwing exceptions if you can. Let all modules have a chance to handle this method. You may break the processing in any other method than the Begin/EndRequest methods.</remarks>
        </member>
        <member name="M:Griffin.WebServer.Routing.RouterModule.EndRequest(Griffin.WebServer.IHttpContext)">
            <summary>
            End request is typically used for post processing. The response should already contain everything required.
            </summary>
            <param name="context">HTTP context</param>
            <remarks>
            <para>The last method that is executed in the pipeline.</para>
            Try to avoid throwing exceptions if you can. Let all modules have a chance to handle this method. You may break the processing in any other method than the Begin/EndRequest methods.</remarks>
        </member>
        <member name="M:Griffin.WebServer.Routing.RouterModule.Route(Griffin.WebServer.IHttpContext)">
            <summary>
            Route the request.
            </summary>
            <param name="context">HTTP context</param>
            <returns><see cref="F:Griffin.WebServer.Modules.ModuleResult.Stop"/> will stop all processing including <see cref="M:Griffin.WebServer.Modules.IHttpModule.EndRequest(Griffin.WebServer.IHttpContext)"/>.</returns>
            <remarks>Simply change the request URI to something else.</remarks>
        </member>
        <member name="M:Griffin.WebServer.Routing.RouterModule.Add(Griffin.WebServer.Routing.IRequestRouter)">
            <summary>
            Add a new router
            </summary>
            <param name="router">Router</param>
        </member>
        <member name="T:Griffin.WebServer.Routing.DefaultDocumentRouter">
            <summary>
            Will add default document to URIs
            </summary>
            <remarks>works for all directories</remarks>
        </member>
        <member name="M:Griffin.WebServer.Routing.DefaultDocumentRouter.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.WebServer.Routing.DefaultDocumentRouter" /> class.
            </summary>
            <param name="homeDirectory">Home directory on disk.</param>
            <param name="documentName">Name of the default document.</param>
            <example>
            <code>
            var documentRouter = new DefaultDocumentRouter(@"C:\www\mysite\", "index.html");
            </code>
            </example>
        </member>
        <member name="M:Griffin.WebServer.Routing.DefaultDocumentRouter.Route(Griffin.WebServer.IHttpContext)">
            <summary>
            Route the request.
            </summary>
            <param name="context">HTTP context used to identify the route</param>
            <returns><c>true</c> if we generated some routing; otherwise <c>false</c></returns>
        </member>
        <member name="T:Griffin.WebServer.Routing.IRequestRouter">
            <summary>
            Route a request
            </summary>
            <remarks>First router doing something wins, all routes added after it will not be run.</remarks>
        </member>
        <member name="M:Griffin.WebServer.Routing.IRequestRouter.Route(Griffin.WebServer.IHttpContext)">
            <summary>
            Route the request.
            </summary>
            <param name="context">HTTP context used to identify the route</param>
            <returns><c>true</c> if we generated some routing; otherwise <c>false</c></returns>
        </member>
        <member name="T:Griffin.WebServer.Routing.RegexPattern">
            <summary>
            Used to match a single pattern
            </summary>
        </member>
        <member name="M:Griffin.WebServer.Routing.RegexPattern.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.WebServer.Routing.RegexPattern" /> class.
            </summary>
            <param name="pattern">The pattern.</param>
            <param name="defaults">The defaults.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Griffin.WebServer.Routing.RegexPattern.Match(Griffin.WebServer.IHttpContext)">
            <summary>
            Match the route and apply the context
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:Griffin.WebServer.Routing.RegexRouter">
            <summary>
            Uses named regular expressions to identify parameters
            </summary>
        </member>
        <member name="M:Griffin.WebServer.Routing.RegexRouter.Route(Griffin.WebServer.IHttpContext)">
            <summary>
            Route the request.
            </summary>
            <param name="context">HTTP context used to identify the route</param>
            <returns><c>true</c> if we generated some routing; otherwise <c>false</c></returns>
        </member>
        <member name="M:Griffin.WebServer.Routing.RegexRouter.Add(System.String,System.Object)">
            <summary>
            Add a regex and default values
            </summary>
            <param name="pattern">Pattern. A typical MVC pattern is <![CDATA[@"/(?<controller>[^/]+)/(?<action>[^/]+)?/(?<id>[^/]+).*"]]>.</param>
            <param name="defaults">For MVC it would be <c>new { controller = "home", action = "index", id = null }</c></param>
        </member>
        <member name="T:Griffin.WebServer.RequestExtensions">
            <summary>
            Used to build error info.
            </summary>
        </member>
        <member name="M:Griffin.WebServer.RequestExtensions.BuildErrorInfo(Griffin.Net.Protocols.Http.IHttpRequest)">
            <summary>
            Generate error information string including query string, form and cookies.
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="T:Griffin.WebServer.ViewEngines.IViewEngine">
            <summary>
            A view engine
            </summary>
            <remarks><para>View engines should not try to resolve views in other paths than the specified one.</para></remarks>
        </member>
        <member name="M:Griffin.WebServer.ViewEngines.IViewEngine.Render(Griffin.WebServer.ViewEngines.ViewEngineContext)">
            <summary>
            Render view
            </summary>
            <param name="context">Context information</param>
            <returns><c>true</c> if this engine rendered the view; otherwise <c>null</c>.</returns>
        </member>
        <member name="T:Griffin.WebServer.ViewEngines.ViewContext">
            <summary>
            Context used to identify view etc.
            </summary>
        </member>
        <member name="P:Griffin.WebServer.ViewEngines.ViewContext.ViewPath">
            <summary>
            Gets or sets path to the requested view.
            </summary>
            <remarks>Absolute path (starting with slash) means that the specified view should be used and nothing else. Relative paths means that the <c>Shared</c> path will also be checked. The file extension
            should never be included.</remarks>
        </member>
        <member name="P:Griffin.WebServer.ViewEngines.ViewContext.ViewWriter">
            <summary>
            The view should be written to this writer.
            </summary>
        </member>
        <member name="P:Griffin.WebServer.ViewEngines.ViewContext.Model">
            <summary>
            Model (if specified)
            </summary>
        </member>
        <member name="P:Griffin.WebServer.ViewEngines.ViewContext.ModuleType">
            <summary>
            Model type
            </summary>
        </member>
        <member name="P:Griffin.WebServer.ViewEngines.ViewContext.ModelType">
            <summary>
            Model type
            </summary>
        </member>
        <member name="P:Griffin.WebServer.ViewEngines.ViewContext.ViewData">
            <summary>
            Additional view data
            </summary>
        </member>
        <member name="T:Griffin.WebServer.ViewEngines.ViewNotFoundException">
            <summary>
            The requested view as not located.
            </summary>
        </member>
        <member name="M:Griffin.WebServer.ViewEngines.ViewNotFoundException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.WebServer.ViewEngines.ViewNotFoundException" /> class.
            </summary>
            <param name="viewPath">The view path.</param>
        </member>
        <member name="P:Griffin.WebServer.ViewEngines.ViewNotFoundException.ViewPath">
            <summary>
            Gets view that was not found;
            </summary>
        </member>
        <member name="T:Griffin.WebServer.ViewEngines.ViewService">
            <summary>
            Used to render views.
            </summary>
        </member>
        <member name="M:Griffin.WebServer.ViewEngines.ViewService.#ctor(Griffin.WebServer.Files.IFileService)">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.WebServer.ViewEngines.ViewService" /> class.
            </summary>
            <param name="fileService">Used to locate all views.</param>
        </member>
        <member name="M:Griffin.WebServer.ViewEngines.ViewService.Register(Griffin.WebServer.ViewEngines.IViewEngine)">
            <summary>
            Register a view engine.
            </summary>
            <param name="viewEngine"></param>
        </member>
        <member name="M:Griffin.WebServer.ViewEngines.ViewService.Render(Griffin.WebServer.ViewEngines.ViewContext)">
            <summary>
            Render a view
            </summary>
            <param name="context"></param>
        </member>
    </members>
</doc>
