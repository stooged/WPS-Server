<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Griffin.Core</name>
    </assembly>
    <members>
        <member name="T:Griffin.ApplicationServices.AppConfigServiceSettings">
            <summary>
                Uses <c>app.config</c> (or <c>web.config)</c>) to identify services that should be started by Griffin Framework.
            </summary>
            <remarks>
                <para>
                    There must exist a key per service in <c><![CDATA[<appSettings>]]></c>. It defines whether a service should be
                    running or not. <see cref="T:Griffin.ApplicationServices.IApplicationService" />. The name
                    should be "ClassName.Enabled". For instance if you have a class named "StatisticsGenerator" the key should be
                    named "StatisticsGenerator.Enabled":
                    <c><![CDATA[<add key="StatisticsGenerator.Enabled" value="true" />]]></c>
                </para>
                <para>
                    Services which keys are not found are interpreted as being disabled.
                </para>
            </remarks>
            <example>
                <para>Class</para>
                <code>
            public class StatisticsGenerator : IApplicationService
            {
                // [...]
            }
            </code>
                <para>
                    app.config setting:
                </para>
                <code>
            <![CDATA[
            <configuration>
             <appSettings>
               <add key="StatisticsGenerator.Enabled" value="true"/>
             <appSettings>
            </configuration>
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Griffin.ApplicationServices.AppConfigServiceSettings.#ctor(Griffin.Configuration.IConfigurationReader)">
            <inheritdoc />
        </member>
        <member name="M:Griffin.ApplicationServices.AppConfigServiceSettings.IsEnabled(System.Type)">
            <summary>
                Check if a service/job should be running.
            </summary>
            <param name="type">
                A type that implements <see cref="T:Griffin.ApplicationServices.IApplicationService" /> or <see cref="T:Griffin.ApplicationServices.IBackgroundJob"/>.
            </param>
            <returns>
                <c>true</c> if the service/job should be running.;<c>false</c> if it should be shut down.
            </returns>
            <exception cref="T:System.ArgumentNullException">type</exception>
        </member>
        <member name="T:Griffin.ApplicationServices.ApplicationServiceFailedEventArgs">
            <summary>
                A service failed (crashed or could not be started).
            </summary>
            <remarks>
                Assign <see cref="P:Griffin.ApplicationServices.ApplicationServiceFailedEventArgs.CanContinue" /> to specify if we can continnue to check services.
            </remarks>
        </member>
        <member name="M:Griffin.ApplicationServices.ApplicationServiceFailedEventArgs.#ctor(Griffin.ApplicationServices.IApplicationService,System.Exception)">
            <summary>
                Initializes a new instance of the <see cref="T:Griffin.ApplicationServices.BackgroundJobFailedEventArgs" /> class.
            </summary>
            <param name="applicationService">Service that failed</param>
            <param name="exception">Caught exception.</param>
        </member>
        <member name="P:Griffin.ApplicationServices.ApplicationServiceFailedEventArgs.ApplicationService">
            <summary>
                Service that we could not start (or restart).
            </summary>
        </member>
        <member name="P:Griffin.ApplicationServices.ApplicationServiceFailedEventArgs.Exception">
            <summary>
                Thrown exception
            </summary>
        </member>
        <member name="P:Griffin.ApplicationServices.ApplicationServiceFailedEventArgs.CanContinue">
            <summary>
                Continue to check the rest of our services.
            </summary>
            <value>
                Default is <c>false</c>.
            </value>
            <remarks>
            <para>
            <c>true</c> means that we'll check all other services too. <c>false</c> means that we'll exit 
            this check iteration, wait <see cref="P:Griffin.ApplicationServices.ApplicationServiceManager.CheckInterval"/> and then check
            all services again.
            </para>
            </remarks>
        </member>
        <member name="T:Griffin.ApplicationServices.ApplicationServiceManager">
            <summary>
                Used to manage services that runs as long as the application (i.e. single instance classes)
            </summary>
            <remarks>
                <para>
                    Services that have been enabled/disabled during runtime will be started/stopped automatically by this library
                    if they
                    implement <see cref="T:Griffin.ApplicationServices.IGuardedService" />. Same goes for services which have crashed.
                    Otherwise they will only be started/stopped when <c>Start()</c>/<c>Stop()</c> is invoked on this manager.
                </para>
                <para>
                    You can also start/stop services at runtime using your configuration file (app/web.config) if you use the
                    <see cref="T:Griffin.ApplicationServices.AppConfigServiceSettings" /> class as configuration source (or your own implementation).
                </para>
                <para>
                    If you are using a inversion of control container your classes should be registered as "Single Instance" in it
                    for this class to work properly.
                </para>
            </remarks>
            <example>
                <para>Start by creating a class:</para>
                <code>
            public class MyQueueReader : IApplicationService
            {
                ServiceBusReader _reader;
            
                public MyQueueReader(/* can use dependency injection */)
                {
                    _reader = new ServiceBusReader(blabla);
                }
            
                public bool IsRunning  { get { return _reader.IsRunning; } }
            
                public void Start()
                {
                    _reader.Start();
                }
            
                public void Stop()
                {
                    _reader.Stop();
                }
            }
            </code>
                <para>To enable the service in your app.config:</para>
                <code>
            <![CDATA[
            <configuration>
             <appSettings>
               <add key="MyQueueReader.Enabled" value="true" />
             <appSettings>
            </configuration>
            ]]>
            </code>
                <para>
                    Finally you have to create the service manager:
                </para>
                <code>
            // Discover all classes that implement IApplicationservice
            var serviceLocator = new AssemblyScanner();
            serviceLocator.Scan(Assembly.GetExecutingAssembly());
            
            //run the services.
            _serviceManager = new ApplicationServiceManager(serviceLocator);
            _serviceManager.Start();
            
            // [...]
            
            // .. when the application is shut down..
            _serviceManager.Stop();
            </code>
            </example>
        </member>
        <member name="M:Griffin.ApplicationServices.ApplicationServiceManager.#ctor(Griffin.Container.IContainer)">
            <summary>
                Initializes a new instance of the <see cref="T:Griffin.ApplicationServices.ApplicationServiceManager" /> class.
            </summary>
            <param name="container">Inversion of control container (griffin adapter to support all containers).</param>
            <exception cref="T:System.ArgumentNullException">container</exception>
        </member>
        <member name="M:Griffin.ApplicationServices.ApplicationServiceManager.#ctor(Griffin.ApplicationServices.IAppServiceLocator)">
            <summary>
                Initializes a new instance of the <see cref="T:Griffin.ApplicationServices.ApplicationServiceManager" /> class.
            </summary>
            <param name="serviceLocator">Implementation used to find all registered services.</param>
            <exception cref="T:System.ArgumentNullException">container</exception>
        </member>
        <member name="P:Griffin.ApplicationServices.ApplicationServiceManager.Settings">
            <summary>
                Used to be able to determine which services should be running
            </summary>
        </member>
        <member name="P:Griffin.ApplicationServices.ApplicationServiceManager.CheckInterval">
            <summary>
                How frequently we should check if there are any services that should be started/stopped.
            </summary>
            <remarks>
            </remarks>
            <value>Default is every 30 seconds.</value>
        </member>
        <member name="P:Griffin.ApplicationServices.ApplicationServiceManager.StartInterval">
            <summary>
                Amount of time before starting services for the first time.
            </summary>
            <value>
                Default is 5 seconds.
            </value>
        </member>
        <member name="E:Griffin.ApplicationServices.ApplicationServiceManager.ServiceStartFailed">
            <summary>
                Failed to start a service (no matter if it's for the first time or later on)
            </summary>
        </member>
        <member name="E:Griffin.ApplicationServices.ApplicationServiceManager.ServiceFailed">
            <summary>
                Service failed to execute properly (an unhandled exception was caught).
            </summary>
        </member>
        <member name="M:Griffin.ApplicationServices.ApplicationServiceManager.Disable(System.String)">
            <summary>
                Disable service (so it will be shut down during the next service check).
            </summary>
            <param name="className">Name of class (with or without namespace)</param>
            <remarks>
                <para>
                    Requires that the service implements <see cref="T:Griffin.ApplicationServices.IGuardedService" />.
                </para>
                <para>
                    This will override the setting in the configuration file.
                </para>
            </remarks>
            <example>
                <code>
            serviceManager.Settings.Disable("YourClassName");
            </code>
            </example>
        </member>
        <member name="M:Griffin.ApplicationServices.ApplicationServiceManager.Disable(System.Type)">
            <summary>
                Disable service (so it will be shut down during the next service check)
            </summary>
            <param name="type">Type to disable</param>
            <remarks>
                <para>
                    Requires that the service implements <see cref="T:Griffin.ApplicationServices.IGuardedService" />.
                </para>
                <para>
                    This will override the setting in the configuration file.
                </para>
            </remarks>
        </member>
        <member name="M:Griffin.ApplicationServices.ApplicationServiceManager.Enable(System.String)">
            <summary>
                Enable a service (so that it will be started during the next service check)
            </summary>
            <param name="className">Name of class (with or without namespace)</param>
            <remarks>
                <para>
                    Requires that the service implements <see cref="T:Griffin.ApplicationServices.IGuardedService" />.
                </para>
                <para>
                    This will override the setting in the configuration file.
                </para>
            </remarks>
            <example>
                <code>
            serviceManager.Settings.Disable("YourClassName");
            </code>
            </example>
        </member>
        <member name="M:Griffin.ApplicationServices.ApplicationServiceManager.Enable(System.Type)">
            <summary>
                Enable service (so it will be started during the next service check)
            </summary>
            <param name="type">Type to disable</param>
            <remarks>
                <para>
                    Requires that the service implements <see cref="T:Griffin.ApplicationServices.IGuardedService" />.
                </para>
                <para>
                    This will override the setting in the configuration file.
                </para>
            </remarks>
        </member>
        <member name="M:Griffin.ApplicationServices.ApplicationServiceManager.Start">
            <summary>
                Start all services and start monitoring them.
            </summary>
            <exception cref="T:System.AggregateException">
                Contains one or more <see cref="T:Griffin.ApplicationServices.StartServiceException" /> with information about the services that could not be
                started.
            </exception>
        </member>
        <member name="M:Griffin.ApplicationServices.ApplicationServiceManager.Stop">
            <summary>
                Will shut down all services and stop checking their health.
            </summary>
            <exception cref="T:System.AggregateException">Contains a list of errors for all services that could not be stopped.</exception>
        </member>
        <member name="M:Griffin.ApplicationServices.ApplicationServiceManager.CheckServices">
            <summary>
                check services whether they should be started/stopped.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Griffin.ApplicationServices.ApplicationServiceThread">
            <summary>
                An application service which runs inside a thread.
            </summary>
            <remarks>
                <para>
                    Make sure that you wait on the wait handle to support graceful shutdowns.
                </para>
            </remarks>
            <example>
            <code>
            [ContainerService(Lifetime = Lifetime.SingleInstance)]
            public class TestAppService : ApplicationServiceThread
            {
            	public TestAppService()
            	{
            		
            	}
            
            	protected void Run(WaitHandle shutdownHandle)
            	 {
            		 while (true)
            		 {
            			 try
            			 {
            				 // pause 100ms between each loop iteration.
            				 // you can specify 0 too
            				 if (shutdownHandle.WaitOne(100))
            					 break;
            	 
            				 // do actual logic here.
            			 } 
            			 catch (Exception ex)
            			 {
            				 // shutdown thread if it's a DB exception
            				 // thread will be started again by the ApplicationServiceManager
            				 if (ex is DataException)
            					 throw;
            	 
            				 _log.Error("Opps", ex);
            			 }
            		 }
            	 }
            }
            </code>
            </example>
        </member>
        <member name="M:Griffin.ApplicationServices.ApplicationServiceThread.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.ApplicationServices.ApplicationServiceThread"/> class.
            </summary>
        </member>
        <member name="E:Griffin.ApplicationServices.ApplicationServiceThread.Failed">
            <summary>
                Failed to execute service.
            </summary>
            <remarks>
            <para>The string is the log entry to write to the log.</para>
            </remarks>
        </member>
        <member name="P:Griffin.ApplicationServices.ApplicationServiceThread.StopWaitTime">
            <summary>
                How long to wait on the thread for completion before terminating it.
            </summary>
        </member>
        <member name="P:Griffin.ApplicationServices.ApplicationServiceThread.IsRunning">
            <summary>
                Returnerar <c>true</c> om tjänsten är uppe och snurrar.
            </summary>
        </member>
        <member name="M:Griffin.ApplicationServices.ApplicationServiceThread.Start">
            <summary>
                Starta vad det nu är som tjänsten hanterar.
            </summary>
        </member>
        <member name="M:Griffin.ApplicationServices.ApplicationServiceThread.Stop">
            <summary>
                Shut down the running service.
            </summary>
        </member>
        <member name="M:Griffin.ApplicationServices.ApplicationServiceThread.Run(System.Threading.WaitHandle)">
            <summary>
                Run your logic.
            </summary>
            <param name="shutdownHandle">Being triggered when your method should stop running.</param>
            <example>
                <code>
            protected void Run(WaitHandle shutdownHandle)
            {
                while (true)
                {
                    try
                    {
                        // pause 100ms between each loop iteration.
                        // you can specify 0 too
                        if (shutdownHandle.WaitOne(100))
                            break;
            
                        // do actual logic here.
                    } 
                    catch (Exception ex)
                    {
                        // shutdown thread if it's a DB exception
                        // thread will be started again by the ApplicationServiceManager
                        if (ex is DataException)
                            throw;
            
                        _log.Error("Opps", ex);
                    }
                }
            }
            </code>
            </example>
        </member>
        <member name="T:Griffin.ApplicationServices.ApplicationServiceTimer">
            <summary>
                An application service which runs within a timer
            </summary>
            <remarks>
                <para>
                    Do note that this implementation do not wait on completion when being shut down using <c>Stop()</c>.
                </para>
            </remarks>
        </member>
        <member name="M:Griffin.ApplicationServices.ApplicationServiceTimer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.ApplicationServices.ApplicationServiceTimer"/> class.
            </summary>
        </member>
        <member name="P:Griffin.ApplicationServices.ApplicationServiceTimer.FirstInterval">
            <summary>
                Interval before the first invocation
            </summary>
            <value>
                Default is 500ms.
            </value>
        </member>
        <member name="P:Griffin.ApplicationServices.ApplicationServiceTimer.Interval">
            <summary>
                Interval *between* every invocation
            </summary>
            <value>
                Default is 5 seconds
            </value>
        </member>
        <member name="P:Griffin.ApplicationServices.ApplicationServiceTimer.IsRunning">
            <summary>
                Returns <c>true</c> if the timer is running.
            </summary>
        </member>
        <member name="M:Griffin.ApplicationServices.ApplicationServiceTimer.Start">
            <summary>
                Starts the internal timer.
            </summary>
        </member>
        <member name="M:Griffin.ApplicationServices.ApplicationServiceTimer.Stop">
            <summary>
                Stop the internal timer.
            </summary>
        </member>
        <member name="E:Griffin.ApplicationServices.ApplicationServiceTimer.Failed">
            <summary>
            Service failed to execute.
            </summary>
        </member>
        <member name="M:Griffin.ApplicationServices.ApplicationServiceTimer.Execute">
            <summary>
                Used to do work periodically.
            </summary>
            <remarks>
                Invoked every time the timer does an iteration. The interval is configured by <see cref="P:Griffin.ApplicationServices.ApplicationServiceTimer.FirstInterval" /> and
                <see cref="P:Griffin.ApplicationServices.ApplicationServiceTimer.Interval" />. The intervals
                are paused during the execution of <c>Execute()</c> so that your method is not invoked twice if it doesn't complete
                within the specified interval.
            </remarks>
            <example>
                <code>
            protected override void Execute()
            {
               //Do some work.
            }
            </code>
            </example>
        </member>
        <member name="T:Griffin.ApplicationServices.BackgroundJobFailedEventArgs">
            <summary>
                Failed to execute a job. 
            </summary>
        </member>
        <member name="M:Griffin.ApplicationServices.BackgroundJobFailedEventArgs.#ctor(System.Object,System.Exception)">
            <summary>
                Initializes a new instance of the <see cref="T:Griffin.ApplicationServices.BackgroundJobFailedEventArgs" /> class.
            </summary>
            <param name="job">Job that failed (or <see cref="T:Griffin.ApplicationServices.BackgroundJobManager.NoJob"/> if the job could not be resolved in the container).</param>
            <param name="exception">Exception that the job threw.</param>
        </member>
        <member name="P:Griffin.ApplicationServices.BackgroundJobFailedEventArgs.Job">
            <summary>
                Job that failed.
            </summary>
            <remarks>
            <para>An object which implements either <c>IBackgroundJob</c> or <c>IBackgroundJobAsync</c>.</para>
            </remarks>
        </member>
        <member name="P:Griffin.ApplicationServices.BackgroundJobFailedEventArgs.Exception">
            <summary>
                Exception that the job threw.
            </summary>
        </member>
        <member name="T:Griffin.ApplicationServices.BackgroundJobManager">
            <summary>
                Used to execute all classes that implement <see cref="T:Griffin.ApplicationServices.IBackgroundJob" />. The jobs are executed in parallel.
            </summary>
            <remarks>
                <para>
                    This implementation uses your inversion of control container via the interface
                    <see cref="T:Griffin.Container.IContainer" />.. A new scope (
                    <see
                        cref="T:Griffin.Container.IContainerScope" />
                    ) is created for every time a job is executed.
                </para>
                <para>
                    By subscribing on the event <see cref="E:Griffin.ApplicationServices.BackgroundJobManager.ScopeClosing" /> you can for instance commit an unit of work every time a
                    job have been executed.
                </para>
                <para>
                    To be able to run every job in isolation (in an own scope) we need to be able to find all background jobs. To
                    do that a temporary scope
                    is created during startup to resolve all jobs (<c><![CDATA[scope.ResolveAll<IBackgroundJob>()]]></c>. The jobs
                    are not invoked but only located so that we can map all background job types. Then later
                    when we are going to execute each job we use <c><![CDATA[scope.Resolve(jobType)]]></c> for every job that is
                    about to be executed.
                </para>
            </remarks>
            <example>
                <para>
                    Example for a windows service class:
                </para>
                <code>
            public class Service1 : ServiceBase
            {
                BackgroundJobManager _jobInvoker;
                IContainer  _container;
            
                public Service1()
                {
                    _serviceLocator = CreateContainer();
            
                    _jobInvoker = new BackgroundJobManager(_container);
                    _jobInvoker.ScopeClosing += OnScopeClosing;
                }
            
                public override OnStart(string[] argv)
                {
                    _jobInvoker.Start();
                }
            
                public override OnStop()
                {
                    _jobInvoker.Stop();
                }
            
                public void CreateContainer()
                {
                    // either create your container directly
                    // or use the composition root pattern.
                }
            
                // so that we can commit the transaction
                // event will not be invoked if something fails.
                public void OnScopeClosing(object sender, ScopeCreatedEventArgs e)
                {
                    <![CDATA[e.Scope.Resolve<IUnitOfWork>().SaveChanges();]]>
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Griffin.ApplicationServices.BackgroundJobManager.#ctor(Griffin.Container.IContainer)">
            <summary>
                Initializes a new instance of the <see cref="T:Griffin.ApplicationServices.BackgroundJobManager" /> class.
            </summary>
            <param name="container">The container.</param>
        </member>
        <member name="P:Griffin.ApplicationServices.BackgroundJobManager.StartInterval">
            <summary>
                Amount of time before running the jobs for the first time
            </summary>
        </member>
        <member name="P:Griffin.ApplicationServices.BackgroundJobManager.ExecuteInterval">
            <summary>
                Amount of time that should be passed between every execution run.
            </summary>
        </member>
        <member name="P:Griffin.ApplicationServices.BackgroundJobManager.ExecuteSequentially">
            <summary>
            Dont execute jobs in parallell (parallell executions can cause deadloks for DB jobs)
            </summary>
        </member>
        <member name="M:Griffin.ApplicationServices.BackgroundJobManager.Dispose">
            <summary>
                Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="E:Griffin.ApplicationServices.BackgroundJobManager.ScopeCreated">
            <summary>
                A new scope has been created and the jobs are about to be executed.
            </summary>
        </member>
        <member name="E:Griffin.ApplicationServices.BackgroundJobManager.ScopeClosing">
            <summary>
                A job have finished executing.
            </summary>
            <remarks>
                <para>
                    Will not be invoked if <see cref="E:Griffin.ApplicationServices.BackgroundJobManager.JobFailed" /> event sets <c>CanContinue</c> to <c>false</c>.
                </para>
            </remarks>
        </member>
        <member name="E:Griffin.ApplicationServices.BackgroundJobManager.JobFailed">
            <summary>
                One of the jobs failed
            </summary>
            <remarks>
                Use this event to determine if the rest of the jobs should be able to execute.
            </remarks>
        </member>
        <member name="M:Griffin.ApplicationServices.BackgroundJobManager.Start">
            <summary>
                Start executing jobs (once the <see cref="P:Griffin.ApplicationServices.BackgroundJobManager.StartInterval" /> have been passed).
            </summary>
            <remarks>
                <para>
                    Will do one initial resolve on all jobs in the container to be able to discover their <c>Type</c>. Without this
                    check it would not be
                    possible to run each job in an isolated scope.
                </para>
            </remarks>
        </member>
        <member name="M:Griffin.ApplicationServices.BackgroundJobManager.Stop">
            <summary>
                Stop executing jobs.
            </summary>
        </member>
        <member name="T:Griffin.ApplicationServices.BackgroundJobManager.NoJob">
            <summary>
            Used in the events when a job can not be constructed.
            </summary>
        </member>
        <member name="M:Griffin.ApplicationServices.BackgroundJobManager.NoJob.#ctor(System.Type,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.ApplicationServices.BackgroundJobManager.NoJob"/> class.
            </summary>
            <param name="jobType">Type of the job.</param>
            <param name="exception">The exception.</param>
            <exception cref="T:System.ArgumentNullException">exception</exception>
        </member>
        <member name="P:Griffin.ApplicationServices.BackgroundJobManager.NoJob.JobType">
            <summary>
            Job that could not be created
            </summary>
        </member>
        <member name="P:Griffin.ApplicationServices.BackgroundJobManager.NoJob.Exception">
            <summary>
            Exception that prevents job from being created.
            </summary>
        </member>
        <member name="M:Griffin.ApplicationServices.BackgroundJobManager.NoJob.Execute">
            <summary>
                NOOP
            </summary>
        </member>
        <member name="M:Griffin.ApplicationServices.BackgroundJobManager.NoJob.ToString">
            <summary>
                Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </summary>
            <returns>
                A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </returns>
        </member>
        <member name="T:Griffin.ApplicationServices.IApplicationService">
            <summary>
                A service which are doing some kind of work during the entire application lifetime (i.e. sort of an instance service).
            </summary>
            <remarks>
            <para>
            This library can use your inversion of control container to find and execute all services registered in it. The librar will also catch any unhandled exception
            and restart services that fail. You can also use your configuration file to start/stop services during runtime.
            </para>
            </remarks>
            <example>
            <para>Let's say that you have a service which reads from a message queue:</para>
            <code>
             public class RequestQueueReader : IApplicationService
             {
                 private readonly ILog _logger = LogManager.GetLogger(typeof (RequestQueueReader));
                 private readonly IContainer _container;
                 private readonly QueueReader _reader;
                 private int _retryCounter;
            
                 public RequestQueueReader(IContainer container)
                 {
                     _container  container;
            
                     var queueName = ConfigurationManager.AppSettings["RequestQueue.Name"];
                     if (queueName == null)
                         throw new ConfigurationErrorsException(
                             "Did not find 'RequestQueue.Name' in appSettings. Configure it.");
            
                     _reader = new QueueReader(queueName, new XmlMessageSerializer(new[] {typeof (RequestMsg)}));
                     _reader.MessageReceived += OnMessageRead;
                     _reader.Faulted += OnFaulted;
                 }
            
            
                 public void Start()
                 {
                     _reader.Start();
                 }
            
                 public void Stop()
                 {
                     _reader.Stop();
                 }
            
                 private void OnMessageRead(object sender, MessageReceivedEventArgs e)
                 {
                     var message = (Anno) e.Message;
                     _annoMessageHandler.Handle(message);
                     _retryCounter = 0;
                 }
             }
            </code>
            </example>
            <seealso cref="T:Griffin.ApplicationServices.ApplicationServiceManager"/>
        </member>
        <member name="M:Griffin.ApplicationServices.IApplicationService.Start">
            <summary>
                Starta vad det nu är som tjänsten hanterar.
            </summary>
        </member>
        <member name="M:Griffin.ApplicationServices.IApplicationService.Stop">
            <summary>
                Stäng ned det som tjänsten hanterar
            </summary>
        </member>
        <member name="T:Griffin.ApplicationServices.IAppServiceLocator">
            <summary>
            Used to discover services.
            </summary>
        </member>
        <member name="M:Griffin.ApplicationServices.IAppServiceLocator.GetServices">
            <summary>
            Discover all services for <see cref="T:Griffin.ApplicationServices.ApplicationServiceManager"/>.
            </summary>
            <returns>Returned services are considered to be single instances, i.e. live as long as the application.</returns>
        </member>
        <member name="T:Griffin.ApplicationServices.IBackgroundJob">
            <summary>
                A background job which requires a lifetime scope (to access database connection/transaction etc).
            </summary>
            <example>
            <code>
            <![CDATA[
            [ContainerService]
            public class CleanUpOldFriendRequests : IBackgroundJob
            {
                private readonly IUnitOfWork _uow;
                private static DateTime _lastExecutionTime;
            
                public CleanUpOldFriendRequests(IUnitOfWork uow)
                {
                    if (uow == null) throw new ArgumentNullException("uow");
            
                    _uow = uow;
                }
            
                public void Execute()
                {
                    //run once a day
                    if (_lastExecutionTime.Date >= DateTime.Today)
                        return;
                    _lastExecutionTime = DateTime.Today;
            
                    using (var cmd = _uow.CreateCommand())
                    {
                        cmd.CommandText = "DELETE FROM FriendRequests WHERE CreatedAtUtc < @datum";
                        cmd.AddParameter("datum", DateTime.Today.AddDays(-10));
                        cmd.ExecuteNonQuery();
                    }
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Griffin.ApplicationServices.IBackgroundJob.Execute">
            <summary>
                Execute job
            </summary>
            <remarks>
                Any unhandled exceptions will be caught by the <see cref="T:Griffin.ApplicationServices.BackgroundJobManager"/>.
            </remarks>
        </member>
        <member name="T:Griffin.ApplicationServices.IBackgroundJobAsync">
            <summary>
                A background job which requires a lifetime scope (to access database connection/transaction etc).
            </summary>
            <example>
            <code>
            <![CDATA[
            [ContainerService]
            public class CleanUpOldFriendRequests : IBackgroundJobAsync
            {
                private readonly IUnitOfWork _uow;
                private static DateTime _lastExecutionTime;
            
                public CleanUpOldFriendRequests(IUnitOfWork uow)
                {
                    if (uow == null) throw new ArgumentNullException("uow");
            
                    _uow = uow;
                }
            
                public async Task ExecuteAsync()
                {
                    //run once a day
                    if (_lastExecutionTime.Date >= DateTime.Today)
                        return;
                    _lastExecutionTime = DateTime.Today;
            
                    using (var cmd = _uow.CreateCommand())
                    {
                        cmd.CommandText = "DELETE FROM FriendRequests WHERE CreatedAtUtc < @datum";
                        cmd.AddParameter("datum", DateTime.Today.AddDays(-10));
                        await cmd.ExecuteNonQueryAsync();
                    }
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Griffin.ApplicationServices.IBackgroundJobAsync.ExecuteAsync">
            <summary>
                Execute job
            </summary>
            <remarks>
                Any unhandled exceptions will be caught by the <see cref="T:Griffin.ApplicationServices.BackgroundJobManager"/>.
            </remarks>
            <returns>Completion task</returns>
        </member>
        <member name="T:Griffin.ApplicationServices.IGuardedService">
            <summary>
            Guarded services can be stopped/started/restarted by this library during runtime.
            </summary>
            <remarks>
            <para>
            You can use app/web.config to disable/enable the service (even during runtime).
            </para>
            <code>
            <![CDATA[
            <configuration>
             <appSettings>
               <add key="YourClassName.Enabled" value="true"/>
             <appSettings>
            </configuration>
            ]]>
            </code>
            </remarks>
        </member>
        <member name="P:Griffin.ApplicationServices.IGuardedService.IsRunning">
            <summary>
            Returns if the service is currently running
            </summary>
        </member>
        <member name="E:Griffin.ApplicationServices.IGuardedService.Failed">
            <summary>
            Service failed to execute.
            </summary>
        </member>
        <member name="T:Griffin.ApplicationServices.IocAppServiceLocator">
            <summary>
                Uses your inversion of control container to locate services.
            </summary>
            <remarks>
                <para>
                    No need to use this class directly, simply pass the <see cref="T:Griffin.Container.IContainer" /> (i.e. your IoC adapter) to the
                    <see cref="T:Griffin.ApplicationServices.ApplicationServiceManager" /> constructor.
                </para>
            </remarks>
        </member>
        <member name="M:Griffin.ApplicationServices.IocAppServiceLocator.#ctor(Griffin.Container.IContainer)">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.ApplicationServices.IocAppServiceLocator"/> class.
            </summary>
            <param name="container">Used to resolve <see cref="T:Griffin.ApplicationServices.IApplicationService"/>.</param>
            <exception cref="T:System.ArgumentNullException">container</exception>
        </member>
        <member name="M:Griffin.ApplicationServices.IocAppServiceLocator.GetServices">
            <summary>
                Discover all services for <see cref="T:Griffin.ApplicationServices.ApplicationServiceManager" />.
            </summary>
            <returns>Returned services are considered to be single instances, i.e. live as long as the application.</returns>
        </member>
        <member name="T:Griffin.ApplicationServices.ISettingsRepository">
            <summary>
                Settings used by <see cref="T:Griffin.ApplicationServices.ApplicationServiceManager" /> and <see cref="T:Griffin.ApplicationServices.BackgroundJobManager"/>.
            </summary>
            <remarks>
            <para>This contract represents a configuration source. It might be your app/web.config or a database table.</para>
            </remarks>
            <seealso cref="T:Griffin.ApplicationServices.AppConfigServiceSettings"/>
        </member>
        <member name="M:Griffin.ApplicationServices.ISettingsRepository.IsEnabled(System.Type)">
            <summary>
                Check if a service/job should be running.
            </summary>
            <param name="type">
                A type that implements <see cref="T:Griffin.ApplicationServices.IApplicationService" /> or <see cref="T:Griffin.ApplicationServices.IBackgroundJob"/>.
            </param>
            <returns>
                <c>true</c> if the service/job should be running.;<c>false</c> if it should be shut down.
            </returns>
            <exception cref="T:System.ArgumentNullException">type</exception>
        </member>
        <member name="T:Griffin.ApplicationServices.NamespaceDoc">
            <summary>
            Application services are used to manage long running services and background jobs in business applications.
            </summary>
        </member>
        <member name="T:Griffin.ApplicationServices.ScopeClosingEventArgs">
            <summary>
                Arg for <see cref="E:Griffin.ApplicationServices.BackgroundJobManager.ScopeClosing" />
            </summary>
        </member>
        <member name="M:Griffin.ApplicationServices.ScopeClosingEventArgs.#ctor(Griffin.Container.IContainerScope,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.ApplicationServices.ScopeClosingEventArgs"/> class.
            </summary>
            <param name="scope">scope that is being closed.</param>
            <param name="successful">job was executed successfully.</param>
            <exception cref="T:System.ArgumentNullException">scope</exception>
        </member>
        <member name="P:Griffin.ApplicationServices.ScopeClosingEventArgs.Scope">
            <summary>
                Scope that this event is for.
            </summary>
        </member>
        <member name="P:Griffin.ApplicationServices.ScopeClosingEventArgs.Successful">
            <summary>
            Job was executed successfully
            </summary>
        </member>
        <member name="P:Griffin.ApplicationServices.ScopeClosingEventArgs.Exception">
            <summary>
            Exception if <see cref="P:Griffin.ApplicationServices.ScopeClosingEventArgs.Successful"/> is false.
            </summary>
        </member>
        <member name="T:Griffin.ApplicationServices.ScopeCreatedEventArgs">
            <summary>
                Arg for  <see cref="E:Griffin.ApplicationServices.BackgroundJobManager.ScopeCreated" />
            </summary>
        </member>
        <member name="M:Griffin.ApplicationServices.ScopeCreatedEventArgs.#ctor(Griffin.Container.IContainerScope)">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.ApplicationServices.ScopeCreatedEventArgs"/> class.
            </summary>
            <param name="scope">That that will be used to resolve job.</param>
            <exception cref="T:System.ArgumentNullException">scope</exception>
        </member>
        <member name="P:Griffin.ApplicationServices.ScopeCreatedEventArgs.Scope">
            <summary>
                Scope that this event is for.
            </summary>
        </member>
        <member name="T:Griffin.ApplicationServices.StartServiceException">
            <summary>
                Failed to start a service.
            </summary>
            <seealso cref="T:Griffin.ApplicationServices.ApplicationServiceManager" />
        </member>
        <member name="M:Griffin.ApplicationServices.StartServiceException.#ctor(Griffin.ApplicationServices.IApplicationService,System.Exception)">
            <summary>
            </summary>
            <param name="service">Service that failed</param>
            <param name="exception">Exception which prevented the service from starting.</param>
        </member>
        <member name="P:Griffin.ApplicationServices.StartServiceException.Service">
            <summary>
                Gets service which could not be started
            </summary>
        </member>
        <member name="T:Griffin.BitConverter2">
            <summary>
            Missing <see cref="T:System.BitConverter"/> methods.
            </summary>
        </member>
        <member name="M:Griffin.BitConverter2.GetBytes(System.Int32,System.Byte[],System.Int32)">
            <summary>
            Copies the int into the pre-allocated buffer.
            </summary>
            <param name="value">The value.</param>
            <param name="destination">The destination.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:Griffin.BitConverter2.GetBytes(System.Int16,System.Byte[],System.Int32)">
            <summary>
            Copes the short into the pre-allocated buffer
            </summary>
            <param name="value">The value.</param>
            <param name="destination">The destination.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="T:Griffin.Configuration.IConfigurationReader">
            <summary>
            Purpose of this class is to abstract away configuration reads.
            </summary>
            <remarks>
            <para>
            .NET standard dropped ConfigurationManager, so this is our alternative.
            </para>
            </remarks>
            TODO: Change this to a more specific class (with methods like IsServiceEnabled)
        </member>
        <member name="T:Griffin.ConstructorExtensions">
            <summary>
                Credits http://rogeralsing.com/2008/02/28/linq-expressions-creating-objects/
            </summary>
        </member>
        <member name="M:Griffin.ConstructorExtensions.CreateFactory(System.Reflection.ConstructorInfo)">
            <summary>
                Creates a delegate which allocates a new object faster than  <see cref="M:System.Activator.CreateInstance``1" />.
            </summary>
            <param name="ctor">The ctor.</param>
            <returns>The activator</returns>
            <remarks>
                The method uses an expression tree to build
                a delegate for the specified constructor
            </remarks>
        </member>
        <member name="T:Griffin.Container.ContainerLifetime">
            <summary>
            Defines which lifetime a service implementation should have in the inversion of control container
            </summary>
            <seealso cref="T:Griffin.Container.ContainerServiceAttribute"/>
        </member>
        <member name="F:Griffin.Container.ContainerLifetime.Scoped">
            <summary>
            Scoped, i.e. will be diposed when the child container is disposed.
            </summary>
        </member>
        <member name="F:Griffin.Container.ContainerLifetime.SingleInstance">
            <summary>
            Same instance should be used for all retrievals.
            </summary>
        </member>
        <member name="F:Griffin.Container.ContainerLifetime.Transient">
            <summary>
            Return a new instance every time
            </summary>
        </member>
        <member name="T:Griffin.Container.ContainerServiceAttribute">
            <summary>
                Used to simplify registration of services in an inversion of control container.
            </summary>
            <remarks>
                <para>
                    The purpose of this attribute is to allow services to be registered in containers without having to specify a <c>Register()</c> line for every class that should exist in the service. You
            can instead tag every class with this attribute and then let the container scan all assemblies after classes that have this attribute. We have built support for that in every container adaper that we've written. The extension methods
            are called <c>RegisterServices()</c>.
                </para>
                <para>
                    The methods that does registrations with the help of this attribute should register the class as all implemented interfaces except those that exist in the core .NET framework. If the class do not implement
            an interface it should be registered as itself.
                </para>
            </remarks>
            <example>
                <para>Example class that should be registered:</para>
                <code>
            [ContainerService]
            public class UserRepository : IRepository
            {
                IDbConnection _connection;
            
                public UserRepository(IDbConnection connection)
                {
                    if (connection == null) throw new ArgumentNullException("connection");
            
                    _connection = connection;
                }
            }
            </code>
            <para>
            If we use the autofac package <c>Griffin.Framework.Autofac</c> we can register it as:
            <code>
            var builder = new ContainerBuilder();
            
            // find all classes in the specified assembly
            builder.RegisterServices(Assembly.GetExecutingAssembly());
            
            var container = builder.Build();
            </code>
            </para>
            </example>
        </member>
        <member name="M:Griffin.Container.ContainerServiceAttribute.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Griffin.Container.ContainerServiceAttribute" /> class.
            </summary>
            <remarks>
            <para>
            Lifetime is per default <c>ContainerLifetime.Scoped</c>.
            </para>
            </remarks>
        </member>
        <member name="M:Griffin.Container.ContainerServiceAttribute.#ctor(Griffin.Container.ContainerLifetime)">
            <summary>
                Initializes a new instance of the <see cref="T:Griffin.Container.ContainerServiceAttribute" /> class.
            </summary>
            <param name="lifetime">how long the object should live in the container..</param>
        </member>
        <member name="P:Griffin.Container.ContainerServiceAttribute.Lifetime">
            <summary>
                Gets specified lifetime
            </summary>
            <value>
            Lifetime is per default <c>ContainerLifetime.Scoped</c> unless otherwise specified in the constructor.
            </value>
        </member>
        <member name="T:Griffin.Container.DependencyMissingException">
            <summary>
            A dependency was missing when we tried to resolve a service.
            </summary>
            <remarks>
            <para>
            Thrown when the requested service can be found, but one of the dependencies that the implementation of the service has is missing.
            </para>
            </remarks>
        </member>
        <member name="M:Griffin.Container.DependencyMissingException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.Container.DependencyMissingException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Griffin.Container.IContainer">
            <summary>
                Contract for an inversion of control container
            </summary>
        </member>
        <member name="M:Griffin.Container.IContainer.Resolve``1">
            <summary>
                Resolve the last registered implementation for a service.
            </summary>
            <typeparam name="TService">Service that we want to get an implementation for</typeparam>
            <returns>object that implements the specified service</returns>
            <exception cref="T:Griffin.Container.ServiceNotRegisteredException">Failed to find an implementation for the service</exception>
            <exception cref="T:Griffin.Container.DependencyMissingException">A dependency was missing when constructing the service implementation.</exception>
        </member>
        <member name="M:Griffin.Container.IContainer.Resolve(System.Type)">
            <summary>
                Resolve the last registered implementation for a service.
            </summary>
            <param name="service">Service that we want to get an implementation for.</param>
            <returns>object that implements the specified service</returns>
            <exception cref="T:Griffin.Container.ServiceNotRegisteredException">Failed to find an implementation for the service</exception>
            <exception cref="T:Griffin.Container.DependencyMissingException">A dependency was missing when constructing the service implementation.</exception>
        </member>
        <member name="M:Griffin.Container.IContainer.ResolveAll``1">
            <summary>
                Resolve all implementations for a service.
            </summary>
            <typeparam name="TService">Service that we want to get an implementation(s) for</typeparam>
            <returns>A list of implementations, or an empty list if no implementations are found.</returns>
            <exception cref="T:Griffin.Container.DependencyMissingException">A dependency was missing when constructing the service implementation.</exception>
        </member>
        <member name="M:Griffin.Container.IContainer.ResolveAll(System.Type)">
            <summary>
                Resolve all implementations for a service.
            </summary>
            <param name="service">Service that we want to get an implementation(s) for</param>
            <returns>A list of implementations, or an empty list if no implementations are found.</returns>
            <exception cref="T:Griffin.Container.DependencyMissingException">A dependency was missing when constructing the service implementation.</exception>
        </member>
        <member name="M:Griffin.Container.IContainer.CreateScope">
            <summary>
                Created a child scope (i.e. a container with a lifetime that you control. Dispose the scope to clean up all
                resolved services).
            </summary>
            <returns>A child container (i.e. a lifetime scope)</returns>
        </member>
        <member name="T:Griffin.Container.IContainerScope">
            <summary>
            Represents a container with a limited lifetime.
            </summary>
            <remarks>
            <para>
            A child container stores all scoped objects in a list and will dispose all resolved objects when the scope is being disposed.
            </para>
            </remarks>
        </member>
        <member name="M:Griffin.Container.IContainerScope.Resolve``1">
            <summary>
                Resolve the last registered implementation of a service.
            </summary>
            <typeparam name="TService">Service that we want to get an implementation for</typeparam>
            <returns>object that implements the specified service</returns>
            <exception cref="T:Griffin.Container.ServiceNotRegisteredException">Failed to find an implementation for the service</exception>
            <exception cref="T:Griffin.Container.DependencyMissingException">A dependency was missing when constructing the service implementation.</exception>
        </member>
        <member name="M:Griffin.Container.IContainerScope.Resolve(System.Type)">
            <summary>
                Resolve the last registered implementation of a service.
            </summary>
            <param name="service">Service that we want to get an implementation for.</param>
            <returns>object that implements the specified service</returns>
            <exception cref="T:Griffin.Container.ServiceNotRegisteredException">Failed to find an implementation for the service</exception>
            <exception cref="T:Griffin.Container.DependencyMissingException">A dependency was missing when constructing the service implementation.</exception>
            <exception cref="T:System.ArgumentNullException">service</exception>
        </member>
        <member name="M:Griffin.Container.IContainerScope.ResolveAll``1">
            <summary>
                Resolve all implementations of a service.
            </summary>
            <typeparam name="TService">Service that we want to get an implementation(s) for</typeparam>
            <returns>A list of implementations, or an empty list if no implementations are found.</returns>
            <exception cref="T:Griffin.Container.DependencyMissingException">A dependency was missing when constructing the service implementation.</exception>
        </member>
        <member name="M:Griffin.Container.IContainerScope.ResolveAll(System.Type)">
            <summary>
                Resolve all implementations of a service.
            </summary>
            <param name="service">Service that we want to get an implementation(s) for</param>
            <returns>A list of implementations, or an empty list if no implementations are found.</returns>
            <exception cref="T:Griffin.Container.DependencyMissingException">A dependency was missing when constructing the service implementation.</exception>
            <exception cref="T:System.ArgumentNullException">service</exception>
        </member>
        <member name="T:Griffin.Container.IScopedTaskInvoker">
            <summary>
                Run an IoC registered service that requires a scope.
            </summary>
            <remarks>
                <para>
                    When you run singleton services you might need to be able to invoke scoped tasks. This
                    contract abstracts away the creation/deletion of custom scopes, thus a hard dependency towards
                    the container.
                </para>
            </remarks>
        </member>
        <member name="M:Griffin.Container.IScopedTaskInvoker.Execute``1(System.Action{``0})">
            <summary>
                Run a task on a service
            </summary>
            <typeparam name="TService">Scoped Service to run a task on</typeparam>
            <param name="task">Task to execute</param>
            <example>
                <code>
            <![CDATA[
            _invoker.Execute<IUserRepository>(repos => repos.Save(model.User));
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Griffin.Container.IScopedTaskInvoker.Execute``1(System.Action{``0},System.Action{Griffin.Container.IContainerScope})">
            <summary>
                Run a task on a service
            </summary>
            <typeparam name="TService">Scoped Service to run a task on</typeparam>
            <param name="task">Task to execute</param>
            <param name="scope">Scope that was create it. Use it to commit an Unit Of Work etc.</param>
            <example>
                <code>
            <![CDATA[
            _invoker.Execute<IUserRepository>(
                repos => repos.Save(model.User),
                scope => scope.Resolve<IUnitOfWork>().SaveChanges()
            );
            ]]>
            </code>
            </example>
        </member>
        <member name="T:Griffin.Container.NamespaceDoc">
            <summary>
            Interfaces defining what an inversion of control container should expose.
            </summary>
        </member>
        <member name="T:Griffin.Container.ScopedTaskEventArgs">
            <summary>
                Event args for <see cref="E:Griffin.Container.ScopedTaskInvoker.TaskExecuted" />.
            </summary>
        </member>
        <member name="M:Griffin.Container.ScopedTaskEventArgs.#ctor(System.Object,Griffin.Container.IContainerScope)">
            <summary>
                Initializes a new instance of the <see cref="T:Griffin.Container.ScopedTaskEventArgs" /> class.
            </summary>
            <param name="taskService">The task service.</param>
            <param name="scope">The scope.</param>
            <exception cref="T:System.ArgumentNullException">
                taskService
                or
                scope
            </exception>
        </member>
        <member name="P:Griffin.Container.ScopedTaskEventArgs.TaskService">
            <summary>
                Service that the task was executed in.
            </summary>
        </member>
        <member name="P:Griffin.Container.ScopedTaskEventArgs.Scope">
            <summary>
                Scope used to service the service.
            </summary>
        </member>
        <member name="T:Griffin.Container.ScopedTaskInvoker">
            <summary>
                Default implementation of <see cref="T:Griffin.Container.IScopedTaskInvoker" />
            </summary>
        </member>
        <member name="M:Griffin.Container.ScopedTaskInvoker.#ctor(Griffin.Container.IContainer)">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.Container.ScopedTaskInvoker"/> class.
            </summary>
            <param name="container">The container adapter. Use for instance the GriffinFramework.Autofac package or implement the interface yourself.</param>
            <exception cref="T:System.ArgumentNullException">container</exception>
        </member>
        <member name="M:Griffin.Container.ScopedTaskInvoker.Execute``1(System.Action{``0})">
            <summary>
                Run a task on a service
            </summary>
            <typeparam name="TService">Scoped Service to run a task on</typeparam>
            <param name="task">Task to execute</param>
            <example>
                <code>
            <![CDATA[
            _invoker.Execute<IUserRepository>(repos => repos.Save(model.User));
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Griffin.Container.ScopedTaskInvoker.Execute``1(System.Action{``0},System.Action{Griffin.Container.IContainerScope})">
            <summary>
                Run a task on a service
            </summary>
            <typeparam name="TService">Scoped Service to run a task on</typeparam>
            <param name="task">Task to execute</param>
            <param name="scopeTask">Scope that was created. Use it to commit an Unit Of Work etc.</param>
            <example>
                <code>
            <![CDATA[
            _invoker.Execute<IUserRepository>(
                repos => repos.Save(model.User),
                scope => scope.Resolve<IUnitOfWork>().SaveChanges()
            );
            ]]>
            </code>
            </example>
        </member>
        <member name="E:Griffin.Container.ScopedTaskInvoker.TaskExecuted">
            <summary>
                Called in each scope before closing it (upon successful completion).
            </summary>
        </member>
        <member name="T:Griffin.Container.ServiceNotRegisteredException">
            <summary>
                The requested service has not been registerd.
            </summary>
        </member>
        <member name="M:Griffin.Container.ServiceNotRegisteredException.#ctor(System.Type,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.Container.ServiceNotRegisteredException"/> class.
            </summary>
            <param name="serviceType">Service that was not registered in the container.</param>
            <param name="inner">The inner exception.</param>
        </member>
        <member name="M:Griffin.Container.ServiceNotRegisteredException.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.Container.ServiceNotRegisteredException"/> class.
            </summary>
            <param name="serviceType">Service that was not registered in the container.</param>
        </member>
        <member name="P:Griffin.Container.ServiceNotRegisteredException.ServiceType">
            <summary>
                Gets services that was requested
            </summary>
        </member>
        <member name="T:Griffin.Data.AdoNetUnitOfWork">
            <summary>
                An unit of work implementation which uses the interfaces that is defined in ADO.NET and should therefore work with
                most ADO.NET driver implementations.
            </summary>
            <example>
                <code>
            public IUnitOfWork Create()
            {
                var conString = ConfigurationManager.ConnectionStrings("MyDb").ConnectionString;
                var con = new SqlConnection(conString);
                con.Open();
                return new AdoNetUnitOfWork(con, true);
            }
            
            UnitOfWorkFactory.SetFactoryMethod(() => Create());
            </code>
            </example>
        </member>
        <member name="M:Griffin.Data.AdoNetUnitOfWork.#ctor(System.Data.IDbConnection)">
            <summary>
            </summary>
            <param name="connection">
                A connection may not be shared between multiple transactions, so make sure that the connection
                is unique for this uow
            </param>
        </member>
        <member name="M:Griffin.Data.AdoNetUnitOfWork.#ctor(System.Data.IDbConnection,System.Boolean)">
            <summary>
            </summary>
            <param name="connection">
                A connection may not be shared between multiple transactions, so make sure that the connection
                is unique for this uow
            </param>
            <param name="ownsConnection">This unit of work owns the connection and will close it when being disposed.</param>
        </member>
        <member name="M:Griffin.Data.AdoNetUnitOfWork.#ctor(System.Data.IDbConnection,System.Boolean,System.Data.IsolationLevel)">
            <summary>
            </summary>
            <param name="connection">
                A connection may not be shared between multiple transactions, so make sure that the connection
                is unique for this uow
            </param>
            <param name="ownsConnection">This unit of work owns the connection and will close it when being disposed.</param>
            <param name="isolationLevel">Isolation level that the transaction should use.</param>
        </member>
        <member name="M:Griffin.Data.AdoNetUnitOfWork.Dispose">
            <summary>
                Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Griffin.Data.AdoNetUnitOfWork.SaveChanges">
            <summary>
                Commit changes.
            </summary>
            <exception cref="T:Griffin.Data.TransactionAlreadyClosedException">Transaction have already been commited or disposed.</exception>
        </member>
        <member name="M:Griffin.Data.AdoNetUnitOfWork.CreateCommand">
            <summary>
                Create a new command
            </summary>
            <returns>Created command (never <c>null</c>)</returns>
            <remarks>
                <para>The created command have been enlisted in the local transaction which is wrapped by this Unit Of Work.</para>
            </remarks>
            <exception cref="T:System.Data.DataException">Failed to create the command</exception>
        </member>
        <member name="M:Griffin.Data.AdoNetUnitOfWork.Execute(System.String,System.Object)">
            <summary>
            Execute a SQL query within the transaction
            </summary>
            <param name="sql"></param>
            <param name="parameters"></param>
        </member>
        <member name="M:Griffin.Data.AdoNetUnitOfWork.Execute(System.String)">
            <summary>
            Execute a SQL query within the transaction
            </summary>
            <param name="sql"></param>
        </member>
        <member name="T:Griffin.Data.CommandExtensions">
            <summary>
            Extensions for IDbCommand
            </summary>
        </member>
        <member name="M:Griffin.Data.CommandExtensions.AddParameter(System.Data.IDbCommand,System.String,System.Object)">
            <summary>
                Add a parameter to a command
            </summary>
            <param name="command">Command to add parameter to</param>
            <param name="name">Name of the parameter</param>
            <param name="value">Value (will be changed to <c>DBNull.Value</c> automatically if it's <c>null</c>).</param>
            <returns>Created parameter</returns>
            <example>
                <code>
            using (var command = connection.CreateCommand())
            {
                cmd.CommandText = "SELECT avg(Age) FROM Users WHERE LastName Like @name";
                cmd.AddParameter("name", "F%");
                return (int)cmd.ExecuteScalar();
            }
            </code>
            </example>
        </member>
        <member name="M:Griffin.Data.CommandExtensions.CreateDataException(System.Data.IDbCommand,System.Exception)">
            <summary>
            Creates a <c>DataException</c> using the command text and sql parameters.
            </summary>
            <param name="cmd">Command to build an exception from.</param>
            <param name="inner">Inner exception.</param>
            <returns>Created exception</returns>
        </member>
        <member name="T:Griffin.Data.DateExtensionMethods">
            <summary>
            Support for SQL Server DateTime.MinValue (i.e. 1753-01-01)
            </summary>
        </member>
        <member name="F:Griffin.Data.DateExtensionMethods.SqlServerDate">
            <summary>
            SQL Server mindate (for datetime fields)
            </summary>
        </member>
        <member name="M:Griffin.Data.DateExtensionMethods.FromSqlServer(System.DateTime)">
            <summary>
            Converts from SqlServer min date to <c>DateTime.MinValue</c> if required.
            </summary>
            <param name="dateTime">Date/Time in sqlServer</param>
            <returns>Proper .NET date</returns>
        </member>
        <member name="M:Griffin.Data.DateExtensionMethods.ToSqlServer(System.DateTime)">
            <summary>
            Converts from SqlServer min date to <c>DateTime.MinValue</c> if required.
            </summary>
            <param name="dateTime">Date/Time in sqlServer</param>
            <returns>Proper .NET date</returns>
        </member>
        <member name="T:Griffin.Data.EntityNotFoundException">
            <summary>
                Thrown when a method which expects to find an entity doesn't.
            </summary>
            <remarks>
            <para>this error message will always include information to be able to identify the missing entity.</para>
            </remarks>
        </member>
        <member name="M:Griffin.Data.EntityNotFoundException.#ctor(System.String,System.Data.IDbCommand)">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.Data.EntityNotFoundException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="command">The command that was executed to find an entity.</param>
            <exception cref="T:System.ArgumentNullException">command</exception>
        </member>
        <member name="M:Griffin.Data.EntityNotFoundException.#ctor(System.String,System.Data.IDbCommand,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.Data.EntityNotFoundException"/> class.
            </summary>
            <param name="description">The description.</param>
            <param name="command">The command.</param>
            <param name="inner">The inner.</param>
            <exception cref="T:System.ArgumentNullException">
            description
            or
            inner
            </exception>
        </member>
        <member name="P:Griffin.Data.EntityNotFoundException.Message">
            <summary>
                Gets a message that describes the current exception.
            </summary>
            <returns>
                The error message that explains the reason for the exception, or an empty string("").
            </returns>
        </member>
        <member name="P:Griffin.Data.EntityNotFoundException.CommandText">
            <summary>
            Gets command that was executed
            </summary>
        </member>
        <member name="P:Griffin.Data.EntityNotFoundException.CommandParameters">
            <summary>
            The command parameter collection joined as a string
            </summary>
        </member>
        <member name="T:Griffin.Data.IAdoNetUnitOfWork">
            <summary>
                ADO.NET features for a Unit Of Work
            </summary>
        </member>
        <member name="M:Griffin.Data.IAdoNetUnitOfWork.CreateCommand">
            <summary>
                Create a new command
            </summary>
            <returns>Created command (never <c>null</c>)</returns>
            <remarks>
                <para>The created command have been enlisted in the local transaction which is wrapped by this Unit Of Work.</para>
            </remarks>
            <exception cref="T:System.Data.Common.DbException">Failed to create the command</exception>
        </member>
        <member name="M:Griffin.Data.IAdoNetUnitOfWork.Execute(System.String,System.Object)">
            <summary>
            Execute a SQL query within the transaction
            </summary>
            <param name="sql"></param>
            <param name="parameters"></param>
        </member>
        <member name="T:Griffin.Data.IPagedResult`1">
            <summary>
            The result is not complete, just a page.
            </summary>
            <typeparam name="T">Item type</typeparam>
        </member>
        <member name="P:Griffin.Data.IPagedResult`1.Items">
            <summary>
            Gets all matching items
            </summary>
        </member>
        <member name="P:Griffin.Data.IPagedResult`1.TotalCount">
            <summary>
            Gets total number of items (useful when paging is used, otherwise 0)
            </summary>
        </member>
        <member name="T:Griffin.Data.IUnitOfWork">
            <summary>
            Unit of work contract
            </summary>
            <remarks>
            <para>
            Disposing without <c>SaveChanges()</c> being called means that the transaction should be aborted.
            </para>
            </remarks>
            <example>
            <code>
            using (var uow = UnitOfWorkFactory.Create())
            {
                var repos = new UserRepository(uow);
                repos.Create(user);
            
                uow.SaveChanges();
            }
            </code>
            </example>
        </member>
        <member name="M:Griffin.Data.IUnitOfWork.SaveChanges">
            <summary>
            Commit changes.
            </summary>
            <exception cref="T:Griffin.Data.TransactionAlreadyClosedException">UoW have already been saved.</exception>
        </member>
        <member name="T:Griffin.Data.Mapper.AdoNetEntityEnumerable`1">
            <summary>
            Wrapper around the <see cref="T:Griffin.Data.Mapper.AdoNetEntityEnumerator`1"/> which does the actual work.
            </summary>
            <typeparam name="TEntity">Type of entity to convert the rows to</typeparam>
        </member>
        <member name="M:Griffin.Data.Mapper.AdoNetEntityEnumerable`1.#ctor(System.Data.IDbCommand,System.Data.IDataReader,Griffin.Data.Mapper.IEntityMapper,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.Data.Mapper.AdoNetEntityEnumerable`1"/> class.
            </summary>
            <param name="command">The command.</param>
            <param name="reader">The reader.</param>
            <param name="mapper">The mapper.</param>
            <param name="ownsConnection">if set to <c>true</c> [owns connection].</param>
            <exception cref="T:System.ArgumentNullException">
            command
            or
            reader
            or
            mapper
            </exception>
        </member>
        <member name="M:Griffin.Data.Mapper.AdoNetEntityEnumerable`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">May only traverse AdoNetEntityEnumerable once</exception>
        </member>
        <member name="M:Griffin.Data.Mapper.AdoNetEntityEnumerable`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="T:Griffin.Data.Mapper.AdoNetEntityEnumerator`1">
            <summary>
                Traverses a recordset returned from a <c>IDbCommand</c> and converts each row to an entity.
            </summary>
            <typeparam name="TEntity">Type of entity to convert to.</typeparam>
            <remarks>
                <para>
                    Will not do any conversions until the <see cref="P:Griffin.Data.Mapper.AdoNetEntityEnumerator`1.Current" /> property is being called. Hence you can call the
                    <see cref="M:Griffin.Data.Mapper.AdoNetEntityEnumerator`1.MoveNext" />
                    method any amount of times that you need without the mapping being used.
                </para>
                <para></para>
            </remarks>
        </member>
        <member name="M:Griffin.Data.Mapper.AdoNetEntityEnumerator`1.#ctor(System.Data.IDbCommand,System.Data.IDataReader,Griffin.Data.Mapper.IEntityMapper,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.Data.Mapper.AdoNetEntityEnumerator`1"/> class.
            </summary>
            <param name="command">The command.</param>
            <param name="reader">The reader.</param>
            <param name="mapper">The mapper.</param>
            <param name="ownsConnection">if set to <c>true</c> [owns connection].</param>
            <exception cref="T:System.ArgumentNullException">
            command
            or
            reader
            or
            mapper
            </exception>
        </member>
        <member name="M:Griffin.Data.Mapper.AdoNetEntityEnumerator`1.Dispose">
            <summary>
                Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Griffin.Data.Mapper.AdoNetEntityEnumerator`1.MoveNext">
            <summary>
                Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
                true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of
                the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
        </member>
        <member name="M:Griffin.Data.Mapper.AdoNetEntityEnumerator`1.Reset">
            <summary>
                Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
        </member>
        <member name="P:Griffin.Data.Mapper.AdoNetEntityEnumerator`1.Current">
            <summary>
                Gets the element in the collection at the current position of the enumerator.
            </summary>
            <returns>
                The element in the collection at the current position of the enumerator.
            </returns>
        </member>
        <member name="P:Griffin.Data.Mapper.AdoNetEntityEnumerator`1.System#Collections#IEnumerator#Current">
            <summary>
                Gets the current element in the collection.
            </summary>
            <returns>
                The current element in the collection.
            </returns>
        </member>
        <member name="T:Griffin.Data.Mapper.AssemblyScanningMappingProvider">
            <summary>
                Scans all assemblies in the current <c>AppDomain</c> after types that implement <see cref="T:Griffin.Data.Mapper.ICrudEntityMapper" />.
            </summary>
            <remarks>
                <para>
                    All mappers are added as created instances to an internal cache for fast access during mapping operations.
                    Hence it's important
                    that they are thread safe and considered as singletons when this class is used.
                </para>
                <para>
                </para>
            </remarks>
        </member>
        <member name="P:Griffin.Data.Mapper.AssemblyScanningMappingProvider.IgnoreInvalidMappers">
            <summary>
                Ignore mapper classes which are invalid when locating all mappings in the loaded assemblies.
            </summary>
            <remarks>
                <para>The <c>Scan()</c> method </para>
            </remarks>
        </member>
        <member name="P:Griffin.Data.Mapper.AssemblyScanningMappingProvider.ReplaceDuplicateMappers">
            <summary>
                If <c>true</c>, we'll replace the first mapper if we encounter a second mapper for the same entity.
            </summary>
            <remarks>
                <para>
                    <c>false</c> means that an exception will be thrown
                </para>
            </remarks>
        </member>
        <member name="P:Griffin.Data.Mapper.AssemblyScanningMappingProvider.HasScanned">
            <summary>
                Scan has been called.
            </summary>
            <remarks>
                <para>
                    Used by the library to check if the library should trigger a scan.
                </para>
            </remarks>
        </member>
        <member name="M:Griffin.Data.Mapper.AssemblyScanningMappingProvider.Get``1">
            <summary>
                Retrieve a mapper.
            </summary>
            <typeparam name="TEntity">Type of entity to retrieve a mapper for.</typeparam>
            <returns>Mapper</returns>
            <exception cref="T:Griffin.Data.Mapper.MappingNotFoundException">Failed to find a mapping for the given entity type.</exception>
            <remarks>
                <para>
                    Do note that the mapper must implement <see cref="T:Griffin.Data.Mapper.ICrudEntityMapper`1" /> interface for this method to work.
                </para>
            </remarks>
        </member>
        <member name="M:Griffin.Data.Mapper.AssemblyScanningMappingProvider.GetBase``1">
            <summary>
                Get mapping for the specified entity type
            </summary>
            <typeparam name="TEntity">Type of entity</typeparam>
            <returns>Mapper</returns>
            <exception cref="T:System.NotSupportedException">The specified entity type is not supported.</exception>
        </member>
        <member name="M:Griffin.Data.Mapper.AssemblyScanningMappingProvider.Get(System.Type)">
            <summary>
                Retrieve a mapper.
            </summary>
            <param name="entityType">Type of entity to get a mapper for</param>
            <returns>Mapper</returns>
            <exception cref="T:Griffin.Data.Mapper.MappingNotFoundException">Failed to find a mapping for the given entity type.</exception>
        </member>
        <member name="M:Griffin.Data.Mapper.AssemblyScanningMappingProvider.Scan">
            <summary>
                Scan all loaded assemblies in the current domain.
            </summary>
        </member>
        <member name="M:Griffin.Data.Mapper.AssemblyScanningMappingProvider.Scan(System.Reflection.Assembly)">
            <summary>
                Scan all loaded assemblies in the current domain.
            </summary>
            <param name="assembly">Assembly to scan for types that implement <see cref="T:Griffin.Data.Mapper.ICrudEntityMapper" />.,</param>
        </member>
        <member name="T:Griffin.Data.Mapper.AsyncCommandExtensions">
            <summary>
                Asynchronous extensions for <see cref="T:System.Data.Common.DbCommand" />.
            </summary>
            <remarks>
                <para>
                    All methods which do not take a mapper class uses the <see cref="T:Griffin.Data.Mapper.EntityMappingProvider" /> to identify the
                    mapper to use when converting to/from rows in the database. SQL commands
                    for CRUD operations are provided by a <see cref="T:Griffin.Data.Mapper.CommandBuilders.ICommandBuilder" /> implementation (specific for each database
                    engine).
                </para>
                <para>
                    CRUD operations are typically performed on the <see cref="T:Griffin.Data.IAdoNetUnitOfWork" /> or <see cref="T:System.Data.IDbConnection" />
                    instead as you do not have to create your own command then.
                </para>
            </remarks>
        </member>
        <member name="M:Griffin.Data.Mapper.AsyncCommandExtensions.FirstAsync``1(System.Data.IDbCommand)">
            <summary>
                Fetches the first found entity asynchronously
            </summary>
            <param name="cmd">Command to invoke <c>ExecuteReaderAsync()</c> on.</param>
            <returns>
                entity
            </returns>
            <exception cref="T:Griffin.Data.EntityNotFoundException">Failed to find specified entity.</exception>
            <remarks>
                <para>Use this method when an entity is expected to be returned.</para>
                <para>
                    Uses <see cref="T:Griffin.Data.Mapper.EntityMappingProvider" /> to find the correct <c><![CDATA[IEntityMapper<TEntity>]]></c>
                </para>
            </remarks>
            <example>
                <code>
            <![CDATA[
            public async Task<User> GetUser(int userId)
            {
                using (var command = connection.CreateCommand())
                {
                    cmd.CommandText = "SELECT * FROM Users WHERE Id = @id";
                    cmd.AddParameter("id", userId);
                    return await cmd.FirstAsync<User>();
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Griffin.Data.Mapper.AsyncCommandExtensions.FirstAsync``1(System.Data.IDbCommand,Griffin.Data.Mapper.IEntityMapper{``0})">
            <summary>
                Fetches the first found entity asynchronously
            </summary>
            <param name="cmd">Command to invoke <c>ExecuteReaderAsync()</c> on.</param>
            <param name="mapper"></param>
            <returns>
                entity
            </returns>
            <exception cref="T:Griffin.Data.EntityNotFoundException">Failed to find entity</exception>
            <remarks>
                <para>Use this method when an entity is expected to be returned.</para>
            </remarks>
            <example>
                <code>
            <![CDATA[
            public async Task<User> GetUser(int userId)
            {
                using (var command = connection.CreateCommand())
                {
                    cmd.CommandText = "SELECT * FROM Users WHERE Id = @id";
                    cmd.AddParameter("id", userId);
                    return await cmd.FirstAsync<User>(new MyCustomMapper());
                }
            }
            ]]>
            </code>
            </example>
            <seealso cref="T:Griffin.Data.Mapper.CrudEntityMapper`1" />
        </member>
        <member name="M:Griffin.Data.Mapper.AsyncCommandExtensions.FirstOrDefaultAsync``1(System.Data.IDbCommand)">
            <summary>
                Fetches the first row if found.
            </summary>
            <param name="cmd">Command to invoke <c>ExecuteReaderAsync()</c> on.</param>
            <returns>
                Entity if found; otherwise <c>null</c>.
            </returns>
            <remarks>
                <para>Use this method when an entity is expected to be returned.</para>
                <para>Uses <see cref="T:Griffin.Data.Mapper.EntityMappingProvider" /> to find the correct <c><![CDATA[IEntityMapper<TEntity>]]></c>.</para>
            </remarks>
            <example>
                <code>
            <![CDATA[
            public async Task<User> GetUser(int userId)
            {
                using (var command = connection.CreateCommand())
                {
                    cmd.CommandText = "SELECT * FROM Users WHERE Id = @id";
                    cmd.AddParameter("id", userId);
                    return await cmd.FirstOrDefaultAsync<User>();
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Griffin.Data.Mapper.AsyncCommandExtensions.FirstOrDefaultAsync``1(System.Data.IDbCommand,Griffin.Data.Mapper.IEntityMapper{``0})">
            <summary>
                Fetches the first row if found.
            </summary>
            <param name="cmd">Command to invoke <c>ExecuteReaderAsync()</c> on.</param>
            <param name="mapper">Mapper used to convert rows to entities</param>
            <returns>
                Entity if found; otherwise <c>null</c>.
            </returns>
            <remarks>
                <para>Use this method when an entity is expected to be returned.</para>
            </remarks>
            <example>
                <code>
            <![CDATA[
            public async Task<User> GetUser(int userId)
            {
                using (var command = connection.CreateCommand())
                {
                    cmd.CommandText = "SELECT * FROM Users WHERE Id = @id";
                    cmd.AddParameter("id", userId);
                    return await cmd.FirstOrDefaultAsync<User>(new MyCustomMapping());
                }
            }
            ]]>
            </code>
            </example>
            <seealso cref="T:Griffin.Data.Mapper.CrudEntityMapper`1" />
        </member>
        <member name="M:Griffin.Data.Mapper.AsyncCommandExtensions.ToEnumerableAsync``1(System.Data.IDbCommand)">
            <summary>
                Return an enumerable which uses lazy loading of each row.
            </summary>
            <typeparam name="TEntity">Type of entity to map</typeparam>
            <param name="cmd">Command to invoke <c>ExecuteReaderAsync()</c> on.</param>
            <returns>Lazy loaded enumerator</returns>
            <remarks>
                <para>
                    The command is executed asynchronously.
                </para>
                <para>
                    The returned enumerator will not map each row until it's requested. To be able to do that the
                    command/datareader is
                    kept open until the enumerator is disposed. Hence it's important that you make sure that the enumerator is
                    disposed when you are
                    done with it.
                </para>
                <para>
                    As the returned item is a custom lazy loaded enumerable it's quite fast as nothing is mapped if you do like:
                </para>
                <example>
                    <code>
            <![CDATA[
            using (var cmd = connection.CreateCommand())
            {
                cmd.CommandText = "SELECT * FROM Users";
                var users = await cmd.ToEnumerable<User>();
                return users.Skip(1000).Take(50).ToList();
            }
            ]]>
            </code>
                </example>
                <para>
                    Do note that it will still read all rows and is therefore slower than paging in the SQL server. It will however
                    use a lot less
                    allocations than building a complete list first.
                </para>
                <para>
                    If the result returned from the query is all records that you want it's probably more efficient to use
                    <see cref="M:Griffin.Data.Mapper.AsyncCommandExtensions.ToListAsync``1(System.Data.IDbCommand)" />.
                </para>
                <para>Uses <see cref="T:Griffin.Data.Mapper.EntityMappingProvider" /> to find the correct <c><![CDATA[IEntityMapper<TEntity>]]></c>.</para>
            </remarks>
        </member>
        <member name="M:Griffin.Data.Mapper.AsyncCommandExtensions.ToEnumerableAsync``1(System.Data.IDbCommand,System.Boolean)">
            <summary>
                Return an enumerable which uses lazy loading of each row.
            </summary>
            <typeparam name="TEntity">Type of entity to map</typeparam>
            <param name="cmd">Command to invoke <c>ExecuteReaderAsync()</c> on.</param>
            <param name="ownsConnection">
                <c>true</c> if the connection should be disposed together with the command/datareader. See
                remarks.
            </param>
            <returns>Lazy loaded enumerator</returns>
            <remarks>
                <para>
                    The command is executed asynchronously.
                </para>
                <para>
                    The returned enumerator will not map each row until it's requested. To be able to do that the
                    connection/command/datareader is
                    kept open until the enumerator is disposed. Hence it's important that you make sure that the enumerator is
                    disposed when you are
                    done with it.
                </para>
                <para>Uses <see cref="T:Griffin.Data.Mapper.EntityMappingProvider" /> to find the correct <c><![CDATA[IEntityMapper<TEntity>]]></c>.</para>
            </remarks>
        </member>
        <member name="M:Griffin.Data.Mapper.AsyncCommandExtensions.ToEnumerableAsync``1(System.Data.IDbCommand,System.Boolean,Griffin.Data.Mapper.IEntityMapper{``0})">
            <summary>
                Return an enumerable which uses lazy loading of each row.
            </summary>
            <typeparam name="TEntity">Type of entity to map</typeparam>
            <param name="cmd">Command to invoke <c>ExecuteReaderAsync()</c> on.</param>
            <param name="ownsConnection">
                <c>true</c> if the connection should be disposed together with the command/datareader. See
                remarks.
            </param>
            <param name="mapper">Mapper used to convert rows to entities</param>
            <returns>Lazy loaded enumerator</returns>
            <remarks>
                <para>
                    The command is executed asynchronously.
                </para>
                <para>
                    The returned enumerator will not map each row until it's requested. To be able to do that the
                    connection/command/datareader is
                    kept open until the enumerator is disposed. Hence it's important that you make sure that the enumerator is
                    disposed when you are
                    done with it.
                </para>
                <para>
                    Requires that a <c><![CDATA[IEntityMapper<TEntity>]]></c> is registered in the
                    <see cref="T:Griffin.Data.Mapper.EntityMappingProvider" />.
                </para>
            </remarks>
        </member>
        <member name="M:Griffin.Data.Mapper.AsyncCommandExtensions.ToListAsync``1(System.Data.IDbCommand)">
            <summary>
                Generate a complete list before returning.
            </summary>
            <typeparam name="TEntity">Type of entity to map</typeparam>
            <param name="cmd">Command to invoke <c>ExecuteReaderAsync()</c> on.</param>
            <returns>A list which is generated asynchronously.</returns>
            <remarks>
                <para>
                    Uses the <see cref="T:Griffin.Data.Mapper.EntityMappingProvider" /> to find the correct base mapper.
                </para>
                <para>
                    Make sure that you <c>await</c> the method, as nothing the reader is not disposed directly if you don't.
                </para>
            </remarks>
        </member>
        <member name="M:Griffin.Data.Mapper.AsyncCommandExtensions.ToListAsync``1(System.Data.IDbCommand,Griffin.Data.Mapper.IEntityMapper{``0})">
            <summary>
                Generate a complete list before returning.
            </summary>
            <typeparam name="TEntity">Type of entity to map</typeparam>
            <param name="cmd">Command to invoke <c>ExecuteReaderAsync()</c> on.</param>
            <param name="mapper">Mapper to use when converting rows to entities</param>
            <returns>A list which is generated asynchronously.</returns>
            <remarks>
                <para>
                    Make sure that you <c>await</c> the method, as nothing the reader is not disposed directly if you don't.
                </para>
            </remarks>
        </member>
        <member name="T:Griffin.Data.Mapper.AsyncConnectionExtensions">
            <summary>
                Asynchronous extensions for database connections
            </summary>
        </member>
        <member name="M:Griffin.Data.Mapper.AsyncConnectionExtensions.DeleteAsync``1(System.Data.IDbConnection,``0)">
            <summary>
                Delete an entity
            </summary>
            <typeparam name="TEntity">
                Type of entity to load, must have an mapper registered in
                <see cref="T:Griffin.Data.Mapper.EntityMappingProvider" />.
            </typeparam>
            <param name="connection">DB connection.</param>
            <param name="entity">Entity to remove.</param>
            <returns>Task to wait on for completion.</returns>
            <remarks>
                <para>
                    Uses <see cref="T:Griffin.Data.Mapper.EntityMappingProvider" /> to find the correct <c><![CDATA[ICrudEntityMapper<TEntity>]]></c>
                </para>
            </remarks>
        </member>
        <member name="M:Griffin.Data.Mapper.AsyncConnectionExtensions.DeleteAsync``1(System.Data.IDbConnection,System.Object)">
            <summary>
                DELETE a row from the table.
            </summary>
            <typeparam name="TEntity">
                Type of entity to load, must have an mapper registered in
                <see cref="T:Griffin.Data.Mapper.EntityMappingProvider" />.
            </typeparam>
            <param name="connection">DB connection.</param>
            <param name="constraints">
                dynamic specifying the properties to use. All parameters are joined with "AND" in the
                resulting SQL query. Any parameter with '%' in the value will be using LIKE instead of '='
            </param>
            <returns>Task to wait on for completion.</returns>
            <remarks>
                <para>
                    Uses <see cref="T:Griffin.Data.Mapper.EntityMappingProvider" /> to find the correct <c><![CDATA[ICrudEntityMapper<TEntity>]]></c>
                </para>
            </remarks>
            <example>
                <code>
            <![CDATA[
            public async Task DeleteUser(int userId)
            {
                await connection.DeleteAsync(new { Id = userId });
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Griffin.Data.Mapper.AsyncConnectionExtensions.ExecuteNonQueryAsync(System.Data.IDbConnection,System.String,System.Object)">
            <summary>
                Execute a query directly
            </summary>
            <param name="connection">Connection to execute query on</param>
            <param name="sql">SQL query</param>
            <param name="parameters">parameters used in the query</param>
            <returns>Task to wait on for completion</returns>
            <remarks>
                <para>Do note that the query must be using table column names and not class properties. No mapping is being made.</para>
                <para><c>null</c> is automatically replaced by <c>DBNull.Value</c> for the parameters</para>
            </remarks>
            <example>
                <code>
            public async Task Execute(IDbConnection connection)
            {
                connection.ExecuteNonQueryAsync("UPDATE Users SET Discount = Discount + 10 WHERE OrganizationId = @orgId", new { orgId = 10});
            </code>
            </example>
        </member>
        <member name="M:Griffin.Data.Mapper.AsyncConnectionExtensions.FirstAsync``1(System.Data.IDbConnection,System.Object)">
            <summary>
                Get an entity.
            </summary>
            <typeparam name="TEntity">
                Type of entity to load, must have an mapper registered in
                <see cref="T:Griffin.Data.Mapper.EntityMappingProvider" />.
            </typeparam>
            <param name="connection">connection to load entity from</param>
            <param name="constraints">
                dynamic specifying the properties to use. All parameters are joined with "AND" in the
                resulting SQL query. Any parameter with '%' in the value will be using LIKE instead of '='
            </param>
            <returns>Found entity</returns>
            <remarks>
                <para>
                    Uses <see cref="T:Griffin.Data.Mapper.EntityMappingProvider" /> to find the correct <c><![CDATA[ICrudEntityMapper<TEntity>]]></c>
                </para>
            </remarks>
            <example>
                <code>
            <![CDATA[
            public async Task<User> GetUser(int userId)
            {
                return await _connection.FirstAsync<User>(new { Id = userId });
            }
            ]]>
            </code>
                <para>
                    You can also use % for LIKE searches:
                </para>
                <code>
            <![CDATA[
            return await _connection.FirstAsync<User>(new { FirstName = 'Jon%', LastName = 'Gau%' });
            ]]>
            </code>
                <para>
                    Which will translate into "WHERE FirstName LIKE 'Jon%' AND LastName LIKE 'Gau%'"
                </para>
            </example>
            <exception cref="T:Griffin.Data.EntityNotFoundException">Failed to find an entity matching the query</exception>
        </member>
        <member name="M:Griffin.Data.Mapper.AsyncConnectionExtensions.FirstAsync``1(System.Data.IDbConnection,System.String,System.Object[])">
            <summary>
                Get an entity.
            </summary>
            <typeparam name="TEntity">
                Type of entity to load, must have an mapper registered in
                <see cref="T:Griffin.Data.Mapper.EntityMappingProvider" />.
            </typeparam>
            <param name="connection">connection to load entity from</param>
            <param name="query">Query or short query (<c><![CDATA["projectId = @id AND dateCreated < @minDate"]]></c>)</param>
            <param name="parameters">
                Anonymous object (<c>new { id = dto.ProjectId, @minDate = dto.MinDate }</c>), a dictionary or
                a value array
            </param>
            <returns>Found entity</returns>
            <remarks>
                <para>
                    Uses <see cref="T:Griffin.Data.Mapper.EntityMappingProvider" /> to find the correct <c><![CDATA[ICrudEntityMapper<TEntity>]]></c>
                </para>
            </remarks>
            <example>
                <code>
            <![CDATA[
            public async Task<User> GetUser(int userId)
            {
                return await _connection.FirstAsync<User>("WHERE id = @id", new { id = UserId });
            }
            ]]>
            </code>
                <para>
                    Which will translate into:
                </para>
                <code>
            command.CommandText = "SELECT * FROM Users WHERE id = @id";
            var p = command.CreateParameter();
            p.Name = "id";
            p.Value = userId;
            command.Parameters.Add(p);
            </code>
            </example>
            <exception cref="T:Griffin.Data.EntityNotFoundException">Failed to find an entity matching the query</exception>
        </member>
        <member name="M:Griffin.Data.Mapper.AsyncConnectionExtensions.FirstOrDefaultAsync``1(System.Data.IDbConnection,System.Object)">
            <summary>
                Fetches the first row if found.
            </summary>
            <typeparam name="TEntity">
                Type of entity to load, must have an mapper registered in
                <see cref="T:Griffin.Data.Mapper.EntityMappingProvider" />.
            </typeparam>
            <param name="connection">Connection to invoke <c>ExecuteReaderAsync()</c> on (through a created <c>DbCommand</c>).</param>
            <param name="constraints">
                dynamic specifying the properties to use. All parameters are joined with "AND" in the
                resulting SQL query. Any parameter with '%' in the value will be using LIKE instead of '='
            </param>
            <returns>
                Entity if found; otherwise <c>null</c>.
            </returns>
            <remarks>
                <para>Use this method when an entity is expected to be returned.</para>
                <para>
                    Uses <see cref="T:Griffin.Data.Mapper.EntityMappingProvider" /> to find the correct <c><![CDATA[ICrudEntityMapper<TEntity>]]></c>
                </para>
            </remarks>
            <example>
                <code>
            <![CDATA[
            public async Task<User> GetUser(int userId)
            {
                return await _connection.FirstOrDefaultAsync<User>(new { Id = userId });
            }
            ]]>
            </code>
                <para>
                    You can also use % for LIKE searches:
                </para>
                <code>
            <![CDATA[
            return await _connection.FirstOrDefaultAsync<User>(new { FirstName = 'Jon%', LastName = 'Gau%' });
            ]]>
            </code>
                <para>
                    Which will translate into "WHERE FirstName LIKE 'Jon%' AND LastName LIKE 'Gau%'"
                </para>
            </example>
        </member>
        <member name="M:Griffin.Data.Mapper.AsyncConnectionExtensions.FirstOrDefaultAsync``1(System.Data.IDbConnection,System.String,System.Object[])">
            <summary>
                Fetches the first row if found.
            </summary>
            <typeparam name="TEntity">
                Type of entity to load, must have an mapper registered in
                <see cref="T:Griffin.Data.Mapper.EntityMappingProvider" />.
            </typeparam>
            <param name="connection">Connection to invoke <c>ExecuteReaderAsync()</c> on (through a created <c>DbCommand</c>).</param>
            <param name="query">Query or short query (<c><![CDATA["projectId = @id AND dateCreated < @minDate"]]></c>)</param>
            <param name="parameters">
                Anonymous object (<c>new { id = dto.ProjectId, @minDate = dto.MinDate }</c>), a dictionary or
                a value array
            </param>
            <returns>
                Entity if found; otherwise <c>null</c>.
            </returns>
            <remarks>
                <para>Use this method when an entity is expected to be returned.</para>
                <para>
                    Uses <see cref="T:Griffin.Data.Mapper.EntityMappingProvider" /> to find the correct <c><![CDATA[ICrudEntityMapper<TEntity>]]></c>
                </para>
            </remarks>
            <example>
                <code>
            <![CDATA[
            public async Task<User> GetUser(int userId)
            {
                return await _connection.FirstOrDefaultAsync<User>("WHERE age < @Age", new { Age = minAge });
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Griffin.Data.Mapper.AsyncConnectionExtensions.InsertAsync``1(System.Data.IDbConnection,``0)">
            <summary>
                Insert an entity into the database
            </summary>
            <typeparam name="TEntity">
                Type of entity to load, must have an mapper registered in
                <see cref="T:Griffin.Data.Mapper.EntityMappingProvider" />.
            </typeparam>
            <param name="connection">Connection to use</param>
            <param name="entity">Entity to insert.</param>
            <returns>Task to wait on for completion</returns>
            <remarks>
                <para>
                    Uses <see cref="T:Griffin.Data.Mapper.EntityMappingProvider" /> to find the correct <c><![CDATA[ICrudEntityMapper<TEntity>]]></c>
                </para>
            </remarks>
        </member>
        <member name="M:Griffin.Data.Mapper.AsyncConnectionExtensions.ToEnumerableAsync``1(System.Data.IDbConnection,System.String,System.Object[])">
            <summary>
                Return an enumerable which uses lazy loading of each row (you must close the connection once done).
            </summary>
            <typeparam name="TEntity">Type of entity to map</typeparam>
            <param name="connection">Connection to invoke <c>ExecuteReaderAsync()</c> on (through a created <c>DbCommand</c>).</param>
            <param name="query">Query or short query (<c><![CDATA["projectId = @id AND dateCreated < @minDate"]]></c>)</param>
            <param name="parameters">
                Anonymous object (<c>new { id = dto.ProjectId, @minDate = dto.MinDate }</c>), a dictionary or
                a value array
            </param>
            <returns>Lazy loaded enumerator</returns>
            <remarks>
                <para>
                    For more information about the "query" and "parameters" arguments, see
                    <see cref="M:Griffin.Data.Mapper.CommandExtensions.ApplyQuerySql``1(System.Data.IDbCommand,System.String,System.Object[])" />.
                </para>
                <para>
                    The returned enumerator will not map each row until it's requested. To be able to do that the
                    Connection/Command/DataReader is
                    kept open until the enumerator is disposed. Hence it's important that you make sure that the enumerator is
                    disposed when you are
                    done with it.
                </para>
                <para>Uses <see cref="T:Griffin.Data.Mapper.EntityMappingProvider" /> to find the correct <c><![CDATA[IEntityMapper<TEntity>]]></c>.</para>
            </remarks>
            <example>
                <code>
            // All these examples are valid:
            <![CDATA[
            var users = await connection.ToEnumerable<User>("Age < 10");
            var users = await connection.ToEnumerable<User>("SELECT * FROM Users WHERE Age = 37");
            var users = await connection.ToEnumerable<User>("FirstName = @name", new { name = user.FirstName });
            var users = await connection.ToEnumerable<User>("FirstName = @1 AND Age < @2", 'A%', 35);
            var users = await connection.ToEnumerable<User>("SELECT * FROM Users WHERE Age = @age LIMIT 1, 10", new { age = submittedAge });
            var users = await connection.ToEnumerable<User>("SELECT * FROM Users WHERE Age = @1 LIMIT 1, 10", user.FirstName);
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Griffin.Data.Mapper.AsyncConnectionExtensions.ToEnumerableAsync``1(System.Data.IDbConnection,System.Boolean,System.String,System.Object[])">
            <summary>
                Return an enumerable which uses lazy loading of each row.
            </summary>
            <typeparam name="TEntity">Type of entity to map</typeparam>
            <param name="connection">Connection to invoke <c>ExecuteReaderAsync()</c> on (through a created <c>DbCommand</c>).</param>
            <param name="ownsConnection">
                <c>true</c> if the connection should be disposed together with the command/datareader. See
                remarks.
            </param>
            <param name="query">Query or short query (<c>"id = @1"</c>)</param>
            <param name="parameters"></param>
            <returns>Lazy loaded enumerator</returns>
            <remarks>
                <para>
                    For more information about the "query" and "parameters" arguments, see
                    <see cref="M:Griffin.Data.Mapper.CommandExtensions.ApplyQuerySql``1(System.Data.IDbCommand,System.String,System.Object[])" />.
                </para>
                <para>
                    The returned enumerator will not map each row until it's requested. To be able to do that the
                    Connection/Command/DataReader is
                    kept open until the enumerator is disposed. Hence it's important that you make sure that the enumerator is
                    disposed when you are
                    done with it.
                </para>
                <para>Uses <see cref="T:Griffin.Data.Mapper.EntityMappingProvider" /> to find the correct <c><![CDATA[IEntityMapper<TEntity>]]></c>.</para>
            </remarks>
            <example>
                <code>
            // All these examples are valid:
            <![CDATA[
            var users = await connection.ToEnumerable<User>(true, "Age < 10");
            var users = await connection.ToEnumerable<User>(true, "SELECT * FROM Users WHERE Age = 37");
            var users = await connection.ToEnumerable<User>(true, "FirstName = @name", new { name = user.FirstName });
            var users = await connection.ToEnumerable<User>(true, "FirstName = @1 AND Age < @2", 'A%', 35);
            var users = await connection.ToEnumerable<User>(true, "SELECT * FROM Users WHERE Age = @age LIMIT 1, 10", new { age = submittedAge });
            var users = await connection.ToEnumerable<User>(true, "SELECT * FROM Users WHERE Age = @1 LIMIT 1, 10", user.FirstName);
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Griffin.Data.Mapper.AsyncConnectionExtensions.ToEnumerableAsync``1(System.Data.IDbConnection,System.Boolean,Griffin.Data.Mapper.ICrudEntityMapper{``0},System.String,System.Object[])">
            <summary>
                Return an enumerable which uses lazy loading of each row.
            </summary>
            <typeparam name="TEntity">Type of entity to map</typeparam>
            <param name="connection">Connection to invoke <c>ExecuteReaderAsync()</c> on (through a created <c>DbCommand</c>).</param>
            <param name="ownsConnection">
                <c>true</c> if the connection should be disposed together with the command/datareader. See
                remarks.
            </param>
            <param name="mapping">Mapping used when translating table rows to .NET classes.</param>
            <param name="query">Query or short query (<c><![CDATA["projectId = @id AND dateCreated < @minDate"]]></c>)</param>
            <param name="parameters">
                Anonymous object (<c>new { id = dto.ProjectId, @minDate = dto.MinDate }</c>), a dictionary or
                a value array
            </param>
            <returns>Lazy loaded enumerator</returns>
            <remarks>
                <para>
                    For more information about the "query" and "parameters" arguments, see
                    <see cref="M:Griffin.Data.Mapper.CommandExtensions.ApplyQuerySql``1(System.Data.IDbCommand,System.String,System.Object[])" />.
                </para>
                <para>
                    The returned enumerator will not map each row until it's requested. To be able to do that the
                    Connection/Command/DataReader is
                    kept open until the enumerator is disposed. Hence it's important that you make sure that the enumerator is
                    disposed when you are
                    done with it.
                </para>
                <para>Uses <see cref="T:Griffin.Data.Mapper.EntityMappingProvider" /> to find the correct <c><![CDATA[IEntityMapper<TEntity>]]></c>.</para>
            </remarks>
            <example>
                <code>
            // All these examples are valid:
            <![CDATA[
            var users = await connection.ToEnumerable<User>(true, new CustomUserMapping(), "Age < 10");
            var users = await connection.ToEnumerable<User>(true, new CustomUserMapping(), "SELECT * FROM Users WHERE Age = 37");
            var users = await connection.ToEnumerable<User>(true, new CustomUserMapping(), "FirstName = @name", new { name = user.FirstName });
            var users = await connection.ToEnumerable<User>(true, new CustomUserMapping(), "FirstName = @1 AND Age < @2", 'A%', 35);
            var users = await connection.ToEnumerable<User>(true, new CustomUserMapping(), "SELECT * FROM Users WHERE Age = @age LIMIT 1, 10", new { age = submittedAge });
            var users = await connection.ToEnumerable<User>(true, new CustomUserMapping(), "SELECT * FROM Users WHERE Age = @1 LIMIT 1, 10", user.FirstName);
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Griffin.Data.Mapper.AsyncConnectionExtensions.ToListAsync``1(System.Data.IDbConnection,System.String,System.Object[])">
            <summary>
                Generate a complete list before returning.
            </summary>
            <typeparam name="TEntity">Type of entity to map</typeparam>
            <param name="connection">Connection to invoke <c>ExecuteReaderAsync()</c> on (through a created <c>DbCommand</c>).</param>
            <param name="query">Query or short query (<c><![CDATA["projectId = @id AND dateCreated < @minDate"]]></c>)</param>
            <param name="parameters">
                Anonymous object (<c>new { id = dto.ProjectId, @minDate = dto.MinDate }</c>), a dictionary or
                a value array
            </param>
            <returns>A list which is generated asynchronously.</returns>
            <remarks>
                <para>
                    For more information about the "query" and "parameters" arguments, see
                    <see cref="M:Griffin.Data.Mapper.CommandExtensions.ApplyQuerySql``1(System.Data.IDbCommand,System.String,System.Object[])" />.
                </para>
                <para>
                    The returned enumerator will not map each row until it's requested. To be able to do that the
                    Connection/Command/DataReader is
                    kept open until the enumerator is disposed. Hence it's important that you make sure that the enumerator is
                    disposed when you are
                    done with it.
                </para>
                <para>Uses <see cref="T:Griffin.Data.Mapper.EntityMappingProvider" /> to find the correct <c><![CDATA[ICrudEntityMapper<TEntity>]]></c>.</para>
            </remarks>
            <example>
                <code>
            // All these examples are valid:
            <![CDATA[
            var users = await connection.ToListAsync<User>("Age < 10");
            var users = await connection.ToListAsync<User>("SELECT * FROM Users WHERE Age = 37");
            var users = await connection.ToListAsync<User>("FirstName = @name", new { name = user.FirstName });
            var users = await connection.ToListAsync<User>("FirstName = @1 AND Age < @2", 'A%', 35);
            var users = await connection.ToListAsync<User>("SELECT * FROM Users WHERE Age = @age LIMIT 1, 10", new { age = submittedAge });
            var users = await connection.ToListAsync<User>("SELECT * FROM Users WHERE Age = @1 LIMIT 1, 10", user.FirstName);
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Griffin.Data.Mapper.AsyncConnectionExtensions.ToListAsync``1(System.Data.IDbConnection,Griffin.Data.Mapper.ICrudEntityMapper{``0},System.String,System.Object[])">
            <summary>
                Generate a complete list before returning.
            </summary>
            <typeparam name="TEntity">Type of entity to map</typeparam>
            <param name="connection">Connection to invoke <c>ExecuteReaderAsync()</c> on (through a created <c>DbCommand</c>).</param>
            <param name="mapping">Mapping used to translate from db table rows to .NET object</param>
            <param name="query">Query or short query (<c><![CDATA["projectId = @id AND dateCreated < @minDate"]]></c>)</param>
            <param name="parameters">
                Anonymous object (<c>new { id = dto.ProjectId, @minDate = dto.MinDate }</c>), a dictionary or
                a value array
            </param>
            <returns>A list which is generated asynchronously.</returns>
            <remarks>
                <para>
                    For more information about the "query" and "parameters" arguments, see
                    <see cref="M:Griffin.Data.Mapper.CommandExtensions.ApplyQuerySql``1(System.Data.IDbCommand,System.String,System.Object[])" />.
                </para>
                <para>
                    The returned enumerator will not map each row until it's requested. To be able to do that the
                    Connection/Command/DataReader is
                    kept open until the enumerator is disposed. Hence it's important that you make sure that the enumerator is
                    disposed when you are
                    done with it.
                </para>
                <para>Uses <see cref="T:Griffin.Data.Mapper.EntityMappingProvider" /> to find the correct <c><![CDATA[IEntityMapper<TEntity>]]></c>.</para>
            </remarks>
            <example>
                <code>
            // All these examples are valid:
            <![CDATA[
            var users = await connection.ToListAsync<User>("Age < 10");
            var users = await connection.ToListAsync<User>("SELECT * FROM Users WHERE Age = 37");
            var users = await connection.ToListAsync<User>("FirstName = @name", new { name = user.FirstName });
            var users = await connection.ToListAsync<User>("FirstName = @1 AND Age < @2", 'A%', 35);
            var users = await connection.ToListAsync<User>("SELECT * FROM Users WHERE Age = @age LIMIT 1, 10", new { age = submittedAge });
            var users = await connection.ToListAsync<User>("SELECT * FROM Users WHERE Age = @1 LIMIT 1, 10", user.FirstName);
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Griffin.Data.Mapper.AsyncConnectionExtensions.ToListAsync``1(System.Data.IDbConnection,Griffin.Data.Mapper.IEntityMapper{``0},System.String,System.Object[])">
            <summary>
                Generate a complete list before returning.
            </summary>
            <typeparam name="TEntity">Type of entity to map</typeparam>
            <param name="connection">Connection to invoke <c>ExecuteReaderAsync()</c> on (through a created <c>DbCommand</c>).</param>
            <param name="mapping">Mapping used to translate from db table rows to .NET object</param>
            <param name="query">Query</param>
            <param name="parameters">
                Anonymous object (<c>new { id = dto.ProjectId, @minDate = dto.MinDate }</c>), a dictionary or
                a value array
            </param>
            <returns>A list which is generated asynchronously.</returns>
            <remarks>
                <para>
                    For more information about the "query" and "parameters" arguments, see
                    <see cref="!:CommandExtensions.ApplyQuerySql&lt;TEntity&gt;(IEntityMapper,string,object[])" />.
                </para>
                <para>
                    The returned enumerator will not map each row until it's requested. To be able to do that the
                    Connection/Command/DataReader is
                    kept open until the enumerator is disposed. Hence it's important that you make sure that the enumerator is
                    disposed when you are
                    done with it.
                </para>
                <para>Uses <see cref="T:Griffin.Data.Mapper.EntityMappingProvider" /> to find the correct <c><![CDATA[IEntityMapper<TEntity>]]></c>.</para>
            </remarks>
            <example>
                <code>
            // All these examples are valid:
            <![CDATA[
            var users = await connection.ToListAsync<User>("SELECT * FROM Users WHERE Age = 37");
            var users = await connection.ToListAsync<User>("SELECT * FROM Users WHERE FirstName = @name", new { name = user.FirstName });
            var users = await connection.ToListAsync<User>("SELECT * FROM Users WHERE FirstName = @1 AND Age < @2", 'A%', 35);
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Griffin.Data.Mapper.AsyncConnectionExtensions.UpdateAsync``1(System.Data.IDbConnection,``0)">
            <summary>
                Update an existing entity
            </summary>
            <typeparam name="TEntity">
                Type of entity to load, must have an mapper registered in
                <see cref="T:Griffin.Data.Mapper.EntityMappingProvider" />.
            </typeparam>
            <param name="connection">Connection to use</param>
            <param name="entity">Entity to update.</param>
            <returns>Task to wait on for completion</returns>
            <remarks>
                <para>
                    Uses <see cref="T:Griffin.Data.Mapper.EntityMappingProvider" /> to find the correct <c><![CDATA[ICrudEntityMapper<TEntity>]]></c>
                </para>
            </remarks>
        </member>
        <member name="T:Griffin.Data.Mapper.AsyncAdoNetUnitOfWorkExtensions">
            <summary>
                Extension methods for our AdoNet unit of work.
            </summary>
        </member>
        <member name="M:Griffin.Data.Mapper.AsyncAdoNetUnitOfWorkExtensions.DeleteAsync``1(Griffin.Data.IAdoNetUnitOfWork,``0)">
            <summary>
                DELETE a row from the table.
            </summary>
            <typeparam name="TEntity">
                Type of entity to use, must have an mapper registered in <see cref="T:Griffin.Data.Mapper.EntityMappingProvider" />
                .
            </typeparam>
            <param name="unitOfWork">Unit of work to execute command in.</param>
            <param name="entity">Uses the primary key column(s), as defined in the mapping, to remove the entry.</param>
            <returns>Task to wait on for completion.</returns>
            <example>
                <code>
            <![CDATA[
            public async Task DeleteUser(int userId)
            {
                return await _unitOfWork.DeleteAsync(new User { Id = userId });
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Griffin.Data.Mapper.AsyncAdoNetUnitOfWorkExtensions.DeleteAsync``1(Griffin.Data.IAdoNetUnitOfWork,System.Object)">
            <summary>
                DELETE a row from the table.
            </summary>
            <typeparam name="TEntity">
                Type of entity to use, must have an mapper registered in <see cref="T:Griffin.Data.Mapper.EntityMappingProvider" />
                .
            </typeparam>
            <param name="unitOfWork">Unit of work to execute command in.</param>
            <param name="constraints">Constraints to be used. any field with '%' in the name will return in <c>LIKE</c> queries.</param>
            <returns>Task to wait on for completion.</returns>
            <example>
                <code>
            <![CDATA[
            public async Task DeleteUser(int userId)
            {
                await _unitOfWork.DeleteAsync(new { Id = userId });
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Griffin.Data.Mapper.AsyncAdoNetUnitOfWorkExtensions.FirstAsync``1(Griffin.Data.IAdoNetUnitOfWork,System.Object)">
            <summary>
                Get an entity.
            </summary>
            <typeparam name="TEntity">
                Type of entity to load, must have an mapper registered in
                <see cref="T:Griffin.Data.Mapper.EntityMappingProvider" />.
            </typeparam>
            <param name="unitOfWork">UnitOfWork to invoke <c>ExecuteReaderAsync()</c> on (through a created <c>DbCommand</c>).</param>
            <param name="constraints">
                dynamic specifying the properties to use. All parameters are joined with "AND" in the
                resulting SQL query. Any parameter with '%' in the value will be using LIKE instead of '='
            </param>
            <returns>Found entity</returns>
            <remarks>
                <para>
                    Uses <see cref="T:Griffin.Data.Mapper.EntityMappingProvider" /> to find the correct <c><![CDATA[ICrudEntityMapper<TEntity>]]></c>
                </para>
            </remarks>
            <example>
                <code>
            <![CDATA[
            public async Task<User> GetUser(int userId)
            {
                return await _connection.FirstAsync<User>(new { Id = userId });
            }
            ]]>
            </code>
                <para>
                    You can also use % for LIKE searches:
                </para>
                <code>
            <![CDATA[
            return await _connection.FirstAsync<User>(new { FirstName = 'Jon%', LastName = 'Gau%' });
            ]]>
            </code>
                <para>
                    Which will translate into "WHERE FirstName LIKE 'Jon%' AND LastName LIKE 'Gau%'"
                </para>
            </example>
            <exception cref="T:Griffin.Data.EntityNotFoundException">Failed to find an entity mathing the query</exception>
        </member>
        <member name="M:Griffin.Data.Mapper.AsyncAdoNetUnitOfWorkExtensions.FirstAsync``1(Griffin.Data.IAdoNetUnitOfWork,System.String,System.Object)">
            <summary>
                Get an entity.
            </summary>
            <typeparam name="TEntity">
                Type of entity to load, must have an mapper registered in
                <see cref="T:Griffin.Data.Mapper.EntityMappingProvider" />.
            </typeparam>
            <param name="unitOfWork">UnitOfWork to invoke <c>ExecuteReaderAsync()</c> on (through a created <c>DbCommand</c>).</param>
            <param name="query">Query or short query (<c><![CDATA["projectId = @id AND dateCreated < @minDate"]]></c>)</param>
            <param name="parameters">
                Anonymous object (<c>new { id = dto.ProjectId, @minDate = dto.MinDate }</c>), a dictionary or
                a value array
            </param>
            <returns>Found entity</returns>
            <remarks>
                <para>
                    Uses <see cref="T:Griffin.Data.Mapper.EntityMappingProvider" /> to find the correct <c><![CDATA[ICrudEntityMapper<TEntity>]]></c>
                </para>
            </remarks>
            <example>
                <code>
            <![CDATA[
            public async Task<User> GetUser(int userId)
            {
                return await _connection.FirstAsync<User>("WHERE id = @id", new { id = UserId });
            }
            ]]>
            </code>
                <para>
                    Which will translate into:
                </para>
                <code>
            command.CommandText = "SELECT * FROM Users WHERE id = @id";
            var p = command.CreateParameter();
            p.Name = "id";
            p.Value = userId;
            command.Parameters.Add(p);
            </code>
            </example>
            <exception cref="T:Griffin.Data.EntityNotFoundException">Failed to find an entity mathing the query</exception>
        </member>
        <member name="M:Griffin.Data.Mapper.AsyncAdoNetUnitOfWorkExtensions.FirstOrDefaultAsync``1(Griffin.Data.IAdoNetUnitOfWork,System.Object)">
            <summary>
                Fetches the first row if found.
            </summary>
            <typeparam name="TEntity">
                Type of entity to load, must have an mapper registered in
                <see cref="T:Griffin.Data.Mapper.EntityMappingProvider" />.
            </typeparam>
            <param name="unitOfWork">UnitOfWork to invoke <c>ExecuteReaderAsync()</c> on (through a created <c>DbCommand</c>).</param>
            <param name="constraints">
                dynamic specifying the properties to use. All parameters are joined with "AND" in the
                resulting SQL query. Any parameter with '%' in the value will be using LIKE instead of '='
            </param>
            <returns>
                Entity if found; otherwise <c>null</c>.
            </returns>
            <remarks>
                <para>Use this method when an entity is expected to be returned.</para>
                <para>
                    Uses <see cref="T:Griffin.Data.Mapper.EntityMappingProvider" /> to find the correct <c><![CDATA[ICrudEntityMapper<TEntity>]]></c>
                </para>
            </remarks>
            <example>
                <code>
            <![CDATA[
            public async Task<User> GetUser(int userId)
            {
                return await _connection.FirstOrDefaultAsync<User>(new { Id = userId });
            }
            ]]>
            </code>
                <para>
                    You can also use % for LIKE searches:
                </para>
                <code>
            <![CDATA[
            return await _connection.FirstOrDefaultAsync<User>(new { FirstName = 'Jon%', LastName = 'Gau%' });
            ]]>
            </code>
                <para>
                    Which will translate into "WHERE FirstName LIKE 'Jon%' AND LastName LIKE 'Gau%'"
                </para>
            </example>
        </member>
        <member name="M:Griffin.Data.Mapper.AsyncAdoNetUnitOfWorkExtensions.FirstOrDefaultAsync``1(Griffin.Data.IAdoNetUnitOfWork,System.String,System.Object[])">
            <summary>
                Fetches the first row if found.
            </summary>
            <typeparam name="TEntity">
                Type of entity to load, must have an mapper registered in
                <see cref="T:Griffin.Data.Mapper.EntityMappingProvider" />.
            </typeparam>
            <param name="unitOfWork">UnitOfWork to invoke <c>ExecuteReaderAsync()</c> on (through a created <c>DbCommand</c>).</param>
            <param name="query">Query or short query (<c><![CDATA["projectId = @id AND dateCreated < @minDate"]]></c>)</param>
            <param name="parameters">
                Anonymous object (<c>new { id = dto.ProjectId, @minDate = dto.MinDate }</c>), a dictionary or
                a value array
            </param>
            <returns>
                Entity if found; otherwise <c>null</c>.
            </returns>
            <remarks>
                <para>Use this method when an entity is expected to be returned.</para>
                <para>
                    Uses <see cref="T:Griffin.Data.Mapper.EntityMappingProvider" /> to find the correct <c><![CDATA[ICrudEntityMapper<TEntity>]]></c>
                </para>
            </remarks>
            <example>
                <code>
            <![CDATA[
            public async Task<User> GetUser(int userId)
            {
                return await _connection.FirstOrDefaultAsync<User>("WHERE age < @Age", new { Age = minAge });
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Griffin.Data.Mapper.AsyncAdoNetUnitOfWorkExtensions.InsertAsync``1(Griffin.Data.IAdoNetUnitOfWork,``0)">
            <summary>
                Insert a new row into the database.
            </summary>
            <typeparam name="TEntity">
                Type of entity to use, must have an mapper registered in <see cref="T:Griffin.Data.Mapper.EntityMappingProvider" />
                .
            </typeparam>
            <param name="unitOfWork">Unit of work to execute command in.</param>
            <param name="entity">entity to insert into the database.</param>
            <returns>Task to wait on for completion</returns>
            <remarks>
                <para>
                    Will assign the PK value to the
                </para>
            </remarks>
            <example>
                <code>
            var user = new User(10, "Jonas");
            using (var uow = UnitOfWorkFactory.Create())
            {
                await uow.InsertAsync(user);
            }
            </code>
            </example>
        </member>
        <member name="M:Griffin.Data.Mapper.AsyncAdoNetUnitOfWorkExtensions.ToEnumerableAsync``1(Griffin.Data.IAdoNetUnitOfWork,System.String,System.Object[])">
            <summary>
                Return an enumerable which uses lazy loading of each row (you must close the connection once done).
            </summary>
            <typeparam name="TEntity">Type of entity to map</typeparam>
            <param name="unitOfWork">Unit of work to invoke <c>ExecuteReaderAsync()</c> on (through a created <c>DbCommand</c>).</param>
            <param name="query">Query or short query (<c><![CDATA["projectId = @id AND dateCreated < @minDate"]]></c>)</param>
            <param name="parameters">
                Anonymous object (<c>new { id = dto.ProjectId, @minDate = dto.MinDate }</c>), a dictionary or
                a value array
            </param>
            <returns>Lazy loaded enumerator</returns>
            <remarks>
                <para>
                    For more information about the "query" and "parameters" arguments, see
                    <see cref="M:Griffin.Data.Mapper.CommandExtensions.ApplyQuerySql``1(System.Data.IDbCommand,System.String,System.Object[])" />.
                </para>
                <para>
                    The returned enumerator will not map each row until it's requested. To be able to do that the
                    connection/command/datareader is
                    kept open until the enumerator is disposed. Hence it's important that you make sure that the enumerator is
                    disposed when you are
                    done with it.
                </para>
                <para>Uses <see cref="T:Griffin.Data.Mapper.EntityMappingProvider" /> to find the correct <c><![CDATA[IEntityMapper<TEntity>]]></c>.</para>
            </remarks>
            <example>
                <code>
            // All these examples are valid:
            <![CDATA[
            var users = await unitOfWork.ToEnumerable<User>("Age < 10");
            var users = await unitOfWork.ToEnumerable<User>("SELECT * FROM Users WHERE Age = 37");
            var users = await unitOfWork.ToEnumerable<User>("FirstName = @name", new { name = user.FirstName });
            var users = await unitOfWork.ToEnumerable<User>("FirstName = @1 AND Age < @2", 'A%', 35);
            var users = await unitOfWork.ToEnumerable<User>("SELECT * FROM Users WHERE Age = @age LIMIT 1, 10", new { age = submittedAge });
            var users = await unitOfWork.ToEnumerable<User>("SELECT * FROM Users WHERE Age = @1 LIMIT 1, 10", user.FirstName);
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Griffin.Data.Mapper.AsyncAdoNetUnitOfWorkExtensions.ToEnumerableAsync``1(Griffin.Data.IAdoNetUnitOfWork,System.Boolean,System.String,System.Object[])">
            <summary>
                Return an enumerable which uses lazy loading of each row.
            </summary>
            <typeparam name="TEntity">Type of entity to map</typeparam>
            <param name="unitOfWork">UnitOfWork to invoke <c>ExecuteReaderAsync()</c> on (through a created <c>DbCommand</c>).</param>
            <param name="ownsConnection">
                <c>true</c> if the connection should be disposed together with the command/datareader. See
                remarks.
            </param>
            <param name="query">Query or short query (<c><![CDATA["projectId = @id AND dateCreated < @minDate"]]></c>)</param>
            <param name="parameters">
                Anonymous object (<c>new { id = dto.ProjectId, @minDate = dto.MinDate }</c>), a dictionary or
                a value array
            </param>
            <returns>Lazy loaded enumerator</returns>
            <remarks>
                <para>
                    For more information about the "query" and "parameters" arguments, see
                    <see cref="M:Griffin.Data.Mapper.CommandExtensions.ApplyQuerySql``1(System.Data.IDbCommand,System.String,System.Object[])" />.
                </para>
                <para>
                    The returned enumerator will not map each row until it's requested. To be able to do that the
                    connection/command/datareader is
                    kept open until the enumerator is disposed. Hence it's important that you make sure that the enumerator is
                    disposed when you are
                    done with it.
                </para>
                <para>Uses <see cref="T:Griffin.Data.Mapper.EntityMappingProvider" /> to find the correct <c><![CDATA[IEntityMapper<TEntity>]]></c>.</para>
            </remarks>
            <example>
                <code>
            // All these examples are valid:
            <![CDATA[
            var users = await unitOfWork.ToEnumerable<User>(true, "Age < 10");
            var users = await unitOfWork.ToEnumerable<User>(true, "SELECT * FROM Users WHERE Age = 37");
            var users = await unitOfWork.ToEnumerable<User>(true, "FirstName = @name", new { name = user.FirstName });
            var users = await unitOfWork.ToEnumerable<User>(true, "FirstName = @1 AND Age < @2", 'A%', 35);
            var users = await unitOfWork.ToEnumerable<User>(true, "SELECT * FROM Users WHERE Age = @age LIMIT 1, 10", new { age = submittedAge });
            var users = await unitOfWork.ToEnumerable<User>(true, "SELECT * FROM Users WHERE Age = @1 LIMIT 1, 10", user.FirstName);
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Griffin.Data.Mapper.AsyncAdoNetUnitOfWorkExtensions.ToEnumerableAsync``1(Griffin.Data.IAdoNetUnitOfWork,System.Boolean,Griffin.Data.Mapper.ICrudEntityMapper{``0},System.String,System.Object[])">
            <summary>
                Return an enumerable which uses lazy loading of each row.
            </summary>
            <typeparam name="TEntity">Type of entity to map</typeparam>
            <param name="unitOfWork">Unit of work to invoke <c>ExecuteReaderAsync()</c> on (through a created <c>DbCommand</c>).</param>
            <param name="ownsConnection">
                <c>true</c> if the connection should be disposed together with the command/datareader. See
                remarks.
            </param>
            <param name="mapping">Mapping used when translating table rows to .NET classes.</param>
            <param name="query">Query or short query (<c><![CDATA["projectId = @id AND dateCreated < @minDate"]]></c>)</param>
            <param name="parameters">
                Anonymous object (<c>new { id = dto.ProjectId, @minDate = dto.MinDate }</c>), a dictionary or
                a value array
            </param>
            <returns>Lazy loaded enumerator</returns>
            <remarks>
                <para>
                    For more information about the "query" and "parameters" arguments, see
                    <see cref="M:Griffin.Data.Mapper.CommandExtensions.ApplyQuerySql``1(System.Data.IDbCommand,System.String,System.Object[])" />.
                </para>
                <para>
                    The returned enumerator will not map each row until it's requested. To be able to do that the
                    connection/command/datareader is
                    kept open until the enumerator is disposed. Hence it's important that you make sure that the enumerator is
                    disposed when you are
                    done with it.
                </para>
                <para>Uses <see cref="T:Griffin.Data.Mapper.EntityMappingProvider" /> to find the correct <c><![CDATA[IEntityMapper<TEntity>]]></c>.</para>
            </remarks>
            <example>
                <code>
            // All these examples are valid:
            <![CDATA[
            var users = await unitOfWork.ToEnumerable<User>(true, new CustomUserMapping(), "Age < 10");
            var users = await unitOfWork.ToEnumerable<User>(true, new CustomUserMapping(), "SELECT * FROM Users WHERE Age = 37");
            var users = await unitOfWork.ToEnumerable<User>(true, new CustomUserMapping(), "FirstName = @name", new { name = user.FirstName });
            var users = await unitOfWork.ToEnumerable<User>(true, new CustomUserMapping(), "FirstName = @1 AND Age < @2", 'A%', 35);
            var users = await unitOfWork.ToEnumerable<User>(true, new CustomUserMapping(), "SELECT * FROM Users WHERE Age = @age LIMIT 1, 10", new { age = submittedAge });
            var users = await unitOfWork.ToEnumerable<User>(true, new CustomUserMapping(), "SELECT * FROM Users WHERE Age = @1 LIMIT 1, 10", user.FirstName);
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Griffin.Data.Mapper.AsyncAdoNetUnitOfWorkExtensions.ToListAsync``1(Griffin.Data.IAdoNetUnitOfWork,System.String,System.Object[])">
            <summary>
                Generate a complete list before returning.
            </summary>
            <typeparam name="TEntity">Type of entity to map</typeparam>
            <param name="unitOfWork">Unit of work to invoke <c>ExecuteReaderAsync()</c> on (through a created <c>DbCommand</c>).</param>
            <param name="query">Query or short query (<c><![CDATA["projectId = @id AND dateCreated < @minDate"]]></c>)</param>
            <param name="parameters">
                Anonymous object (<c>new { id = dto.ProjectId, @minDate = dto.MinDate }</c>), a dictionary or
                a value array
            </param>
            <returns>A list which is generated asynchronously.</returns>
            <remarks>
                <para>
                    For more information about the "query" and "parameters" arguments, see
                    <see cref="M:Griffin.Data.Mapper.CommandExtensions.ApplyQuerySql``1(System.Data.IDbCommand,System.String,System.Object[])" />.
                </para>
                <para>
                    The returned enumerator will not map each row until it's requested. To be able to do that the
                    connection/command/datareader is
                    kept open until the enumerator is disposed. Hence it's important that you make sure that the enumerator is
                    disposed when you are
                    done with it.
                </para>
                <para>Uses <see cref="T:Griffin.Data.Mapper.EntityMappingProvider" /> to find the correct <c><![CDATA[ICrudEntityMapper<TEntity>]]></c>.</para>
            </remarks>
            <example>
                <code>
            // All these examples are valid:
            <![CDATA[
            var users = await unitOfWork.ToListAsync<User>("Age < 10");
            var users = await unitOfWork.ToListAsync<User>("SELECT * FROM Users WHERE Age = 37");
            var users = await unitOfWork.ToListAsync<User>("FirstName = @name", new { name = user.FirstName });
            var users = await unitOfWork.ToListAsync<User>("FirstName = @1 AND Age < @2", 'A%', 35);
            var users = await unitOfWork.ToListAsync<User>("SELECT * FROM Users WHERE Age = @age LIMIT 1, 10", new { age = submittedAge });
            var users = await unitOfWork.ToListAsync<User>("SELECT * FROM Users WHERE Age = @1 LIMIT 1, 10", user.FirstName);
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Griffin.Data.Mapper.AsyncAdoNetUnitOfWorkExtensions.ToListAsync``1(Griffin.Data.IAdoNetUnitOfWork,Griffin.Data.Mapper.ICrudEntityMapper{``0},System.String,System.Object[])">
            <summary>
                Generate a complete list before returning.
            </summary>
            <typeparam name="TEntity">Type of entity to map</typeparam>
            <param name="unitOfWork">Unit of work to invoke <c>ExecuteReaderAsync()</c> on (through a created <c>DbCommand</c>).</param>
            <param name="mapping">Mapping used to translate from db table rows to .NET object</param>
            <param name="query">Query or short query (<c><![CDATA["projectId = @id AND dateCreated < @minDate"]]></c>)</param>
            <param name="parameters">
                Anonymous object (<c>new { id = dto.ProjectId, @minDate = dto.MinDate }</c>), a dictionary or
                a value array
            </param>
            <returns>A list which is generated asynchronously.</returns>
            <remarks>
                <para>
                    For more information about the "query" and "parameters" arguments, see
                    <see cref="M:Griffin.Data.Mapper.CommandExtensions.ApplyQuerySql``1(System.Data.IDbCommand,System.String,System.Object[])" />.
                </para>
                <para>
                    The returned enumerator will not map each row until it's requested. To be able to do that the
                    connection/command/datareader is
                    kept open until the enumerator is disposed. Hence it's important that you make sure that the enumerator is
                    disposed when you are
                    done with it.
                </para>
            </remarks>
            <example>
                <code>
            // All these examples are valid:
            <![CDATA[
            var users = await unitOfWork.ToListAsync<User>("Age < 10");
            var users = await unitOfWork.ToListAsync<User>("SELECT * FROM Users WHERE Age = 37");
            var users = await unitOfWork.ToListAsync<User>("FirstName = @name", new { name = user.FirstName });
            var users = await unitOfWork.ToListAsync<User>("FirstName = @1 AND Age < @2", 'A%', 35);
            var users = await unitOfWork.ToListAsync<User>("SELECT * FROM Users WHERE Age = @age LIMIT 1, 10", new { age = submittedAge });
            var users = await unitOfWork.ToListAsync<User>("SELECT * FROM Users WHERE Age = @1 LIMIT 1, 10", user.FirstName);
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Griffin.Data.Mapper.AsyncAdoNetUnitOfWorkExtensions.ToListAsync``1(Griffin.Data.IAdoNetUnitOfWork,Griffin.Data.Mapper.IEntityMapper{``0},System.String,System.Object[])">
            <summary>
                Generate a complete list before returning.
            </summary>
            <typeparam name="TEntity">Type of entity to map</typeparam>
            <param name="unitOfWork">Unit of work to invoke <c>ExecuteReaderAsync()</c> on (through a created <c>DbCommand</c>).</param>
            <param name="mapping">Mapping used to translate from db table rows to .NET object</param>
            <param name="query">Query or short query (<c><![CDATA["projectId = @id AND dateCreated < @minDate"]]></c>)</param>
            <param name="parameters">
                Anonymous object (<c>new { id = dto.ProjectId, @minDate = dto.MinDate }</c>), a dictionary or
                a value array
            </param>
            <returns>A list which is generated asynchronously.</returns>
            <remarks>
                <para>
                    For more information about the "query" and "parameters" arguments, see
                    <see cref="M:Griffin.Data.Mapper.CommandExtensions.ApplyQuerySql``1(System.Data.IDbCommand,System.String,System.Object[])" />.
                </para>
                <para>
                    The returned enumerator will not map each row until it's requested. To be able to do that the
                    connection/command/datareader is
                    kept open until the enumerator is disposed. Hence it's important that you make sure that the enumerator is
                    disposed when you are
                    done with it.
                </para>
            <para>Do note that column names must be used for this overload.</para>
            </remarks>
            <example>
                <code>
            // All these examples are valid:
            <![CDATA[
            var users = await unitOfWork.ToListAsync<User>("SELECT * FROM Users WHERE Age = 37");
            var users = await unitOfWork.ToListAsync<User>("SELECT * FROM Users WHERE Age = @age LIMIT 1, 10", new { age = submittedAge });
            var users = await unitOfWork.ToListAsync<User>("SELECT * FROM Users WHERE Age = @1 LIMIT 1, 10", user.FirstName);
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Griffin.Data.Mapper.AsyncAdoNetUnitOfWorkExtensions.UpdateAsync``1(Griffin.Data.IAdoNetUnitOfWork,``0)">
            <summary>
                Update an entity
            </summary>
            <typeparam name="TEntity">
                Type of entity to use, must have an mapper registered in <see cref="T:Griffin.Data.Mapper.EntityMappingProvider" />
                .
            </typeparam>
            <param name="unitOfWork">Transaction wrapper</param>
            <param name="entity">Entity to update</param>
            <returns>Task to wait on for completion</returns>
            <example>
                <code>
            using (var uow = UnitOfWorkFactory.Create())
            {
                var user = await uow.FirstAsync(new { Id = 1 });
                user.State = AccountState.Banned;
                await uow.UpdateAsync(user);
            
                uow.SaveChanges();
            }
            </code>
            </example>
        </member>
        <member name="T:Griffin.Data.Mapper.CommandBuilders.CommandBuilder">
            <summary>
                Base class for command builders
            </summary>
            <remarks>
                Creates SQL commands per the SQL92 standard. Inherit this class to customize different commands.
            </remarks>
        </member>
        <member name="M:Griffin.Data.Mapper.CommandBuilders.CommandBuilder.#ctor(Griffin.Data.Mapper.ICrudEntityMapper)">
            <summary>
                Initializes a new instance of the <see cref="T:Griffin.Data.Mapper.CommandBuilders.CommandBuilder" /> class.
            </summary>
            <param name="mapper">The mapper.</param>
            <exception cref="T:System.ArgumentNullException">mapper</exception>
        </member>
        <member name="P:Griffin.Data.Mapper.CommandBuilders.CommandBuilder.TableName">
            <summary>
                Gets table that the mapping is for
            </summary>
        </member>
        <member name="P:Griffin.Data.Mapper.CommandBuilders.CommandBuilder.Mapper">
            <summary>
                Mapper that this builder is for.
            </summary>
        </member>
        <member name="P:Griffin.Data.Mapper.CommandBuilders.CommandBuilder.TreatZeroAsNullForKeys">
            <summary>
                Use <c>DBNull</c> as value if a primary key is 0.
            </summary>
        </member>
        <member name="P:Griffin.Data.Mapper.CommandBuilders.CommandBuilder.ParameterPrefix">
            <summary>
                Gets prefix to use for data parameters (typically '@' or ':')
            </summary>
        </member>
        <member name="M:Griffin.Data.Mapper.CommandBuilders.CommandBuilder.InsertCommand(System.Data.IDbCommand,System.Object)">
            <summary>
                Generate an insert command, should end with a command that returns the insert identity.
            </summary>
            <param name="command">Command to add the query to</param>
            <param name="entity">Entity to store</param>
            <exception cref="T:System.ArgumentNullException">
                command
                or
                entity
            </exception>
            <exception cref="T:System.Data.DataException">No values were added to the query for  + entity</exception>
        </member>
        <member name="M:Griffin.Data.Mapper.CommandBuilders.CommandBuilder.UpdateCommand(System.Data.IDbCommand,System.Object)">
            <summary>
                Create an update query from the entity.
            </summary>
            <param name="command">Command to modify</param>
            <param name="entity">Entity to update</param>
            <exception cref="T:System.ArgumentNullException">
                command
                or
                entity
            </exception>
            <exception cref="T:System.Data.DataException">
                At least one property (other than primary keys) must be specified.
                or
            </exception>
        </member>
        <member name="M:Griffin.Data.Mapper.CommandBuilders.CommandBuilder.DeleteCommand(System.Data.IDbCommand,System.Object)">
            <summary>
                Modifies the command to execute a DELETE statement
            </summary>
            <param name="command">Command that will be executed after this method call</param>
            <param name="entity">Only primary key properties are used in the WHERE clause</param>
            <exception cref="T:System.ArgumentNullException">
                command
                or
                entity
            </exception>
            <exception cref="T:System.Data.DataException"></exception>
        </member>
        <member name="M:Griffin.Data.Mapper.CommandBuilders.CommandBuilder.TruncateCommand(System.Data.IDbCommand)">
            <summary>
                Truncate all rows in a table
            </summary>
            <param name="command">Command that will be executed after this method call</param>
            <exception cref="T:System.ArgumentNullException">command</exception>
            <remarks>
                Will do a DELETE statement
            </remarks>
        </member>
        <member name="M:Griffin.Data.Mapper.CommandBuilders.CommandBuilder.Paging(System.Data.IDbCommand,System.Int32,System.Int32)">
            <summary>
                Modify SQL statement so that the result is paged.
            </summary>
            <param name="command">Command to modify</param>
            <param name="pageNumber">One based index</param>
            <param name="pageSize">Items per page.</param>
        </member>
        <member name="T:Griffin.Data.Mapper.CommandBuilders.CommandBuilderFactory">
            <summary>
            Used to produce factories of the correct 
            </summary>
        </member>
        <member name="M:Griffin.Data.Mapper.CommandBuilders.CommandBuilderFactory.Assign(System.Func{Griffin.Data.Mapper.ICrudEntityMapper,Griffin.Data.Mapper.CommandBuilders.ICommandBuilder})">
            <summary>
            Assigns the specified command builder.
            </summary>
            <param name="commandBuilder">Assign your database engine specific command builder factory.</param>
            <exception cref="T:System.ArgumentNullException">commandBuilder</exception>
        </member>
        <member name="M:Griffin.Data.Mapper.CommandBuilders.CommandBuilderFactory.Create(Griffin.Data.Mapper.ICrudEntityMapper)">
            <summary>
            Create a command builder that uses your DB engine dialect.
            </summary>
            <param name="mapper">Mapper to get a builder for.</param>
            <returns>builder.</returns>
        </member>
        <member name="T:Griffin.Data.Mapper.CommandBuilders.ICommandBuilder">
            <summary>
            Used to be able to adapt basic queries to the SQL dialetcs of each database engine.
            </summary>
        </member>
        <member name="P:Griffin.Data.Mapper.CommandBuilders.ICommandBuilder.ParameterPrefix">
            <summary>
            Gets prefix to use for data parameters (typically '@' or ':')
            </summary>
        </member>
        <member name="M:Griffin.Data.Mapper.CommandBuilders.ICommandBuilder.InsertCommand(System.Data.IDbCommand,System.Object)">
            <summary>
            Modifies the command to execute an INSERT INTO using the entity as data
            </summary>
            <param name="command">Command that will be executed after this method call.</param>
            <param name="entity">Entity specified; If possible, set the entity primary key value when done.</param>
            <remarks>
            <para>The command should not be executed in the implementation of this interface. </para>
            <para>You may however execute commads </para>
            </remarks>
        </member>
        <member name="M:Griffin.Data.Mapper.CommandBuilders.ICommandBuilder.UpdateCommand(System.Data.IDbCommand,System.Object)">
            <summary>
            Modifies the command to execute an UPDATE using the entity as data
            </summary>
            <param name="command">Command that will be executed after this method call</param>
            <param name="entity">Update is made on all properties but those specified as primary key (which is used in the WHERE clause)</param>
        </member>
        <member name="M:Griffin.Data.Mapper.CommandBuilders.ICommandBuilder.DeleteCommand(System.Data.IDbCommand,System.Object)">
            <summary>
            Modifies the command to execute a DELETE statement
            </summary>
            <param name="command">Command that will be executed after this method call</param>
            <param name="entity">Only primary key properties are used in the WHERE clause</param>
        </member>
        <member name="M:Griffin.Data.Mapper.CommandBuilders.ICommandBuilder.TruncateCommand(System.Data.IDbCommand)">
            <summary>
            Truncate all rows in a table
            </summary>
            <param name="command">Command that will be executed after this method call</param>
            <remarks>
            <para>Some dialects have a special command which can be used to DELETE all rows from a table, everyone else should just use a DELETE statement without a WHERE clause.</para>
            </remarks>
        </member>
        <member name="M:Griffin.Data.Mapper.CommandBuilders.ICommandBuilder.Paging(System.Data.IDbCommand,System.Int32,System.Int32)">
            <summary>
            Modify SQL statement so that the result is paged.
            </summary>
            <param name="command">Command to modify</param>
            <param name="pageNumber">One based index</param>
            <param name="pageSize">Items per page.</param>
        </member>
        <member name="T:Griffin.Data.Mapper.CommandBuilders.NamespaceDoc">
            <summary>
            Command builders are used to create standard SQL commands like CRUD and basic SELECTs. They exist to be able to adapt the
            commands for every RDBMS out there.
            </summary>
        </member>
        <member name="T:Griffin.Data.Mapper.CommandBuilders.PostgreSqlCommandBuilder">
            <summary>
            Will fetch the sequence value during inserts, truncate table (including the sequence) and page accordingly.
            </summary>
        </member>
        <member name="M:Griffin.Data.Mapper.CommandBuilders.PostgreSqlCommandBuilder.#ctor(Griffin.Data.Mapper.ICrudEntityMapper)">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.Data.Mapper.CommandBuilders.CommandBuilder"/> class.
            </summary>
            <param name="mapper">The mapper.</param>
            <exception cref="T:System.ArgumentNullException">mapper</exception>
        </member>
        <member name="M:Griffin.Data.Mapper.CommandBuilders.PostgreSqlCommandBuilder.InsertCommand(System.Data.IDbCommand,System.Object)">
            <summary>
            Generate an insert command, should end with a command that returns the insert identity.
            </summary>
            <param name="command">Command to add the query to</param>
            <param name="entity">Entity to store</param>
            <exception cref="T:System.ArgumentNullException">
            command
            or
            entity
            </exception>
            <exception cref="T:System.Data.DataException">No values were added to the query for  + entity</exception>
        </member>
        <member name="M:Griffin.Data.Mapper.CommandBuilders.PostgreSqlCommandBuilder.TruncateCommand(System.Data.IDbCommand)">
            <summary>
            Truncate all rows in a table
            </summary>
            <param name="command">Command that will be executed after this method call</param>
            <exception cref="T:System.ArgumentNullException">command</exception>
            <remarks>
            Will do a DELETE statement
            </remarks>
        </member>
        <member name="M:Griffin.Data.Mapper.CommandBuilders.PostgreSqlCommandBuilder.Paging(System.Data.IDbCommand,System.Int32,System.Int32)">
            <summary>
            Uses LIMIT/OFFSET
            </summary>
            <param name="command">Command to modify</param>
            <param name="pageNumber">One based index</param>
            <param name="pageSize">Items per page.</param>
        </member>
        <member name="T:Griffin.Data.Mapper.CommandBuilders.SqlServerCommandBuilder">
            <summary>
            Specializations for Sql Server.
            </summary>
        </member>
        <member name="M:Griffin.Data.Mapper.CommandBuilders.SqlServerCommandBuilder.#ctor(Griffin.Data.Mapper.ICrudEntityMapper)">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.Data.Mapper.CommandBuilders.SqlServerCommandBuilder"/> class.
            </summary>
            <param name="mapper">Mapper that this builder can generate queries for.</param>
        </member>
        <member name="M:Griffin.Data.Mapper.CommandBuilders.SqlServerCommandBuilder.InsertCommand(System.Data.IDbCommand,System.Object)">
            <summary>
            Generate an insert command, should end with a command that returns the insert identity.
            </summary>
            <param name="command">Command to add the query to</param>
            <param name="entity">Entity to store</param>
            <remarks>
            Last statement will return @@identity. 
            </remarks>
        </member>
        <member name="M:Griffin.Data.Mapper.CommandBuilders.SqlServerCommandBuilder.TruncateCommand(System.Data.IDbCommand)">
            <summary>
            Uses TRUNCATE TABLE
            </summary>
            <param name="command">Command that will be executed after this method call</param>
            <remarks>
            Will do a TRUNCATE TABLE statement
            </remarks>
        </member>
        <member name="M:Griffin.Data.Mapper.CommandBuilders.SqlServerCommandBuilder.Paging(System.Data.IDbCommand,System.Int32,System.Int32)">
            <summary>
            Uses the SQL Server 2012 syntax (OFFSET/FETCH NEXT)
            </summary>
            <param name="command">command to modify</param>
            <param name="pageNumber">One based index</param>
            <param name="pageSize">Items per page.</param>
        </member>
        <member name="T:Griffin.Data.Mapper.CommandExtensions">
            <summary>
                Extensions for <see cref="T:System.Data.IDbCommand" />.
            </summary>
        </member>
        <member name="M:Griffin.Data.Mapper.CommandExtensions.ApplyConstraints``1(System.Data.IDbCommand,Griffin.Data.Mapper.IEntityMapper{``0},System.Object)">
            <summary>
            Takes an anonymous/dynamic objects and convert it into a WHERE clause using the supplied mapping.
            </summary>
            <typeparam name="TEntity">Type of entity to load, must have an mapper registered in <see cref="T:Griffin.Data.Mapper.EntityMappingProvider"/>.</typeparam>
            <param name="cmd">Command to add parameters to (should end with " WHERE " so that this method can add the constraints properly)</param>
            <param name="mapper">Mapper to use to convert properties to columns</param>
            <param name="constraints">properties in an anonymous object</param>
        </member>
        <member name="M:Griffin.Data.Mapper.CommandExtensions.ApplyQuerySql``1(System.Data.IDbCommand,Griffin.Data.Mapper.IEntityMapper{``0},System.String,System.Object[])">
            <summary>
            Builds a command using query or a short-hand query, and query parameters.
            </summary>
            <typeparam name="TEntity">Type of entity to load, must have an mapper registered in <see cref="T:Griffin.Data.Mapper.EntityMappingProvider"/>.</typeparam>
            <param name="cmd">Command to add parameters to (should end with " WHERE " so that this method can add the constraints properly)</param>
            <param name="mapper">Mapper to use to convert properties to columns</param>
            <param name="sql">Complete (<code>"SELECT * FROM user WHERE id = @id"</code>) or short (<code>"id = @id"</code>).</param>
            <param name="parameters">Anonymous object (<code>new { id = user.Id }</code>), a dictionary or an array of values</param>
            <remarks>
            <para>
            Query 
            </para>
            
            </remarks>
            <example>
            <para>Using complete query, with named arguments</para>
            <code>
            <![CDATA[
            public void GetUser(string id)
            {
                using (var command = connection.CreateCommand())
                {
                    command.ApplyQuerySql("SELECT * FROM Users WHERE Id = @id", new { id = user.Id});
                    return cmd.First<User>();
                }
            }
            ]]>
            </code>
            <para>Using complete query, with array of values</para>
            <code>
            <![CDATA[
            public void GetUser(string id)
            {
                using (var command = connection.CreateCommand())
                {
                    command.ApplyQuerySql("SELECT * FROM Users WHERE Id = @1", user.Id);
                    return cmd.First<User>();
                }
            }
            ]]>
            </code>
            <para>Using short query and named parameters</para>
            <code>
            <![CDATA[
            public void GetUser(string id)
            {
                using (var command = connection.CreateCommand())
                {
                    command.ApplyQuerySql("Age <= @age AND City = @city", new { age = dto.Age, city = dto.City});
                    return cmd.ToList<User>();
                }
            }
            ]]>
            </code>
            <para>Using short query and a value array</para>
            <code>
            <![CDATA[
            public void GetUser(string id)
            {
                using (var command = connection.CreateCommand())
                {
                    command.ApplyQuerySql("Age <= @1 AND City = @2", dto.Age, dto.City);
                    return cmd.First<User>();
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Griffin.Data.Mapper.CommandExtensions.First``1(System.Data.IDbCommand)">
            <summary>
                Fetches the first row from a query, but mapped as an entity.
            </summary>
            <typeparam name="TEntity">Type of entity to use, must have an mapper registered in <see cref="T:Griffin.Data.Mapper.EntityMappingProvider"/>.</typeparam>
            <param name="cmd">Command to invoke <c>ExecuteReader()</c> on.</param>
            <returns>Entity</returns>
            <exception cref="T:Griffin.Data.EntityNotFoundException">Failed to find entity</exception>
            <remarks>
                <para>Use this method when an entity is expected to be returned.</para>
            </remarks>
            <example>
                <code>
            <![CDATA[
            public void GetUser(string id)
            {
                using (var command = connection.CreateCommand())
                {
                    cmd.CommandText = "SELECT * FROM Users WHERE Id = @id";
                    cmd.AddParameter("id", userId);
                    return cmd.First<User>();
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Griffin.Data.Mapper.CommandExtensions.First``1(System.Data.IDbCommand,Griffin.Data.Mapper.IEntityMapper{``0})">
            <summary>
                Fetches the first row from a query, but mapped as an entity.
            </summary>
            <typeparam name="TEntity">Type of entity to use, must have an mapper registered in <see cref="T:Griffin.Data.Mapper.EntityMappingProvider"/>.</typeparam>
            <param name="cmd">Command to invoke <c>ExecuteReader()</c> on.</param>
            <param name="mapper">Mapper which can convert the db row to an entity.</param>
            <returns>Entity</returns>
            <exception cref="T:Griffin.Data.EntityNotFoundException">Failed to find entity</exception>
            <remarks>
                <para>Use this method when an entity is expected to be returned.</para>
            </remarks>
            <example>
                <code>
            <![CDATA[
            public void GetUser(string id)
            {
                using (var command = connection.CreateCommand())
                {
                    cmd.CommandText = "SELECT * FROM Users WHERE Id = @id";
                    cmd.AddParameter("id", userId);
                    return cmd.First<User>(new MyCustomMapper());
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Griffin.Data.Mapper.CommandExtensions.FirstOrDefault``1(System.Data.IDbCommand)">
            <summary>
                Fetches the first row and maps it as an entity (if found).
            </summary>
            <typeparam name="TEntity">Type of entity to use, must have an mapper registered in <see cref="T:Griffin.Data.Mapper.EntityMappingProvider"/>.</typeparam>
            <param name="cmd">Command to invoke <c>ExecuteReader()</c> on.</param>
            <returns>Entity if found; otherwise <c>null</c>.</returns>
            <example>
                <code>
            <![CDATA[
            public void FindUser(string id)
            {
                using (var command = connection.CreateCommand())
                {
                    cmd.CommandText = "SELECT * FROM Users WHERE Id = @id";
                    cmd.AddParameter("id", userId);
                    return cmd.FirstOrDefault<User>();
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Griffin.Data.Mapper.CommandExtensions.FirstOrDefault``1(System.Data.IDbCommand,Griffin.Data.Mapper.IEntityMapper{``0})">
            <summary>
                Fetches the first row and maps it as an entity (if found).
            </summary>
            <typeparam name="TEntity">Type of entity to use, must have an mapper registered in <see cref="T:Griffin.Data.Mapper.EntityMappingProvider"/>.</typeparam>
            <param name="cmd">Command to invoke <c>ExecuteReader()</c> on.</param>
            <param name="mapper">Mapper which can convert the db row to an entity.</param>
            <returns>Entity if found; otherwise <c>null</c>.</returns>
            <example>
                <code>
            <![CDATA[
            public void FindUser(string id)
            {
                using (var command = connection.CreateCommand())
                {
                    cmd.CommandText = "SELECT * FROM Users WHERE Id = @id";
                    cmd.AddParameter("id", userId);
                    return cmd.FirstOrDefault<User>(new MyCustomUserMapper());
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Griffin.Data.Mapper.CommandExtensions.ToEnumerable``1(System.Data.IDbCommand)">
            <summary>
                Return an enumerable which uses lazy loading of each row.
            </summary>
            <typeparam name="TEntity">Type of entity to use, must have an mapper registered in <see cref="T:Griffin.Data.Mapper.EntityMappingProvider"/>.</typeparam>
            <param name="cmd">Command to invoke <c>ExecuteReader()</c> on.</param>
            <returns>Lazy loaded enumerator</returns>
            <remarks>
                <para>
                    The returned enumerator will not map each row until it's requested. To be able to do that the
                    command/datareader is
                    kept open until the enumerator is disposed. Hence it's important that you make sure that the enumerator is
                    disposed when you are
                    done with it.
                </para>
                <para>
                    Hence the different between this method and the <see cref="M:Griffin.Data.Mapper.CommandExtensions.ToList``1(System.Data.IDbCommand)" />
                    method is
                    that this one do not create a list in the memory with all entities. It's therefore perfect if you want to
                    process a large amount
                    of rows.
                </para>
            </remarks>
            <example>
                <code>
            <![CDATA[
            public TimeSpan CalculateWorkHours()
            {
                int minutes = 0;
                using (var command = connection.CreateCommand())
                {
                    cmd.CommandText = "SELECT * FROM Users WHERE Id = @id";
                    cmd.AddParameter("id", userId);
            
                    // can contain a large amount of rows without consuming memory
                    using (var incidents = cmd.ToEnumerable<Incident>())
                    {
                        foreach (var incident in incidents)
                        {
                            if (!incident.IsStarted)
                                continue;
            
                            var spentTime = incident.ReportedTime.Sum(x => x.TotalSpentTime);
                            minutes += spentTime;
                        }
                    }
                }
            
                return TimeSpan.FromMinutes(minutes);
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Griffin.Data.Mapper.CommandExtensions.ToEnumerable``1(System.Data.IDbCommand,System.Boolean)">
            <summary>
                Return an enumerable which uses lazy loading of each row.
            </summary>
            <typeparam name="TEntity">Type of entity to use, must have an mapper registered in <see cref="T:Griffin.Data.Mapper.EntityMappingProvider"/>.</typeparam>
            <param name="cmd">Command to invoke <c>ExecuteReader()</c> on.</param>
            <param name="ownsConnection">
                <c>true</c> if the connection should be disposed together with the command/datareader. See
                remarks.
            </param>
            <returns>Lazy loaded enumerator</returns>
            <remarks>
                <para>
                    The returned enumerator will not map each row until it's requested. To be able to do that the
                    connection/command/datareader is
                    kept open until the enumerator is disposed. Hence it's important that you make sure that the enumerator is
                    disposed when you are
                    done with it.
                </para>
                <para>
                    As the returned item is a custom lazy loaded enumerable it's quite fast as nothing is mapped if you do like:
                </para>
                <example>
                    <code>
            <![CDATA[
            using (var cmd = connection.CreateCommand())
            {
                cmd.CommandText = "SELECT * FROM Users";
                var pagedUsers = cmd.ToEnumerable<User>().Skip(1000).Take(50).ToList();
            }
            ]]>
            </code>
                </example>
                <para>
                    Do note that it will still read all rows and is therefore slower than paging in the SQL server. It will however
                    use a lot less
                    allocations than building a complete list first.
                </para>
                <para>
                    If the result returnd from the query is all records that you want it's probably more effecient to use
                    <see cref="M:Griffin.Data.Mapper.CommandExtensions.ToList``1(System.Data.IDbCommand)" />.
                </para>
            </remarks>
            <example>
                <code>
            <![CDATA[
            public TimeSpan CalculateWorkHours()
            {
                int minutes = 0;
                using (var command = connection.CreateCommand())
                {
                    cmd.CommandText = "SELECT * FROM Users WHERE Id = @id";
                    cmd.AddParameter("id", userId);
            
                    // can contain a large amount of rows without consuming memory
                    using (var incidents = cmd.ToEnumerable<Incident>())
                    {
                        foreach (var incident in incidents)
                        {
                            if (!incident.IsStarted)
                                continue;
            
                            var spentTime = incident.ReportedTime.Sum(x => x.TotalSpentTime);
                            minutes += spentTime;
                        }
                    }
                }
            
                return TimeSpan.FromMinutes(minutes);
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Griffin.Data.Mapper.CommandExtensions.ToEnumerable``1(System.Data.IDbCommand,System.Boolean,Griffin.Data.Mapper.IEntityMapper{``0})">
            <summary>
                Return an enumerable which uses lazy loading of each row.
            </summary>
            <typeparam name="TEntity">Type of entity to use, must have an mapper registered in <see cref="T:Griffin.Data.Mapper.EntityMappingProvider"/>.</typeparam>
            <param name="cmd">Command to invoke <c>ExecuteReader()</c> on.</param>
            <param name="ownsConnection">
                <c>true</c> if the connection should be disposed together with the command/datareader. See
                remarks.
            </param>
            <param name="mapper">Mapper which convert a db row to an entity</param>
            <returns>Lazy loaded enumerator</returns>
            <remarks>
                <para>
                    The returned enumerator will not map each row until it's requested. To be able to do that the
                    connection/command/datareader is
                    kept open until the enumerator is disposed. Hence it's important that you make sure that the enumerator is
                    disposed when you are
                    done with it.
                </para>
                <para>
                    As the returned item is a custom lazy loaded enumerable it's quite fast as nothing is mapped if you do like:
                </para>
                <example>
                    <code>
            <![CDATA[
            using (var cmd = connection.CreateCommand())
            {
                cmd.CommandText = "SELECT * FROM Users";
                var pagedUsers = cmd.ToEnumerable<User>().Skip(1000).Take(50).ToList();
            }
            ]]>
            </code>
                </example>
                <para>
                    Do note that it will still read all rows and is therefore slower than paging in the SQL server. It will however
                    use a lot less
                    allocations than building a complete list first.
                </para>
                <para>
                    If the result returnd from the query is all records that you want it's probably more effecient to use
                    <see cref="M:Griffin.Data.Mapper.CommandExtensions.ToList``1(System.Data.IDbCommand)" />.
                </para>
            </remarks>
            <example>
                <code>
            <![CDATA[
            public TimeSpan CalculateWorkHours()
            {
                int minutes = 0;
                using (var command = connection.CreateCommand())
                {
                    cmd.CommandText = "SELECT * FROM Users WHERE Id = @id";
                    cmd.AddParameter("id", userId);
            
                    // can contain a large amount of rows without consuming memory
                    using (var incidents = cmd.ToEnumerable<Incident>())
                    {
                        foreach (var incident in incidents)
                        {
                            if (!incident.IsStarted)
                                continue;
            
                            var spentTime = incident.ReportedTime.Sum(x => x.TotalSpentTime);
                            minutes += spentTime;
                        }
                    }
                }
            
                return TimeSpan.FromMinutes(minutes);
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Griffin.Data.Mapper.CommandExtensions.ToList``1(System.Data.IDbCommand)">
            <summary>
                Generate a complete list before returning.
            </summary>
            <typeparam name="TEntity">Type of entity to use, must have an mapper registered in <see cref="T:Griffin.Data.Mapper.EntityMappingProvider"/>.</typeparam>
            <param name="cmd">Command to invoke <c>ExecuteReader()</c> on.</param>
            <returns>A collection of entities, or an empty collection if no entities are found.</returns>
            <example>
                <code>
            <![CDATA[
            public void FindByName(string firstName, string lastName)
            {
                using (var command = connection.CreateCommand())
                {
                    cmd.CommandText = "SELECT * FROM Users WHERE ";
                    if (lastName != null)
                    {
                        cmd.AddParameter("firstName", firstName + "%");
                        cmd.CommandText += "FirstName LIKE @firstName AND ";
                    }
                    if (lastName != null)
                    {
                        cmd.AddParameter("lastName", lastName + "%");
                        cmd.CommandText += "LastName LIKE @lastName AND ";
                    }
            
                    cmd.CommandText = cmd.CommandText.Remove(cmd.CommandText.Length - 4, 4);
                    return cmd.ToList<User>();
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Griffin.Data.Mapper.CommandExtensions.ToList``1(System.Data.IDbCommand,Griffin.Data.Mapper.IEntityMapper{``0})">
            <summary>
                Generate a complete list before returning.
            </summary>
            <typeparam name="TEntity">Type of entity to use, must have an mapper registered in <see cref="T:Griffin.Data.Mapper.EntityMappingProvider"/>.</typeparam>
            <param name="cmd">Command to invoke <c>ExecuteReader()</c> on.</param>
            <param name="mapper">Mapper to use when converting the rows to entities</param>
            <returns>A collection of entities, or an empty collection if no entities are found.</returns>
            <example>
                <code>
            <![CDATA[
            public void FindByName(string firstName, string lastName)
            {
                using (var command = connection.CreateCommand())
                {
                    cmd.CommandText = "SELECT * FROM Users WHERE ";
                    if (lastName != null)
                    {
                        cmd.AddParameter("firstName", firstName + "%");
                        cmd.CommandText += "FirstName LIKE @firstName AND ";
                    }
                    if (lastName != null)
                    {
                        cmd.AddParameter("lastName", lastName + "%");
                        cmd.CommandText += "LastName LIKE @lastName AND ";
                    }
            
                    cmd.CommandText = cmd.CommandText.Remove(cmd.CommandText.Length - 4, 4);
                    return cmd.ToList<User>();
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Griffin.Data.Mapper.CommandExtensions.ApplySelectQuery``1(System.Data.IDbCommand,System.String,Griffin.Data.Mapper.IEntityMapper{``0})">
            <summary>
            Add a SELECT query to the command (support for short queries)
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="command">Command to assign the query to (CommandText)</param>
            <param name="query">Complete query (starting with "SELECT") or a short one (just WHERE constraints)</param>
            <param name="mapper">Mapper, used for short queries</param>
        </member>
        <member name="T:Griffin.Data.Mapper.ConnectionExtensions">
            <summary>
            Synchronous connection extensions.
            </summary>
        </member>
        <member name="M:Griffin.Data.Mapper.ConnectionExtensions.FirstOrDefault``1(System.Data.IDbConnection,System.Object)">
            <summary>
                Fetches the first row if found.
            </summary>
            <typeparam name="TEntity">Type of entity to load, must have an mapper registered in <see cref="T:Griffin.Data.Mapper.EntityMappingProvider"/>.</typeparam>
            <param name="connection">Connection to invoke <c>ExecuteReader()</c> on (through a created <c>DbCommand</c>).</param>
            <param name="constraints">dynamic specifying the properties to use. All parameters are joined with "AND" in the resulting SQL query. Any parameter with '%' in the value will be using LIKE instead of '='</param>
            <returns>
                Entity if found; otherwise <c>null</c>.
            </returns>
            <remarks>
                <para>Use this method when an entity is expected to be returned.</para>
            <para>Uses <see cref="T:Griffin.Data.Mapper.EntityMappingProvider"/> to find the correct <c><![CDATA[ICrudEntityMapper<TEntity>]]></c></para>
            </remarks>
            <example>
                <code>
            <![CDATA[
            public User GetUser(int userId)
            {
                return _connection.FirstOrDefault<User>(new { Id = userId });
            }
            ]]>
            </code>
            <para>
            You can also use % for LIKE searches:
            </para>
                <code>
            <![CDATA[
            return _connection.FirstOrDefault<User>(new { FirstName = 'Jon%', LastName = 'Gau%' });
            ]]>
            </code>
            <para>
            Which will translate into "WHERE FirstName LIKE 'Jon%' AND LastName LIKE 'Gau%'"
            </para>
            </example>
        </member>
        <member name="M:Griffin.Data.Mapper.ConnectionExtensions.FirstOrDefault``1(System.Data.IDbConnection,System.String,System.Object[])">
            <summary>
                Fetches the first row if found.
            </summary>
            <typeparam name="TEntity">Type of entity to load, must have an mapper registered in <see cref="T:Griffin.Data.Mapper.EntityMappingProvider"/>.</typeparam>
            <param name="connection">Connection to invoke <c>ExecuteReader()</c> on (through a created <c>DbCommand</c>).</param>
            <param name="query">Query or short query (<c><![CDATA["projectId = @id AND dateCreated < @minDate"]]></c>)</param>
            <param name="parameters">Anonymous object (<c>new { id = dto.ProjectId, @minDate = dto.MinDate }</c>), a dictionary or a value array</param>
            <returns>
                Entity if found; otherwise <c>null</c>.
            </returns>
            <remarks>
                <para>Use this method when an entity is expected to be returned.</para>
            <para>Uses <see cref="T:Griffin.Data.Mapper.EntityMappingProvider"/> to find the correct <c><![CDATA[ICrudEntityMapper<TEntity>]]></c></para>
            </remarks>
            <example>
                <code>
            <![CDATA[
            public User GetUser(int userId)
            {
                return _connection.FirstOrDefault<User>("WHERE age < @Age", new { Age = minAge });
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Griffin.Data.Mapper.ConnectionExtensions.First``1(System.Data.IDbConnection,System.Object)">
            <summary>
            Get an entity.
            </summary>
            <typeparam name="TEntity">Type of entity to load, must have an mapper registered in <see cref="T:Griffin.Data.Mapper.EntityMappingProvider"/>.</typeparam>
            <param name="connection">connection to load entity from</param>
            <param name="constraints">dynamic specifying the properties to use. All parameters are joined with "AND" in the resulting SQL query. Any parameter with '%' in the value will be using LIKE instead of '='</param>
            <returns>Found entity</returns>
            <remarks>
            <para>Uses <see cref="T:Griffin.Data.Mapper.EntityMappingProvider"/> to find the correct <c><![CDATA[ICrudEntityMapper<TEntity>]]></c></para>
            </remarks>
            <example>
                <code>
            <![CDATA[
            public User GetUser(int userId)
            {
                return _connection.First<User>(new { Id = userId });
            }
            ]]>
            </code>
            <para>
            You can also use % for LIKE searches:
            </para>
                <code>
            <![CDATA[
            return _connection.First<User>(new { FirstName = 'Jon%', LastName = 'Gau%' });
            ]]>
            </code>
            <para>
            Which will translate into "WHERE FirstName LIKE 'Jon%' AND LastName LIKE 'Gau%'"
            </para>
            </example>
            <exception cref="T:Griffin.Data.EntityNotFoundException">Failed to find an entity mathing the query</exception>
        </member>
        <member name="M:Griffin.Data.Mapper.ConnectionExtensions.First``1(System.Data.IDbConnection,System.String,System.Object[])">
            <summary>
            Get an entity.
            </summary>
            <typeparam name="TEntity">Type of entity to load, must have an mapper registered in <see cref="T:Griffin.Data.Mapper.EntityMappingProvider"/>.</typeparam>
            <param name="connection">connection to load entity from</param>
            <param name="query">Query or short query (<c><![CDATA["projectId = @id AND dateCreated < @minDate"]]></c>)</param>
            <param name="parameters">Anonymous object (<c>new { id = dto.ProjectId, @minDate = dto.MinDate }</c>), a dictionary or a value array</param>
            <returns>Found entity</returns>
            <remarks>
            <para>Uses <see cref="T:Griffin.Data.Mapper.EntityMappingProvider"/> to find the correct <c><![CDATA[ICrudEntityMapper<TEntity>]]></c></para>
            </remarks>
            <example>
                <code>
            <![CDATA[
            public User GetUser(int userId)
            {
                return _connection.First<User>("WHERE id = @id", new { id = UserId });
            }
            ]]>
            </code>
            <para>
            Which will translate into:
            </para>
            <code>
            command.CommandText = "SELECT * FROM Users WHERE id = @id";
            var p = command.CreateParameter();
            p.Name = "id";
            p.Value = userId;
            command.Parameters.Add(p);
            </code>
            </example>
            <exception cref="T:Griffin.Data.EntityNotFoundException">Failed to find an entity mathing the query</exception>
        </member>
        <member name="M:Griffin.Data.Mapper.ConnectionExtensions.CreateDbCommand(System.Data.IDbConnection)">
            <summary>
            Cast <c>IDbCommand</c> to <c>DbCommand</c> to be able to access the async methods.
            </summary>
            <param name="connection">Connection used as a factory</param>
            <returns>Command</returns>
            <exception cref="T:System.NotSupportedException">The created command cannot be cast to DbCommand.</exception>
        </member>
        <member name="M:Griffin.Data.Mapper.ConnectionExtensions.Truncate``1(System.Data.IDbConnection)">
            <summary>
            Truncate a table (remove all rows)
            </summary>
            <typeparam name="TEntity">Type of entity to use, must have an mapper registered in <see cref="T:Griffin.Data.Mapper.EntityMappingProvider"/>.</typeparam>
            <param name="connection">Connection to create and execute our command on</param>
        </member>
        <member name="M:Griffin.Data.Mapper.ConnectionExtensions.Insert``1(System.Data.IDbConnection,``0)">
            <summary>
            Insert a new row into the database.
            </summary>
            <typeparam name="TEntity">Type of entity to use, must have an mapper registered in <see cref="T:Griffin.Data.Mapper.EntityMappingProvider"/>.</typeparam>
            <param name="connection">Connection create and execute our command on.</param>
            <param name="entity">entity to insert into the database.</param>
            <remarks>
            <para>
            Will assign the PK value to the 
            </para>
            </remarks>
            <example>
            <code>
            var user = new User(10, "Jonas");
            connection.Insert(user);
            </code>
            </example>
        </member>
        <member name="M:Griffin.Data.Mapper.ConnectionExtensions.Update``1(System.Data.IDbConnection,``0)">
            <summary>
            Update an entity
            </summary>
            <typeparam name="TEntity">Type of entity to use, must have an mapper registered in <see cref="T:Griffin.Data.Mapper.EntityMappingProvider"/>.</typeparam>
            <param name="connection">Transaction wrapper</param>
            <param name="entity">Entity to update</param>
            <returns>Task to wait on for completion</returns>
            <example>
            <code>
            var user = connection.First(new { Id = 1 });
            user.State = AccountState.Banned;
            connection.Update(user);
            </code>
            </example>
        </member>
        <member name="M:Griffin.Data.Mapper.ConnectionExtensions.Delete``1(System.Data.IDbConnection,``0)">
            <summary>
            DELETE a row from the table.
            </summary>
            <typeparam name="TEntity">Type of entity to use, must have an mapper registered in <see cref="T:Griffin.Data.Mapper.EntityMappingProvider"/>.</typeparam>
            <param name="connection">Unit of work to execute command in.</param>
            <param name="entity">Uses the primary key column(s), as defined in the mapping, to remove the entry.</param>
            <example>
            <code>
            <![CDATA[
            public void DeleteUser(int userId)
            {
                connection.Delete(new User { Id = userId });
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Griffin.Data.Mapper.ConnectionExtensions.Delete``1(System.Data.IDbConnection,System.Object)">
            <summary>
            DELETE a row from the table.
            </summary>
            <typeparam name="TEntity">Type of entity to use, must have an mapper registered in <see cref="T:Griffin.Data.Mapper.EntityMappingProvider"/>.</typeparam>
            <param name="connection">Unit of work to execute command in.</param>
            <param name="constraints"><c>dynamic</c> specifying the properties to use. All parameters are joined with "AND" in the resulting SQL query. Any parameter with '%' in the value will be using LIKE instead of '='</param>
            <example>
            <code>
            <![CDATA[
            public void DeleteUser(int userId)
            {
                connection.Delete(new { Id = userId });
            }
            ]]>
            </code>
            <para>Alternative syntax:</para>
            <code>
            <![CDATA[
            public void DeleteUser(SomeDTO dto)
            {
                connection.Delete(new { dto.Id });
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Griffin.Data.Mapper.ConnectionExtensions.ExecuteNonQuery(System.Data.IDbConnection,System.String,System.Object)">
            <summary>
            Execute a query directly
            </summary>
            <param name="connection">Connection to execute query on</param>
            <param name="sql">sql query</param>
            <param name="parameters">parameters used in the query</param>
            <remarks>
            <para>Do note that the query must be using table column names and not class properties. No mapping is being made.</para>
            <para><c>null</c> is automatically replaced by <c>DBNull.Value</c> for the parameters</para>
            </remarks>
            <example>
            <code>
            public void Execute(IDbConnection connection)
            {
                connection.ExecuteNonQuery("UPDATE Users SET Discount = Discount + 10 WHERE OrganizationId = @orgId", new { orgId = 10});
            </code>
            </example>
        </member>
        <member name="M:Griffin.Data.Mapper.ConnectionExtensions.ToEnumerable``1(System.Data.IDbConnection,System.String,System.Object[])">
            <summary>
                Return an enumerable which uses lazy loading of each row (you must close the connection once done).
            </summary>
            <typeparam name="TEntity">Type of entity to map</typeparam>
            <param name="connection">Connection to invoke <c>ExecuteReader()</c> on (through a created <c>DbCommand</c>).</param>
            <param name="query">Query or short query (<c><![CDATA["projectId = @id AND dateCreated < @minDate"]]></c>)</param>
            <param name="parameters">Anonymous object (<c>new { id = dto.ProjectId, @minDate = dto.MinDate }</c>), a dictionary or a value array</param>
            <returns>Lazy loaded enumerator</returns>
            <remarks>
                <para>
                    For more information about the "query" and "parameters" arguments, see <see cref="M:Griffin.Data.Mapper.CommandExtensions.ApplyQuerySql``1(System.Data.IDbCommand,System.String,System.Object[])"/>.
                </para>
                <para>
                    The returned enumerator will not map each row until it's requested. To be able to do that the
                    connection/command/datareader is
                    kept open until the enumerator is disposed. Hence it's important that you make sure that the enumerator is
                    disposed when you are
                    done with it.
                </para>
                <para>Uses <see cref="T:Griffin.Data.Mapper.EntityMappingProvider" /> to find the correct <c><![CDATA[IEntityMapper<TEntity>]]></c>.</para>
            </remarks>
            <example>
            <code>
            // All these examples are valid:
            <![CDATA[
            var users = connection.ToEnumerable<User>("Age < 10");
            var users = connection.ToEnumerable<User>("SELECT * FROM Users WHERE Age = 37");
            var users = connection.ToEnumerable<User>("FirstName = @name", new { name = user.FirstName });
            var users = connection.ToEnumerable<User>("FirstName = @1 AND Age < @2", 'A%', 35);
            var users = connection.ToEnumerable<User>("SELECT * FROM Users WHERE Age = @age LIMIT 1, 10", new { age = submittedAge });
            var users = connection.ToEnumerable<User>("SELECT * FROM Users WHERE Age = @1 LIMIT 1, 10", user.FirstName);
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Griffin.Data.Mapper.ConnectionExtensions.ToEnumerable``1(System.Data.IDbConnection,System.Boolean,System.String,System.Object[])">
            <summary>
                Return an enumerable which uses lazy loading of each row.
            </summary>
            <typeparam name="TEntity">Type of entity to map</typeparam>
            <param name="connection">Connection to invoke <c>ExecuteReader()</c> on (through a created <c>DbCommand</c>).</param>
            <param name="ownsConnection">
                <c>true</c> if the connection should be disposed together with the command/datareader. See
                remarks.
            </param>
            <param name="query">Query or short query (<c>"id = @1"</c>)</param>
            <param name="parameters"></param>
            <returns>Lazy loaded enumerator</returns>
            <remarks>
                <para>
                    For more information about the "query" and "parameters" arguments, see <see cref="M:Griffin.Data.Mapper.CommandExtensions.ApplyQuerySql``1(System.Data.IDbCommand,System.String,System.Object[])"/>.
                </para>
                <para>
                    The returned enumerator will not map each row until it's requested. To be able to do that the
                    connection/command/datareader is
                    kept open until the enumerator is disposed. Hence it's important that you make sure that the enumerator is
                    disposed when you are
                    done with it.
                </para>
                <para>Uses <see cref="T:Griffin.Data.Mapper.EntityMappingProvider" /> to find the correct <c><![CDATA[IEntityMapper<TEntity>]]></c>.</para>
            </remarks>
            <example>
            <code>
            // All these examples are valid:
            <![CDATA[
            var users = connection.ToEnumerable<User>(true, "Age < 10");
            var users = connection.ToEnumerable<User>(true, "SELECT * FROM Users WHERE Age = 37");
            var users = connection.ToEnumerable<User>(true, "FirstName = @name", new { name = user.FirstName });
            var users = connection.ToEnumerable<User>(true, "FirstName = @1 AND Age < @2", 'A%', 35);
            var users = connection.ToEnumerable<User>(true, "SELECT * FROM Users WHERE Age = @age LIMIT 1, 10", new { age = submittedAge });
            var users = connection.ToEnumerable<User>(true, "SELECT * FROM Users WHERE Age = @1 LIMIT 1, 10", user.FirstName);
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Griffin.Data.Mapper.ConnectionExtensions.ToEnumerable``1(System.Data.IDbConnection,System.Boolean,Griffin.Data.Mapper.ICrudEntityMapper{``0},System.String,System.Object[])">
            <summary>
                Return an enumerable which uses lazy loading of each row.
            </summary>
            <typeparam name="TEntity">Type of entity to map</typeparam>
            <param name="connection">Connection to invoke <c>ExecuteReader()</c> on (through a created <c>DbCommand</c>).</param>
            <param name="ownsConnection">
                <c>true</c> if the connection should be disposed together with the command/datareader. See
                remarks.
            </param>
            <param name="mapping">Mapping used when translating table rows to .NET classes.</param>
            <param name="query">Query or short query (<c><![CDATA["projectId = @id AND dateCreated < @minDate"]]></c>)</param>
            <param name="parameters">Anonymous object (<c>new { id = dto.ProjectId, @minDate = dto.MinDate }</c>), a dictionary or a value array</param>
            <returns>Lazy loaded enumerator</returns>
            <remarks>
                <para>
                    For more information about the "query" and "parameters" arguments, see <see cref="M:Griffin.Data.Mapper.CommandExtensions.ApplyQuerySql``1(System.Data.IDbCommand,System.String,System.Object[])"/>.
                </para>
                <para>
                    The returned enumerator will not map each row until it's requested. To be able to do that the
                    connection/command/datareader is
                    kept open until the enumerator is disposed. Hence it's important that you make sure that the enumerator is
                    disposed when you are
                    done with it.
                </para>
                <para>Uses <see cref="T:Griffin.Data.Mapper.EntityMappingProvider" /> to find the correct <c><![CDATA[IEntityMapper<TEntity>]]></c>.</para>
            </remarks>
            <example>
            <code>
            // All these examples are valid:
            <![CDATA[
            var users = connection.ToEnumerable<User>(true, new CustomUserMapping(), "Age < 10");
            var users = connection.ToEnumerable<User>(true, new CustomUserMapping(), "SELECT * FROM Users WHERE Age = 37");
            var users = connection.ToEnumerable<User>(true, new CustomUserMapping(), "FirstName = @name", new { name = user.FirstName });
            var users = connection.ToEnumerable<User>(true, new CustomUserMapping(), "FirstName = @1 AND Age < @2", 'A%', 35);
            var users = connection.ToEnumerable<User>(true, new CustomUserMapping(), "SELECT * FROM Users WHERE Age = @age LIMIT 1, 10", new { age = submittedAge });
            var users = connection.ToEnumerable<User>(true, new CustomUserMapping(), "SELECT * FROM Users WHERE Age = @1 LIMIT 1, 10", user.FirstName);
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Griffin.Data.Mapper.ConnectionExtensions.ToList``1(System.Data.IDbConnection,System.String,System.Object[])">
            <summary>
                Generate a complete list before returning.
            </summary>
            <typeparam name="TEntity">Type of entity to map</typeparam>
            <param name="connection">Connection to invoke <c>ExecuteReader()</c> on (through a created <c>DbCommand</c>).</param>
            <param name="query">Query or short query (<c><![CDATA["projectId = @id AND dateCreated < @minDate"]]></c>)</param>
            <param name="parameters">Anonymous object (<c>new { id = dto.ProjectId, @minDate = dto.MinDate }</c>), a dictionary or a value array</param>
            <returns>A list.</returns>
            <remarks>
                <para>
                    For more information about the "query" and "parameters" arguments, see <see cref="M:Griffin.Data.Mapper.CommandExtensions.ApplyQuerySql``1(System.Data.IDbCommand,System.String,System.Object[])"/>.
                </para>
                <para>
                    The returned enumerator will not map each row until it's requested. To be able to do that the
                    connection/command/datareader is
                    kept open until the enumerator is disposed. Hence it's important that you make sure that the enumerator is
                    disposed when you are
                    done with it.
                </para>
                <para>Uses <see cref="T:Griffin.Data.Mapper.EntityMappingProvider" /> to find the correct <c><![CDATA[ICrudEntityMapper<TEntity>]]></c>.</para>
            </remarks>
            <example>
            <code>
            // All these examples are valid:
            <![CDATA[
            var users = connection.ToList<User>("Age < 10");
            var users = connection.ToList<User>("SELECT * FROM Users WHERE Age = 37");
            var users = connection.ToList<User>("FirstName = @name", new { name = user.FirstName });
            var users = connection.ToList<User>("FirstName = @1 AND Age < @2", 'A%', 35);
            var users = connection.ToList<User>("SELECT * FROM Users WHERE Age = @age LIMIT 1, 10", new { age = submittedAge });
            var users = connection.ToList<User>("SELECT * FROM Users WHERE Age = @1 LIMIT 1, 10", user.FirstName);
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Griffin.Data.Mapper.ConnectionExtensions.ToList``1(System.Data.IDbConnection,Griffin.Data.Mapper.ICrudEntityMapper{``0},System.String,System.Object[])">
            <summary>
                Generate a complete list before returning.
            </summary>
            <typeparam name="TEntity">Type of entity to map</typeparam>
            <param name="connection">Connection to invoke <c>ExecuteReader()</c> on (through a created <c>DbCommand</c>).</param>
            <param name="mapping">Mapping used to translate from db table rows to .NET object</param>
            <param name="query">Query or short query (<c><![CDATA["projectId = @id AND dateCreated < @minDate"]]></c>)</param>
            <param name="parameters">Anonymous object (<c>new { id = dto.ProjectId, @minDate = dto.MinDate }</c>), a dictionary or a value array</param>
            <returns>A list.</returns>
            <remarks>
                <para>
                    For more information about the "query" and "parameters" arguments, see <see cref="M:Griffin.Data.Mapper.CommandExtensions.ApplyQuerySql``1(System.Data.IDbCommand,System.String,System.Object[])"/>.
                </para>
                <para>
                    The returned enumerator will not map each row until it's requested. To be able to do that the
                    connection/command/datareader is
                    kept open until the enumerator is disposed. Hence it's important that you make sure that the enumerator is
                    disposed when you are
                    done with it.
                </para>
                <para>Uses <see cref="T:Griffin.Data.Mapper.EntityMappingProvider" /> to find the correct <c><![CDATA[IEntityMapper<TEntity>]]></c>.</para>
            </remarks>
            <example>
            <code>
            // All these examples are valid:
            <![CDATA[
            var users = connection.ToList<User>("Age < 10");
            var users = connection.ToList<User>("SELECT * FROM Users WHERE Age = 37");
            var users = connection.ToList<User>("FirstName = @name", new { name = user.FirstName });
            var users = connection.ToList<User>("FirstName = @1 AND Age < @2", 'A%', 35);
            var users = connection.ToList<User>("SELECT * FROM Users WHERE Age = @age LIMIT 1, 10", new { age = submittedAge });
            var users = connection.ToList<User>("SELECT * FROM Users WHERE Age = @1 LIMIT 1, 10", user.FirstName);
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Griffin.Data.Mapper.ConnectionExtensions.ToList``1(System.Data.IDbConnection,Griffin.Data.Mapper.IEntityMapper{``0},System.String,System.Object[])">
            <summary>
                Generate a complete list before returning.
            </summary>
            <typeparam name="TEntity">Type of entity to map</typeparam>
            <param name="connection">Connection to invoke <c>ExecuteReader()</c> on (through a created <c>DbCommand</c>).</param>
            <param name="mapping">Mapping used to translate from db table rows to .NET object</param>
            <param name="query">Query</param>
            <param name="parameters">Anonymous object (<c>new { id = dto.ProjectId, @minDate = dto.MinDate }</c>), a dictionary or a value array</param>
            <returns>A list.</returns>
            <remarks>
                <para>
                    For more information about the "query" and "parameters" arguments, see <see cref="M:Griffin.Data.Mapper.CommandExtensions.ApplyQuerySql``1(System.Data.IDbCommand,System.String,System.Object[])"/>.
                </para>
                <para>
                    The returned enumerator will not map each row until it's requested. To be able to do that the
                    connection/command/datareader is
                    kept open until the enumerator is disposed. Hence it's important that you make sure that the enumerator is
                    disposed when you are
                    done with it.
                </para>
                <para>Uses <see cref="T:Griffin.Data.Mapper.EntityMappingProvider" /> to find the correct <c><![CDATA[IEntityMapper<TEntity>]]></c>.</para>
            </remarks>
            <example>
            <code>
            // All these examples are valid:
            <![CDATA[
            var users = connection.ToList<User>("SELECT * FROM Users WHERE Age = 37");
            var users = connection.ToList<User>("SELECT * FROM Users WHERE FirstName = @name", new { name = user.FirstName });
            var users = connection.ToList<User>("SELECT * FROM Users WHERE FirstName = @1 AND Age < @2", 'A%', 35);
            ]]>
            </code>
            </example>
        </member>
        <member name="T:Griffin.Data.Mapper.CrudEntityMapper`1">
            <summary>
                Uses reflection to map entities.
            </summary>
            <typeparam name="TEntity">Type of entity (i.e. class that somewhat corresponds to a table)</typeparam>
            <remarks>
                <para>
                    This mapper is conventional based. If there is a column named <c>"Id"</c> this mapper will assume that that is
                    the primary key. If you do not have
                    an <c>"Id"</c> id column you need to inherit this class and override the <c>Configure</c> method:
                </para>
                <code>
            <![CDATA[
            public class UserMapping : CrudEntityMapper<User>
            {
                public override void Configure(IDictionary<string, PropertyMapping> mappings)
                {
                    base.Configure(mappings);
            
                    mappings["YourCustomKey"].IsPrimaryKey = true;
                }
            }
            ]]>
            </code>
                <para>
                    All mappers must have a parameterless constructor, but you can set it as non-public if you do not want to
                    expose
                    it.
                </para>
                <para>
                </para>
            </remarks>
            <example>
                <para>
                    You can just create an empty class like below if there is an one-one mapping between the table and your entity
                    class. It will
                    automatically be
                    picked up by the <see cref="T:Griffin.Data.Mapper.AssemblyScanningMappingProvider" />.
                </para>
                <code>
            <![CDATA[
            public class UserMapping : CrudEntityMapper<User>
            {
            }
            ]]>
            </code>
                <para>You can also customize the mappings</para>
                <code>
            <![CDATA[
            public class UserMapping : CrudEntityMapper<User>
            {
                public override void Configure(IDictionary<string, PropertyMapping> mappings)
                {
                    base.Configure(mappings);
            
                    // Id is per default set to primary key, but any other name must be configured
                    // you can set multiple properties as a key too (composite key)
                    mappings["Id"].IsPrimaryKey = true;
            
                    // UserId is of the column type "uniqueidentifier" in the DB and of "string" type for our property.
                    mappings["UserId"].ColumnToPropertyAdapter = value => value.ToString();
                    mappings["UserId"].PropertyToColumnAdapter = value => Guid.Parse(string)value);
                }
            }
            ]]>
            </code>
                <para>Look at the <see cref="M:Griffin.Data.Mapper.EntityMapper`1.Configure(System.Collections.Generic.IDictionary{System.String,Griffin.Data.Mapper.Values.IPropertyMapping})" /> documentation for more examples.</para>
            </example>
        </member>
        <member name="M:Griffin.Data.Mapper.CrudEntityMapper`1.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Griffin.Data.Mapper.CrudEntityMapper`1" /> class.
            </summary>
            <param name="tableName">Name of the table.</param>
        </member>
        <member name="P:Griffin.Data.Mapper.CrudEntityMapper`1.TableName">
            <summary>
                Gets table name
            </summary>
        </member>
        <member name="M:Griffin.Data.Mapper.CrudEntityMapper`1.Griffin#Data#Mapper#IEntityMapper#Map(System.Data.IDataRecord,System.Object)">
            <summary>
                Map a record to the specified entity
            </summary>
            <param name="source">Record from the DB</param>
            <param name="destination">Entity to fill with information</param>
        </member>
        <member name="M:Griffin.Data.Mapper.CrudEntityMapper`1.Freeze">
            <summary>
                Free the mapping, no further changes may be made.
            </summary>
            <remarks>
                <para>Called by the mapping provider when the mapping have been added to it.</para>
                <para>
                    The purpose is to allow the mapping implementations to do post process once the mappings have been fully
                    configured. 
                </para>
            </remarks>
        </member>
        <member name="M:Griffin.Data.Mapper.CrudEntityMapper`1.GetKeys(System.Object)">
            <summary>
                Get the primary key
            </summary>
            <param name="entity">entity to fetch key values from.</param>
            <returns>A single item in the array for a single PK column and one entry per column in composite primary key</returns>
        </member>
        <member name="P:Griffin.Data.Mapper.CrudEntityMapper`1.CommandBuilder">
            <summary>
                Used to create SQL commands which is specific for this entity.
            </summary>
            <remarks>
                <para>
                    The recommended approach for implementations is to retrieve the command builder from
                    <see cref="T:Griffin.Data.Mapper.CommandBuilders.CommandBuilderFactory" /> when the <c>Freeze()</c> method is being invoked.
                    By doing so it's easy to adapt and precompile the command strings and logic before any invocations is made.
                </para>
            </remarks>
        </member>
        <member name="T:Griffin.Data.Mapper.DateTimeExtensions">
            <summary>
            Some databases do not support DateTime columns. For them we can instead store an unix time integer. These extensions handles the conversions for us.
            </summary>
        </member>
        <member name="F:Griffin.Data.Mapper.DateTimeExtensions.UnixDate">
            <summary>
            Unix epoch time
            </summary>
        </member>
        <member name="M:Griffin.Data.Mapper.DateTimeExtensions.TruncateMilliseconds(System.DateTime)">
            <summary>
            Will remove milliseconds from the the date tiime
            </summary>
            <param name="source">Time with milliseconds.</param>
            <returns>Date/Time without ms</returns>
        </member>
        <member name="M:Griffin.Data.Mapper.DateTimeExtensions.ToUnixTime(System.DateTime)">
            <summary>
            Convert a date to unix epoch
            </summary>
            <param name="dateUtc">MUST be in UTC. Either use <c>DateTime.UtcNow</c> or convert the local time to UTC time.</param>
            <returns>Seconds from 1970-01-01</returns>
        </member>
        <member name="M:Griffin.Data.Mapper.DateTimeExtensions.FromUnixTime(System.Double)">
            <summary>
            Convert unix time to a DateTime struct
            </summary>
            <param name="unixTime">Seconds from 1970-01-01</param>
            <returns>Date/time in UTC time zone</returns>
        </member>
        <member name="M:Griffin.Data.Mapper.DateTimeExtensions.FromUnixTime(System.Int32)">
            <summary>
            Convert unix time to a DateTime struct
            </summary>
            <param name="unixTime">Seconds from 1970-01-01</param>
            <returns>Date/time in UTC time zone</returns>
        </member>
        <member name="T:Griffin.Data.Mapper.EntityMapper`1">
            <summary>
                Used to map a <see cref="T:System.Data.IDataRecord" /> to an entity.
            </summary>
            <remarks>
                <para>Just hides the non generic methods from the public contract.</para>
            </remarks>
        </member>
        <member name="M:Griffin.Data.Mapper.EntityMapper`1.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Griffin.Data.Mapper.EntityMapper`1" /> class.
            </summary>
        </member>
        <member name="P:Griffin.Data.Mapper.EntityMapper`1.Properties">
            <summary>
                All properties in this mapping
            </summary>
        </member>
        <member name="M:Griffin.Data.Mapper.EntityMapper`1.Griffin#Data#Mapper#IEntityMapper#Create(System.Data.IDataRecord)">
            <summary>
                Create a new entity for the specified
            </summary>
            <param name="record">Data record that we are going to map</param>
            <returns>Created entity</returns>
            <remarks>
                <para>
                    The provided record should only be used if there are constructor arguments.
                </para>
            </remarks>
        </member>
        <member name="M:Griffin.Data.Mapper.EntityMapper`1.Create(System.Data.IDataRecord)">
            <summary>
                Create a new entity for the specified
            </summary>
            <param name="record">Data record that we are going to map</param>
            <returns>Created entity</returns>
            <remarks>
                <para>
                    The provided record should only be used if there are constructor arguments.
                </para>
            </remarks>
        </member>
        <member name="M:Griffin.Data.Mapper.EntityMapper`1.Griffin#Data#Mapper#IEntityMapper#Map(System.Data.IDataRecord,System.Object)">
            <summary>
                Map a record to the specified entity
            </summary>
            <param name="source">Record from the DB</param>
            <param name="destination">Entity to fill with information</param>
        </member>
        <member name="M:Griffin.Data.Mapper.EntityMapper`1.Map(System.Data.IDataRecord,`0)">
            <summary>
                Map a record to the specified entity
            </summary>
            <param name="source">Record from the DB</param>
            <param name="destination">Entity to fill with information</param>
        </member>
        <member name="M:Griffin.Data.Mapper.EntityMapper`1.Configure(System.Collections.Generic.IDictionary{System.String,Griffin.Data.Mapper.Values.IPropertyMapping})">
            <summary>
                Used to map all properties which should be read from the database record.
            </summary>
            <param name="mappings">Dictionary which should be filled with all mappings</param>
            <remarks>
                <para>
                    Will scan all properties and assign them a mapping, even if the setters are non-public. If no setter is
                    available
                    it will try to finding a field using the name convention where <c>FirstName</c> becomes <c>_firstName</c>.
                </para>
            </remarks>
            <example>
                <para>If you want to remove a property:</para>
                <code>
            <![CDATA[
            public override void Configure(IDictionary<string, PropertyMapping> mappings)
            {
                base.Configure(mappings);
                mappings.Remove("CreatedAt");
            }
            ]]>
            </code>
                <para>Example if the column type is <c>uniqueidentifier</c> and the property type is string:</para>
                <code>
            <![CDATA[
            public override void Configure(IDictionary<string, PropertyMapping> mappings)
            {
                base.Configure(mappings);
                mappings["Id"].ColumnToPropertyAdapter = value => value.ToString();
            }
            ]]>
            </code>
                <para>If you have stored a child aggregate as a JSON string in a column</para>
                <code>
            <![CDATA[
            public override void Configure(IDictionary<string, PropertyMapping> mappings)
            {
                base.Configure(mappings);
                mappings["AuditLog"].ColumnToPropertyAdapter = value => JsonConvert.ToObject<IEnumerable<AuditEntry>>(value.ToString());
            }
            ]]>
            </code>
                <para>To convert an int column in the db to an enum</para>
                <code>
            <![CDATA[
            public override void Configure(IDictionary<string, PropertyMapping> mappings)
            {
                base.Configure(mappings);
                mappings["State"].ColumnToPropertyAdapter = value => (UserState)value;
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Griffin.Data.Mapper.EntityMapper`1.CreateInstanceFactory">
            <summary>
                Generate a delegate which can create the entity blasingly fast (compared to <c>Activator.CreateInstance()</c>).
            </summary>
            <returns></returns>
            <exception cref="T:Griffin.Data.Mapper.MappingException">
                Failed to find a default constructor for ' + typeof
                (TEntity).FullName + '.
            </exception>
        </member>
        <member name="M:Griffin.Data.Mapper.EntityMapper`1.Property``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
                Fluent syntax for defining a property mapping. Use in the constructor.
            </summary>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <param name="propertyExpression">The property expression.</param>
            <returns>mapping to configure.</returns>
        </member>
        <member name="T:Griffin.Data.Mapper.EntityMappingProvider">
            <summary>
                Facade for the current <see cref="T:Griffin.Data.Mapper.IMappingProvider" /> implementation.
            </summary>
            <remarks>
                <para>
                    This facade exists so that no code needs to be refactored if the mapping provider is replace with another
                    one.
                </para>
                <para>
                    The <see cref="T:Griffin.Data.Mapper.AssemblyScanningMappingProvider" /> is used per default (if no other provider is assigned). It
                    is lazy loaded so that
                    all assemblies have a chance to be loaded before it scans all assemblies in the current appdomain.
                </para>
            </remarks>
        </member>
        <member name="P:Griffin.Data.Mapper.EntityMappingProvider.Provider">
            <summary>
                Provider to use.
            </summary>
            <value>
                Default is <see cref="T:Griffin.Data.Mapper.AssemblyScanningMappingProvider" />. Read the class remarks for more information.
            </value>
        </member>
        <member name="P:Griffin.Data.Mapper.EntityMappingProvider.UseAutoMappers">
            <summary>
            Add mappers which take for granted that table columns match class properties  (in names and count)
            </summary>
        </member>
        <member name="M:Griffin.Data.Mapper.EntityMappingProvider.GetEntityMapper``1">
            <summary>
                Get a mapper.
            </summary>
            <typeparam name="TEntity">Type of entity to get a mapper for.</typeparam>
            <exception cref="T:Griffin.Data.Mapper.MappingNotFoundException">Did not find a mapper for the specified entity.</exception>
            <returns></returns>
        </member>
        <member name="M:Griffin.Data.Mapper.EntityMappingProvider.GetCrudMapper``1">
            <summary>
                Get a mapper.
            </summary>
            <typeparam name="TEntity">Type of entity to get a mapper for.</typeparam>
            <exception cref="T:Griffin.Data.Mapper.MappingNotFoundException">Did not find a mapper for the specified entity.</exception>
            <returns></returns>
        </member>
        <member name="M:Griffin.Data.Mapper.EntityMappingProvider.GetBaseMapper``1">
            <summary>
                Get a mapper.
            </summary>
            <typeparam name="TEntity">Type of entity to get a mapper for.</typeparam>
            <exception cref="T:Griffin.Data.Mapper.MappingNotFoundException">Did not find a mapper for the specified entity.</exception>
            <returns></returns>
        </member>
        <member name="T:Griffin.Data.Mapper.FluentPropertyMapping`2">
            <summary>
                Used by <see cref="T:Griffin.Data.Mapper.EntityMapper`1" />
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <typeparam name="TPropertyType">Property type.</typeparam>
        </member>
        <member name="M:Griffin.Data.Mapper.FluentPropertyMapping`2.#ctor(Griffin.Data.Mapper.Values.PropertyMapping{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.Data.Mapper.FluentPropertyMapping`2" /> class.
            </summary>
            <param name="inner">Actual mapping object.</param>
            <exception cref="T:System.ArgumentNullException">inner</exception>
        </member>
        <member name="M:Griffin.Data.Mapper.FluentPropertyMapping`2.ColumnName(System.String)">
            <summary>
            Use if the column name differs from the property name
            </summary>
            <param name="columnName">Name of the column.</param>
            <returns>this</returns>
            <exception cref="T:System.ArgumentNullException">columnName</exception>
        </member>
        <member name="M:Griffin.Data.Mapper.FluentPropertyMapping`2.NotForQueries">
            <summary>
            Do not update property with the column value.
            </summary>
            <returns>this</returns>
        </member>
        <member name="M:Griffin.Data.Mapper.FluentPropertyMapping`2.NotForCrud">
            <summary>
            Do not write this property to the table.
            </summary>
            <returns>this</returns>
        </member>
        <member name="M:Griffin.Data.Mapper.FluentPropertyMapping`2.Ignore">
            <summary>
            Do not map this propery.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Griffin.Data.Mapper.FluentPropertyMapping`2.PrimaryKey">
            <summary>
            Primary key (composite keys are supported).
            </summary>
            <returns>this</returns>
        </member>
        <member name="M:Griffin.Data.Mapper.FluentPropertyMapping`2.PrimaryKey(System.Boolean)">
            <summary>
            Primary key (composite keys are supported).
            </summary>
            <param name="isAutoIncremented">Specified as a auto incremented (identity) field. i.e. the DB generates the value, do not specify the field in INSERT statements.</param>
            <returns>this</returns>
        </member>
        <member name="M:Griffin.Data.Mapper.FluentPropertyMapping`2.Nullable(`1)">
            <summary>
            Used to define the value that should be interpreted as null in the translation between a property and a column value.
            </summary>
            <param name="nullValue">For value types. Set the column to null if this value is specified in the property</param>
            <returns>this</returns>
        </member>
        <member name="M:Griffin.Data.Mapper.FluentPropertyMapping`2.Nullable">
            <summary>
            Used to define the value that should be interpreted as null in the translation between a property and a column value.
            </summary>
            <returns>this</returns>
        </member>
        <member name="M:Griffin.Data.Mapper.FluentPropertyMapping`2.ToColumnValue(System.Func{`1,System.Object})">
            <summary>
            Use if the column type differs from the property type.
            </summary>
            <param name="fromPropertyConverter">From property converter.</param>
            <returns>this</returns>
            <exception cref="T:System.ArgumentNullException">fromPropertyConverter</exception>
            <remarks>
            <para>
            Used in CRUD statements
            </para>
            </remarks>
        </member>
        <member name="M:Griffin.Data.Mapper.FluentPropertyMapping`2.ToColumnValue2(Griffin.Data.Mapper.Values.PropertyToColumnValueHandler{`0})">
            <summary>
            Use if the column type differs from the property type.
            </summary>
            <param name="fromPropertyConverter">From property converter.</param>
            <returns>this</returns>
            <exception cref="T:System.ArgumentNullException">fromPropertyConverter</exception>
            <remarks>
            <para>
            Used in CRUD statements
            </para>
            </remarks>
        </member>
        <member name="M:Griffin.Data.Mapper.FluentPropertyMapping`2.ToPropertyValue(System.Func{System.Object,`1})">
            <summary>
            Use if the property type differs from the column type.
            </summary>
            <param name="fromColumnConverter">From column converter.</param>
            <returns>this</returns>
            <exception cref="T:System.ArgumentNullException">fromColumnConverter</exception>
            <remarks>
            <para>
            Used in <code>SELECT</code> statements.
            </para>
            </remarks>
        </member>
        <member name="M:Griffin.Data.Mapper.FluentPropertyMapping`2.ToPropertyValue2(Griffin.Data.Mapper.Values.ColumnToPropertyValueHandler)">
            <summary>
            Use if the property type differs from the column type.
            </summary>
            <param name="adapter">From column converter.</param>
            <returns>this</returns>
            <exception cref="T:System.ArgumentNullException">fromColumnConverter</exception>
            <remarks>
            <para>
            Used in <code>SELECT</code> statements.
            </para>
            </remarks>
        </member>
        <member name="T:Griffin.Data.Mapper.ICrudEntityMapper">
            <summary>
            Maps a table column to a .NET entity (to support CRUD operations).
            </summary>
            <remarks>
            <para>
            Important! The implementations of this interface should be considered to be singletons. Hence any state in them
            must be thread safe. The same instance can be used to map multiple entities at the same time.
            </para>
            <para>
            You have to decorate class that implement this interface with the <see cref="T:Griffin.Data.Mapper.MappingForAttribute"/> to tell the scanner
            which entity the class is a mapping for.
            </para>
            </remarks>
            <example>
            <code>
            <![CDATA[
            [MappingFor(typeof(User))
            class UserMapper : ICrudEntityMapper<User>
            {
                public object Create(IDataRecord source)
                {
                    return new User();
                }
            
                public void Map(IDataRecord source, object destination)
                {
                    var user = (User)destination;
                    user.Id = source["Id"].ToString();
                    user.Age = (int)source["Age"];
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Griffin.Data.Mapper.ICrudEntityMapper.Freeze">
            <summary>
            Free the mapping, no further changes may be made.
            </summary>
            <remarks>
            <para>Called by the mapping provider when it's being added to it.</para>
            </remarks>
        </member>
        <member name="P:Griffin.Data.Mapper.ICrudEntityMapper.TableName">
            <summary>
            Gets table name
            </summary>
        </member>
        <member name="P:Griffin.Data.Mapper.ICrudEntityMapper.Properties">
            <summary>
            All properties in this mapping
            </summary>
        </member>
        <member name="M:Griffin.Data.Mapper.ICrudEntityMapper.GetKeys(System.Object)">
            <summary>
            Get the primary key 
            </summary>
            <param name="entity">Entity to fetch key values from</param>
            <returns>A single item in the array for a single PK column and one entry per column in composite primary key. The key value pair contains the key name and the DTO value for that key.</returns>
            <example>
            <para>If you have a single primary key (like an auto incremented column)</para>
            <code>
            <![CDATA[
            var user = new User { Id = 24, Name = "Jonas" };
            var mapping = new EntityMapping<User>();
            var pk = mapping.GetKeys(user);
            
            Console.WriteLine(pk[0].Name + " = " + pk[0].Value); // prints "Id = 24"
            ]]>
            </code>
            <para>
            A composite key:
            </para>
            <code>
            <![CDATA[
            var address = new UserAddress{ UserId = 24, ZipCode  = "1234", City = "Falun" };
            var mapping = new EntityMapping<UserAddress>();
            var pk = mapping.GetKeys(address);
            
            Console.WriteLine(pk[0].Value + ", " + pk[1].Value); // prints "24, 1234"
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Griffin.Data.Mapper.ICrudEntityMapper.CommandBuilder">
            <summary>
            Used to create SQL commands which is specific for this entity.
            </summary>
            <remarks>
            <para>The recommended approach for implementations is to retrieve the command builder from <see cref="T:Griffin.Data.Mapper.CommandBuilders.CommandBuilderFactory"/> when the <c>Freeze()</c> method is being invoked.
            By doing so it's easy to adapt and precompile the command strings and logic before any invocations is made.
            </para>
            </remarks>
        </member>
        <member name="T:Griffin.Data.Mapper.ICrudEntityMapper`1">
            <summary>
            Generic version of the mapping method to make it easier to do mappings manually.
            </summary>
            <typeparam name="TEntity">Type of entity</typeparam>
            <remarks>
            <para>
            Important! The implementations of this interface should be considered to be singletons. Hence any state in them
            must be thread safe. The same instance can be used to map multiple entities at the same time.
            </para>
            </remarks>
            <example>
            <code>
            <![CDATA[
            public class UserMapper : ICrudEntityMapper<User>
            {
                public object Create(IDataRecord source)
                {
                    return new User();
                }
            
                public void Map(IDataRecord source, User destination)
                {
                    destination.Id = source["Id"].ToString();
                    destination.Age = (int)source["Age"];
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="T:Griffin.Data.Mapper.IEntityMapper">
            <summary>
            Contract for only mapping rows and nothing more.
            </summary>
            <remarks>
            <para>
            Implementations of this class must be decorated with the <see cref="T:Griffin.Data.Mapper.MappingForAttribute"/> to allow <see cref="T:Griffin.Data.Mapper.AssemblyScanningMappingProvider"/> to map it correctly.
            </para>
            </remarks>
        </member>
        <member name="M:Griffin.Data.Mapper.IEntityMapper.Create(System.Data.IDataRecord)">
            <summary>
            Create a new entity for the specified 
            </summary>
            <param name="record">should only be used to initialize any constructor arguments.</param>
            <returns>Created entity</returns>
            <example>
            <para>Where a default constructor exists:</para>
            <code>
            public object Create(IDataRecord record)
            {
                return new User();
            }
            </code>
            <para>Where a only constructors with arguments exists:</para>
            <code>
            public object Create(IDataRecord record)
            {
                return new User(record["Id"].ToString());
            }
            </code>
            </example>
        </member>
        <member name="M:Griffin.Data.Mapper.IEntityMapper.Map(System.Data.IDataRecord,System.Object)">
            <summary>
            Map a record to the specified entity
            </summary>
            <param name="source">Record from the DB</param>
            <param name="destination">Entity to fill with information</param>
            <example>
            <code>
            public void Map(IDataRecord source, object destination)
            {
                var user = (User)destination;
                user.Id = source["Id"].ToString();
                user.Age = (int)source["Age"];
            }
            </code>
            </example>
        </member>
        <member name="T:Griffin.Data.Mapper.IEntityMapper`1">
            <summary>
            Generic version of the mapping method to make it easier to do mappings manually.
            </summary>
            <typeparam name="TEntity">Type of entity</typeparam>
            <remarks>
            <para>
            Important! The implementations of this interface should be considered to be singletons. Hence any state in them
            must be thread safe. The same instance can be used to map multiple entities at the same time.
            </para>
            </remarks>
            <example>
            <code>
            <![CDATA[
            public class UserMapper : ICrudEntityMapper<User>
            {
                public object Create(IDataRecord source)
                {
                    return new User();
                }
            
                public void Map(IDataRecord source, User destination)
                {
                    destination.Id = source["Id"].ToString();
                    destination.Age = (int)source["Age"];
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Griffin.Data.Mapper.IEntityMapper`1.Map(System.Data.IDataRecord,`0)">
            <summary>
            Map a record to the specified entity
            </summary>
            <param name="source">Record from the DB</param>
            <param name="destination">Entity to fill with information</param>
            <example>
            <code>
            public void Map(IDataRecord source, User destination)
            {
                destination.Id = source["Id"].ToString();
                destination.Age = (int)source["Age"];
            }
            </code>
            </example>
        </member>
        <member name="T:Griffin.Data.Mapper.IMappingProvider">
            <summary>
            Used by the <see cref="T:Griffin.Data.Mapper.EntityMappingProvider"/>
            </summary>
        </member>
        <member name="M:Griffin.Data.Mapper.IMappingProvider.Get``1">
            <summary>
                Retrieve a mapper.
            </summary>
            <typeparam name="TEntity">Type of entity to retrieve a mapper for.</typeparam>
            <returns>Mapper</returns>
            <exception cref="T:Griffin.Data.Mapper.MappingNotFoundException">Failed to find a mapping for the given entity type.</exception>
            <remarks>
            <para>
            Do note that the mapper must implement <see cref="T:Griffin.Data.Mapper.ICrudEntityMapper`1"/> interface for this method to work.
            </para>
            </remarks>
        </member>
        <member name="M:Griffin.Data.Mapper.IMappingProvider.GetBase``1">
            <summary>
            Get mapping for the specified entity type
            </summary>
            <typeparam name="T">Type of entity</typeparam>
            <returns>Mapper</returns>
            <exception cref="T:Griffin.Data.Mapper.MappingNotFoundException">Failed to find a mapping for the given entity type.</exception>
        </member>
        <member name="T:Griffin.Data.Mapper.MappingException">
            <summary>
            We did not have a mapping configured for an entity type.
            </summary>
        </member>
        <member name="M:Griffin.Data.Mapper.MappingException.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.Data.Mapper.MappingException"/> class.
            </summary>
            <param name="entityType">Entity that mapping failed for.</param>
            <param name="errorMessage">The error message.</param>
        </member>
        <member name="M:Griffin.Data.Mapper.MappingException.#ctor(System.Type,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.Data.Mapper.MappingException"/> class.
            </summary>
            <param name="entityType">Entity that mapping failed for.</param>
            <param name="errorMessage">The error message.</param>
            <param name="inner">The inner.</param>
        </member>
        <member name="M:Griffin.Data.Mapper.MappingException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.Data.Mapper.MappingException"/> class.
            </summary>
        </member>
        <member name="P:Griffin.Data.Mapper.MappingException.EntityTypeName">
            <summary>
            Full name of the entity type that we did not have a mapping for.
            </summary>
        </member>
        <member name="T:Griffin.Data.Mapper.MappingForAttribute">
            <summary>
                Will point on the entity that a mapping is for if the <see cref="T:Griffin.Data.Mapper.ICrudEntityMapper" /> interface is used instead of the
                generic one.
            </summary>
        </member>
        <member name="M:Griffin.Data.Mapper.MappingForAttribute.#ctor(System.Type)">
            <summary>
            </summary>
            <param name="entityType"></param>
        </member>
        <member name="P:Griffin.Data.Mapper.MappingForAttribute.EntityType">
            <summary>
                Type of entity that the decorated entity mapper is for.
            </summary>
        </member>
        <member name="T:Griffin.Data.Mapper.MappingNotFoundException">
            <summary>
            We did not have a mapping configured for an entity type.
            </summary>
        </member>
        <member name="M:Griffin.Data.Mapper.MappingNotFoundException.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.Data.Mapper.MappingNotFoundException"/> class.
            </summary>
            <param name="entityType">Entity that we did not find a mapping for.</param>
        </member>
        <member name="M:Griffin.Data.Mapper.MappingNotFoundException.#ctor(System.Type,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.Data.Mapper.MappingNotFoundException"/> class.
            </summary>
            <param name="entityType">Entity that we did not find a mapping for.</param>
            <param name="inner">The inner exception.</param>
        </member>
        <member name="T:Griffin.Data.Mapper.MirrorMapper`1">
            <summary>
            Generates a mapping where property names and column names are identical
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Griffin.Data.Mapper.NamespaceDoc">
            <summary>
                Micro data layer making it easier to work with SQL queries.
            </summary>
            <remarks>
                <para></para>
                The command extension uses mapper classes
                to map the database recordset to your entity classes. Hence you need to start by creating mappings as shown below.
                <para>
                    The mappings are retrieve by using the Assem
                </para>
            </remarks>
            <example>
                <para>
                    First you have to define one mapping file per entity that you want to fetch. The following mapping
                    works when the columns are named same as the class properties and they are of the same type:
                </para>
                <code>
            <![CDATA[
            public class UserMapping : ReflectionBasedEntityMapper<User>
            {
            }
            ]]>
            </code>
                <para>
                    You can however customize it to specify a different column name or use an adapter for the column value. Read
                    more in the <see cref="T:Griffin.Data.Mapper.EntityMapper`1" /> documentation.
                </para>
            </example>
        </member>
        <member name="T:Griffin.Data.Mapper.UnitOfWorkExtensions">
            <summary>
            Extension methods for the UnitOfWork.
            </summary>
        </member>
        <member name="M:Griffin.Data.Mapper.UnitOfWorkExtensions.FirstOrDefault``1(Griffin.Data.IAdoNetUnitOfWork,System.Object)">
            <summary>
                Fetches the first row if found.
            </summary>
            <typeparam name="TEntity">Type of entity to load, must have an mapper registered in <see cref="T:Griffin.Data.Mapper.EntityMappingProvider"/>.</typeparam>
            <param name="unitOfWork">Unit of work to invoke <c>ExecuteReader()</c> on (through a created <c>DbCommand</c>).</param>
            <param name="constraints">dynamic specifying the properties to use. All parameters are joined with "AND" in the resulting SQL query. Any parameter with '%' in the value will be using LIKE instead of '='</param>
            <returns>
                Entity if found; otherwise <c>null</c>.
            </returns>
            <remarks>
                <para>Use this method when an entity is expected to be returned.</para>
            <para>Uses <see cref="T:Griffin.Data.Mapper.EntityMappingProvider"/> to find the correct <c><![CDATA[ICrudEntityMapper<TEntity>]]></c></para>
            </remarks>
            <example>
                <code>
            <![CDATA[
            public User GetUser(int userId)
            {
                return unitOfWork.FirstOrDefault<User>(new { Id = userId });
            }
            ]]>
            </code>
            <para>
            You can also use % for LIKE searches:
            </para>
                <code>
            <![CDATA[
            return unitOfWork.FirstOrDefault<User>(new { FirstName = 'Jon%', LastName = 'Gau%' });
            ]]>
            </code>
            <para>
            Which will translate into "WHERE FirstName LIKE 'Jon%' AND LastName LIKE 'Gau%'"
            </para>
            </example>
        </member>
        <member name="M:Griffin.Data.Mapper.UnitOfWorkExtensions.FirstOrDefault``1(Griffin.Data.IAdoNetUnitOfWork,System.String,System.Object[])">
            <summary>
                Fetches the first row if found.
            </summary>
            <typeparam name="TEntity">Type of entity to load, must have an mapper registered in <see cref="T:Griffin.Data.Mapper.EntityMappingProvider"/>.</typeparam>
            <param name="unitOfWork">Unit of work to invoke <c>ExecuteReader()</c> on (through a created <c>DbCommand</c>).</param>
            <param name="query">Query or short query (<c><![CDATA["projectId = @id AND dateCreated < @minDate"]]></c>)</param>
            <param name="parameters">Anonymous object (<c>new { id = dto.ProjectId, @minDate = dto.MinDate }</c>), a dictionary or a value array</param>
            <returns>
                Entity if found; otherwise <c>null</c>.
            </returns>
            <remarks>
                <para>Use this method when an entity is expected to be returned.</para>
            <para>Uses <see cref="T:Griffin.Data.Mapper.EntityMappingProvider"/> to find the correct <c><![CDATA[ICrudEntityMapper<TEntity>]]></c></para>
            </remarks>
            <example>
                <code>
            <![CDATA[
            public User GetUser(int userId)
            {
                return unitOfWork.FirstOrDefault<User>("WHERE age < @Age", new { Age = minAge });
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Griffin.Data.Mapper.UnitOfWorkExtensions.First``1(Griffin.Data.IAdoNetUnitOfWork,System.Object)">
            <summary>
            Get an entity.
            </summary>
            <typeparam name="TEntity">Type of entity to load, must have an mapper registered in <see cref="T:Griffin.Data.Mapper.EntityMappingProvider"/>.</typeparam>
            <param name="unitOfWork">Unit of work to invoke <c>ExecuteReader()</c> on (through a created <c>DbCommand</c>).</param>
            <param name="constraints">dynamic specifying the properties to use. All parameters are joined with "AND" in the resulting SQL query. Any parameter with '%' in the value will be using LIKE instead of '='</param>
            <returns>Found entity</returns>
            <remarks>
            <para>Uses <see cref="T:Griffin.Data.Mapper.EntityMappingProvider"/> to find the correct <c><![CDATA[ICrudEntityMapper<TEntity>]]></c></para>
            </remarks>
            <example>
                <code>
            <![CDATA[
            public User GetUser(int userId)
            {
                return unitOfWork.First<User>(new { Id = userId });
            }
            ]]>
            </code>
            <para>
            You can also use % for LIKE searches:
            </para>
                <code>
            <![CDATA[
            return unitOfWork.First<User>(new { FirstName = 'Jon%', LastName = 'Gau%' });
            ]]>
            </code>
            <para>
            Which will translate into "WHERE FirstName LIKE 'Jon%' AND LastName LIKE 'Gau%'"
            </para>
            </example>
            <exception cref="T:Griffin.Data.EntityNotFoundException">Failed to find an entity mathing the query</exception>
        </member>
        <member name="M:Griffin.Data.Mapper.UnitOfWorkExtensions.First``1(Griffin.Data.IAdoNetUnitOfWork,System.String,System.Object[])">
            <summary>
            Get an entity.
            </summary>
            <typeparam name="TEntity">Type of entity to load, must have an mapper registered in <see cref="T:Griffin.Data.Mapper.EntityMappingProvider"/>.</typeparam>
            <param name="unitOfWork">Unit of work to invoke <c>ExecuteReader()</c> on (through a created <c>DbCommand</c>).</param>
            <param name="query">Query or short query (<c><![CDATA["projectId = @id AND dateCreated < @minDate"]]></c>)</param>
            <param name="parameters">Anonymous object (<c>new { id = dto.ProjectId, @minDate = dto.MinDate }</c>), a dictionary or a value array</param>
            <returns>Found entity</returns>
            <remarks>
            <para>Uses <see cref="T:Griffin.Data.Mapper.EntityMappingProvider"/> to find the correct <c><![CDATA[ICrudEntityMapper<TEntity>]]></c></para>
            </remarks>
            <example>
                <code>
            <![CDATA[
            public User GetUser(int userId)
            {
                return unitOfWork.First<User>("WHERE id = @id", new { id = UserId });
            }
            ]]>
            </code>
            <para>
            Which will translate into:
            </para>
            <code>
            command.CommandText = "SELECT * FROM Users WHERE id = @id";
            var p = command.CreateParameter();
            p.Name = "id";
            p.Value = userId;
            command.Parameters.Add(p);
            </code>
            </example>
            <exception cref="T:Griffin.Data.EntityNotFoundException">Failed to find an entity mathing the query</exception>
        </member>
        <member name="M:Griffin.Data.Mapper.UnitOfWorkExtensions.Truncate``1(Griffin.Data.IAdoNetUnitOfWork)">
            <summary>
            Truncate table (remove all rows without filling the transaction log)
            </summary>
            <typeparam name="TEntity">Type of entity (must have a mapping registred in the <see cref="T:Griffin.Data.Mapper.EntityMappingProvider"/>)</typeparam>
            <param name="unitOfWork">Uow to extend</param>
        </member>
        <member name="M:Griffin.Data.Mapper.UnitOfWorkExtensions.ToList``1(Griffin.Data.IAdoNetUnitOfWork,System.Object)">
            <summary>
            Find a collection of entities
            </summary>
            <typeparam name="TEntity">Type of entity (must have a mapping registred in the <see cref="T:Griffin.Data.Mapper.EntityMappingProvider"/>)</typeparam>
            <param name="unitOfWork">Uow to extend</param>
            <param name="parameters">The parameters.</param>
            <returns>Collection (can be empty if no entries are found)</returns>
            <example>
            <code>
            // will generate a SQL clause: WHERE FirstName Like 'A%' AND LastName LIKE 'B%'
            uow.First(new { FirstName = "A%", LastName = "B%" });
            </code>
            </example>
        </member>
        <member name="M:Griffin.Data.Mapper.UnitOfWorkExtensions.Insert``1(Griffin.Data.IAdoNetUnitOfWork,``0)">
            <summary>
            Insert a new item.
            </summary>
            <typeparam name="TEntity">Type of entity (must have a mapping registered in the <see cref="T:Griffin.Data.Mapper.EntityMappingProvider"/>)</typeparam>
            <param name="unitOfWork">Uow to extend</param>
            <param name="entity">The entity to create.</param>
        </member>
        <member name="M:Griffin.Data.Mapper.UnitOfWorkExtensions.Update``1(Griffin.Data.IAdoNetUnitOfWork,``0)">
            <summary>
            Update an existing entity
            </summary>
            <typeparam name="TEntity">Type of entity (must have a mapping registred in the <see cref="T:Griffin.Data.Mapper.EntityMappingProvider"/>)</typeparam>
            <param name="unitOfWork">Uow to extend</param>
            <param name="entity">The entity, must have the PK assigned.</param>
        </member>
        <member name="M:Griffin.Data.Mapper.UnitOfWorkExtensions.Delete``1(Griffin.Data.IAdoNetUnitOfWork,``0)">
            <summary>
            Delete an existing entity
            </summary>
            <typeparam name="TEntity">Type of entity (must have a mapping registred in the <see cref="T:Griffin.Data.Mapper.EntityMappingProvider"/>)</typeparam>
            <param name="unitOfWork">Uow to extend</param>
            <param name="entity">The entity, must have the PK assigned.</param>
        </member>
        <member name="M:Griffin.Data.Mapper.UnitOfWorkExtensions.ToEnumerable``1(Griffin.Data.IAdoNetUnitOfWork,System.String,System.Object[])">
            <summary>
                Return an enumerable which uses lazy loading of each row (you must close the connection once done).
            </summary>
            <typeparam name="TEntity">Type of entity to map</typeparam>
            <param name="unitOfWork">Connection to invoke <c>ExecuteReader()</c> on (through a created <c>DbCommand</c>).</param>
            <param name="query">Query or short query (<c><![CDATA["projectId = @id AND dateCreated < @minDate"]]></c>)</param>
            <param name="parameters">Anonymous object (<c>new { id = dto.ProjectId, @minDate = dto.MinDate }</c>), a dictionary or a value array</param>
            <returns>Lazy loaded enumerator</returns>
            <remarks>
                <para>
                    For more information about the "query" and "parameters" arguments, see <see cref="M:Griffin.Data.Mapper.CommandExtensions.ApplyQuerySql``1(System.Data.IDbCommand,System.String,System.Object[])"/>.
                </para>
                <para>
                    The returned enumerator will not map each row until it's requested. To be able to do that the
                    connection/command/datareader is
                    kept open until the enumerator is disposed. Hence it's important that you make sure that the enumerator is
                    disposed when you are
                    done with it.
                </para>
                <para>Uses <see cref="T:Griffin.Data.Mapper.EntityMappingProvider" /> to find the correct <c><![CDATA[IEntityMapper<TEntity>]]></c>.</para>
            </remarks>
            <example>
            <code>
            // All these examples are valid:
            <![CDATA[
            var users = unitOfWork.ToEnumerable<User>("Age < 10");
            var users = unitOfWork.ToEnumerable<User>("SELECT * FROM Users WHERE Age = 37");
            var users = unitOfWork.ToEnumerable<User>("FirstName = @name", new { name = user.FirstName });
            var users = unitOfWork.ToEnumerable<User>("FirstName = @1 AND Age < @2", 'A%', 35);
            var users = unitOfWork.ToEnumerable<User>("SELECT * FROM Users WHERE Age = @age LIMIT 1, 10", new { age = submittedAge });
            var users = unitOfWork.ToEnumerable<User>("SELECT * FROM Users WHERE Age = @1 LIMIT 1, 10", user.FirstName);
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Griffin.Data.Mapper.UnitOfWorkExtensions.ToEnumerable``1(Griffin.Data.IAdoNetUnitOfWork,System.Boolean,System.String,System.Object[])">
            <summary>
                Return an enumerable which uses lazy loading of each row.
            </summary>
            <typeparam name="TEntity">Type of entity to map</typeparam>
            <param name="unitOfWork">Connection to invoke <c>ExecuteReader()</c> on (through a created <c>DbCommand</c>).</param>
            <param name="ownsConnection">
                <c>true</c> if the connection should be disposed together with the command/datareader. See
                remarks.
            </param>
            <param name="query">Query or short query (<c>"id = @1"</c>)</param>
            <param name="parameters"></param>
            <returns>Lazy loaded enumerator</returns>
            <remarks>
                <para>
                    For more information about the "query" and "parameters" arguments, see <see cref="M:Griffin.Data.Mapper.CommandExtensions.ApplyQuerySql``1(System.Data.IDbCommand,System.String,System.Object[])"/>.
                </para>
                <para>
                    The returned enumerator will not map each row until it's requested. To be able to do that the
                    connection/command/datareader is
                    kept open until the enumerator is disposed. Hence it's important that you make sure that the enumerator is
                    disposed when you are
                    done with it.
                </para>
                <para>Uses <see cref="T:Griffin.Data.Mapper.EntityMappingProvider" /> to find the correct <c><![CDATA[IEntityMapper<TEntity>]]></c>.</para>
            </remarks>
            <example>
            <code>
            // All these examples are valid:
            <![CDATA[
            var users = unitOfWork.ToEnumerable<User>(true, "Age < 10");
            var users = unitOfWork.ToEnumerable<User>(true, "SELECT * FROM Users WHERE Age = 37");
            var users = unitOfWork.ToEnumerable<User>(true, "FirstName = @name", new { name = user.FirstName });
            var users = unitOfWork.ToEnumerable<User>(true, "FirstName = @1 AND Age < @2", 'A%', 35);
            var users = unitOfWork.ToEnumerable<User>(true, "SELECT * FROM Users WHERE Age = @age LIMIT 1, 10", new { age = submittedAge });
            var users = unitOfWork.ToEnumerable<User>(true, "SELECT * FROM Users WHERE Age = @1 LIMIT 1, 10", user.FirstName);
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Griffin.Data.Mapper.UnitOfWorkExtensions.ToEnumerable``1(Griffin.Data.IAdoNetUnitOfWork,System.Boolean)">
            <summary>
                Return an enumerable which uses lazy loading of each row.
            </summary>
            <typeparam name="TEntity">Type of entity to map</typeparam>
            <param name="unitOfWork">Connection to invoke <c>ExecuteReader()</c> on (through a created <c>DbCommand</c>).</param>
            <param name="ownsConnection">
                <c>true</c> if the connection should be disposed together with the command/datareader. See
                remarks.
            </param>
            <returns>Lazy loaded enumerator</returns>
            <remarks>
                <para>
                    For more information about the "query" and "parameters" arguments, see <see cref="M:Griffin.Data.Mapper.CommandExtensions.ApplyQuerySql``1(System.Data.IDbCommand,System.String,System.Object[])"/>.
                </para>
                <para>
                    The returned enumerator will not map each row until it's requested. To be able to do that the
                    connection/command/datareader is
                    kept open until the enumerator is disposed. Hence it's important that you make sure that the enumerator is
                    disposed when you are
                    done with it.
                </para>
                <para>Uses <see cref="T:Griffin.Data.Mapper.EntityMappingProvider" /> to find the correct <c><![CDATA[IEntityMapper<TEntity>]]></c>.</para>
            </remarks>
            <example>
            <code>
            // All these examples are valid:
            <![CDATA[
            var users = unitOfWork.ToEnumerable<User>(true, "Age < 10");
            var users = unitOfWork.ToEnumerable<User>(true, "SELECT * FROM Users WHERE Age = 37");
            var users = unitOfWork.ToEnumerable<User>(true, "FirstName = @name", new { name = user.FirstName });
            var users = unitOfWork.ToEnumerable<User>(true, "FirstName = @1 AND Age < @2", 'A%', 35);
            var users = unitOfWork.ToEnumerable<User>(true, "SELECT * FROM Users WHERE Age = @age LIMIT 1, 10", new { age = submittedAge });
            var users = unitOfWork.ToEnumerable<User>(true, "SELECT * FROM Users WHERE Age = @1 LIMIT 1, 10", user.FirstName);
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Griffin.Data.Mapper.UnitOfWorkExtensions.ToEnumerable``1(Griffin.Data.IAdoNetUnitOfWork,System.Boolean,Griffin.Data.Mapper.IEntityMapper{``0},System.String,System.Object[])">
            <summary>
                Return an enumerable which uses lazy loading of each row.
            </summary>
            <typeparam name="TEntity">Type of entity to map</typeparam>
            <param name="unitOfWork">Connection to invoke <c>ExecuteReader()</c> on (through a created <c>DbCommand</c>).</param>
            <param name="ownsConnection">
                <c>true</c> if the connection should be disposed together with the command/datareader. See
                remarks.
            </param>
            <param name="mapping">Mapping used when translating table rows to .NET classes.</param>
            <param name="query">Query or short query (<c><![CDATA["projectId = @id AND dateCreated < @minDate"]]></c>)</param>
            <param name="parameters">Anonymous object (<c>new { id = dto.ProjectId, @minDate = dto.MinDate }</c>), a dictionary or a value array</param>
            <returns>Lazy loaded enumerator</returns>
            <remarks>
                <para>
                    For more information about the "query" and "parameters" arguments, see <see cref="M:Griffin.Data.Mapper.CommandExtensions.ApplyQuerySql``1(System.Data.IDbCommand,System.String,System.Object[])"/>.
                </para>
                <para>
                    The returned enumerator will not map each row until it's requested. To be able to do that the
                    connection/command/datareader is
                    kept open until the enumerator is disposed. Hence it's important that you make sure that the enumerator is
                    disposed when you are
                    done with it.
                </para>
                <para>Uses <see cref="T:Griffin.Data.Mapper.EntityMappingProvider" /> to find the correct <c><![CDATA[IEntityMapper<TEntity>]]></c>.</para>
            </remarks>
            <example>
            <code>
            // All these examples are valid:
            <![CDATA[
            var users = unitOfWork.ToEnumerable<User>(true, new CustomUserMapping(), "Age < 10");
            var users = unitOfWork.ToEnumerable<User>(true, new CustomUserMapping(), "SELECT * FROM Users WHERE Age = 37");
            var users = unitOfWork.ToEnumerable<User>(true, new CustomUserMapping(), "FirstName = @name", new { name = user.FirstName });
            var users = unitOfWork.ToEnumerable<User>(true, new CustomUserMapping(), "FirstName = @1 AND Age < @2", 'A%', 35);
            var users = unitOfWork.ToEnumerable<User>(true, new CustomUserMapping(), "SELECT * FROM Users WHERE Age = @age LIMIT 1, 10", new { age = submittedAge });
            var users = unitOfWork.ToEnumerable<User>(true, new CustomUserMapping(), "SELECT * FROM Users WHERE Age = @1 LIMIT 1, 10", user.FirstName);
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Griffin.Data.Mapper.UnitOfWorkExtensions.ToList``1(Griffin.Data.IAdoNetUnitOfWork,System.String,System.Object[])">
            <summary>
                Generate a complete list before returning.
            </summary>
            <typeparam name="TEntity">Type of entity to map</typeparam>
            <param name="unitOfWork">Connection to invoke <c>ExecuteReader()</c> on (through a created <c>DbCommand</c>).</param>
            <param name="query">Query or short query (<c><![CDATA["projectId = @id AND dateCreated < @minDate"]]></c>)</param>
            <param name="parameters">Anonymous object (<c>new { id = dto.ProjectId, @minDate = dto.MinDate }</c>), a dictionary or a value array</param>
            <returns>A list.</returns>
            <remarks>
                <para>
                    For more information about the "query" and "parameters" arguments, see <see cref="M:Griffin.Data.Mapper.CommandExtensions.ApplyQuerySql``1(System.Data.IDbCommand,System.String,System.Object[])"/>.
                </para>
                <para>
                    The returned enumerator will not map each row until it's requested. To be able to do that the
                    connection/command/datareader is
                    kept open until the enumerator is disposed. Hence it's important that you make sure that the enumerator is
                    disposed when you are
                    done with it.
                </para>
                <para>Uses <see cref="T:Griffin.Data.Mapper.EntityMappingProvider" /> to find the correct <c><![CDATA[ICrudEntityMapper<TEntity>]]></c>.</para>
            </remarks>
            <example>
            <code>
            // All these examples are valid:
            <![CDATA[
            var users = unitOfWork.ToList<User>("Age < 10");
            var users = unitOfWork.ToList<User>("SELECT * FROM Users WHERE Age = 37");
            var users = unitOfWork.ToList<User>("FirstName = @name", new { name = user.FirstName });
            var users = unitOfWork.ToList<User>("FirstName = @1 AND Age < @2", 'A%', 35);
            var users = unitOfWork.ToList<User>("SELECT * FROM Users WHERE Age = @age LIMIT 1, 10", new { age = submittedAge });
            var users = unitOfWork.ToList<User>("SELECT * FROM Users WHERE Age = @1 LIMIT 1, 10", user.FirstName);
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Griffin.Data.Mapper.UnitOfWorkExtensions.ToList``1(Griffin.Data.IAdoNetUnitOfWork,Griffin.Data.Mapper.IEntityMapper{``0},System.String,System.Object[])">
            <summary>
                Generate a complete list before returning.
            </summary>
            <typeparam name="TEntity">Type of entity to map</typeparam>
            <param name="unitOfWork">Connection to invoke <c>ExecuteReader()</c> on (through a created <c>DbCommand</c>).</param>
            <param name="mapping">Mapping used to translate from db table rows to .NET object</param>
            <param name="query">Query or short query (<c><![CDATA["projectId = @id AND dateCreated < @minDate"]]></c>)</param>
            <param name="parameters">Anonymous object (<c>new { id = dto.ProjectId, @minDate = dto.MinDate }</c>), a dictionary or a value array</param>
            <returns>A list.</returns>
            <remarks>
                <para>
                    For more information about the "query" and "parameters" arguments, see <see cref="M:Griffin.Data.Mapper.CommandExtensions.ApplyQuerySql``1(System.Data.IDbCommand,System.String,System.Object[])"/>.
                </para>
                <para>
                    The returned enumerator will not map each row until it's requested. To be able to do that the
                    connection/command/datareader is
                    kept open until the enumerator is disposed. Hence it's important that you make sure that the enumerator is
                    disposed when you are
                    done with it.
                </para>
                <para>Uses <see cref="T:Griffin.Data.Mapper.EntityMappingProvider" /> to find the correct <c><![CDATA[IEntityMapper<TEntity>]]></c>.</para>
            </remarks>
            <example>
            <code>
            // All these examples are valid:
            <![CDATA[
            var users = unitOfWork.ToList<User>("Age < 10");
            var users = unitOfWork.ToList<User>("SELECT * FROM Users WHERE Age = 37");
            var users = unitOfWork.ToList<User>("FirstName = @name", new { name = user.FirstName });
            var users = unitOfWork.ToList<User>("FirstName = @1 AND Age < @2", 'A%', 35);
            var users = unitOfWork.ToList<User>("SELECT * FROM Users WHERE Age = @age LIMIT 1, 10", new { age = submittedAge });
            var users = unitOfWork.ToList<User>("SELECT * FROM Users WHERE Age = @1 LIMIT 1, 10", user.FirstName);
            ]]>
            </code>
            </example>
        </member>
        <member name="T:Griffin.Data.Mapper.Values.ColumnToPropertyValueContext">
            <summary>
            Used by <see cref="T:Griffin.Data.Mapper.Values.ColumnToPropertyValueHandler"/>.
            </summary>
        </member>
        <member name="P:Griffin.Data.Mapper.Values.ColumnToPropertyValueContext.Value">
            <summary>
            Column value
            </summary>
        </member>
        <member name="P:Griffin.Data.Mapper.Values.ColumnToPropertyValueContext.Record">
            <summary>
            Entire record
            </summary>
        </member>
        <member name="T:Griffin.Data.Mapper.Values.ColumnToPropertyValueHandler">
            <summary>
                Used by the adapters in <see cref="T:Griffin.Data.Mapper.Values.PropertyMapping`1" />.
            </summary>
            <param name="context">Conversion context</param>
            <returns>Modified value</returns>
        </member>
        <member name="T:Griffin.Data.Mapper.Values.IPropertyMapping">
            <summary>
                Mapping for a class property
            </summary>
        </member>
        <member name="P:Griffin.Data.Mapper.Values.IPropertyMapping.CanWrite">
            <summary>
                Can write to property (i.e. update it from the table column)
            </summary>
        </member>
        <member name="P:Griffin.Data.Mapper.Values.IPropertyMapping.CanRead">
            <summary>
                Can read from the property (i.e. create UPDATE/INSERT queries)
            </summary>
        </member>
        <member name="P:Griffin.Data.Mapper.Values.IPropertyMapping.IsPrimaryKey">
            <summary>
                Used when fetching items
            </summary>
        </member>
        <member name="P:Griffin.Data.Mapper.Values.IPropertyMapping.IsAutoIncrement">
            <summary>
                PK value is generated by the DB, i.e. do not insert it.
            </summary>
        </member>
        <member name="P:Griffin.Data.Mapper.Values.IPropertyMapping.ColumnToPropertyAdapter">
            <summary>
                Used to convert the database value to the type used by the property
            </summary>
        </member>
        <member name="P:Griffin.Data.Mapper.Values.IPropertyMapping.PropertyToColumnAdapter">
            <summary>
                Used to convert the property to the type used by the column.
            </summary>
        </member>
        <member name="P:Griffin.Data.Mapper.Values.IPropertyMapping.PropertyName">
            <summary>
                Name of the property in the entity
            </summary>
        </member>
        <member name="P:Griffin.Data.Mapper.Values.IPropertyMapping.ColumnName">
            <summary>
                Set if the column name is different from the property name
            </summary>
        </member>
        <member name="P:Griffin.Data.Mapper.Values.IPropertyMapping.IsNullable">
            <summary>
                If DBNull fields should be processed or ignored.
            </summary>
            <remarks>
                <para>
                    <c>true</c> means that the property should be assigned with <c>NullValue</c> if the column is <c>DBNull.</c>
                </para>
            </remarks>
        </member>
        <member name="P:Griffin.Data.Mapper.Values.IPropertyMapping.NullValue">
            <summary>
                Value used when converting to/from <c>DBNull</c>.
            </summary>
        </member>
        <member name="M:Griffin.Data.Mapper.Values.IPropertyMapping.Map(System.Data.IDataRecord,System.Object)">
            <summary>
                Convert the value in the specified record and assign it to the property in the specified instance
            </summary>
            <param name="source">Database record</param>
            <param name="destination">Entity instance</param>
            <remarks>
                <para><c>DBNull</c> will go through the adapter and/or be replaced with the <see cref="P:Griffin.Data.Mapper.Values.IPropertyMapping.NullValue" />.</para>
            </remarks>
        </member>
        <member name="M:Griffin.Data.Mapper.Values.IPropertyMapping.GetValue(System.Object)">
            <summary>
                Get the property value (converted to a column value, i.e. run through the adapter and the null replacement check).
            </summary>
            <param name="entity">Entity to retrieve value from</param>
            <returns>Property value, adepted for insertion into the database row.</returns>
        </member>
        <member name="M:Griffin.Data.Mapper.Values.IPropertyMapping.SetProperty(System.Object,System.Object)">
            <summary>
                Set property value by specifying a column value (i.e. use the <c>ColumnToPropertyAdapter</c> when assigning the
                value)
            </summary>
            <param name="entity">Entity to retrieve value from</param>
            <param name="columnValue">Column value</param>
        </member>
        <member name="T:Griffin.Data.Mapper.Values.PropertyMapping`1">
            <summary>
                Used to convert the database column value and assign it to the property/field in the entity.
            </summary>
        </member>
        <member name="M:Griffin.Data.Mapper.Values.PropertyMapping`1.#ctor(System.String,System.Action{`0,System.Object},System.Func{`0,System.Object})">
            <summary>
                Initializes a new instance of the <see cref="T:Griffin.Data.Mapper.Values.PropertyMapping`1" /> class.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="setter">The setter (optional)</param>
            <param name="getter">The getter (optional)</param>
            <exception cref="T:System.ArgumentNullException">propertyName</exception>
            <example>
                <code>
            var mapping = new PropertyMapping("Id", (instance, value) =&gt; ((User)instance).Id = (string)value);
            </code>
            </example>
        </member>
        <member name="P:Griffin.Data.Mapper.Values.PropertyMapping`1.PropertyType">
            <summary>
                Gets or sets the type of the property.
            </summary>
        </member>
        <member name="P:Griffin.Data.Mapper.Values.PropertyMapping`1.IsNullable">
            <summary>
                Column can be null
            </summary>
        </member>
        <member name="P:Griffin.Data.Mapper.Values.PropertyMapping`1.NullValue">
            <summary>
                Value to assign to the property if the column is <c>DBNull</c>.
            </summary>
            <remarks>
                <para>
                    Will also assign <c>DBNull</c> to the column if the read property is this value.
                </para>
            </remarks>
        </member>
        <member name="P:Griffin.Data.Mapper.Values.PropertyMapping`1.CanWrite">
            <summary>
                Determines if this property can be written to
            </summary>
        </member>
        <member name="P:Griffin.Data.Mapper.Values.PropertyMapping`1.CanRead">
            <summary>
                Determines if this property can be read
            </summary>
        </member>
        <member name="P:Griffin.Data.Mapper.Values.PropertyMapping`1.IsPrimaryKey">
            <summary>
                This property is a primary key
            </summary>
        </member>
        <member name="P:Griffin.Data.Mapper.Values.PropertyMapping`1.IsAutoIncrement">
            <summary>
                PK value is generated by the DB, i.e. do not insert it.
            </summary>
        </member>
        <member name="P:Griffin.Data.Mapper.Values.PropertyMapping`1.PropertyName">
            <summary>
                Name of the property in the entity
            </summary>
        </member>
        <member name="P:Griffin.Data.Mapper.Values.PropertyMapping`1.ColumnName">
            <summary>
                Set if the column name is different from the property name
            </summary>
        </member>
        <member name="P:Griffin.Data.Mapper.Values.PropertyMapping`1.ColumnToPropertyAdapter">
            <summary>
                Used to convert the database value to the type used by the property
            </summary>
        </member>
        <member name="P:Griffin.Data.Mapper.Values.PropertyMapping`1.PropertyToColumnAdapter">
            <summary>
                Used to convert the property to the type used by the column.
            </summary>
        </member>
        <member name="M:Griffin.Data.Mapper.Values.PropertyMapping`1.Griffin#Data#Mapper#Values#IPropertyMapping#Map(System.Data.IDataRecord,System.Object)">
            <summary>
                Convert the value in the specified record and assign it to the property in the specified instance
            </summary>
            <param name="source">Database record</param>
            <param name="destination">Entity instance</param>
            <remarks>
                <para>Will exit the method without any assignment if the value is <c>DBNull.Value</c>.</para>
            </remarks>
        </member>
        <member name="M:Griffin.Data.Mapper.Values.PropertyMapping`1.SetProperty(System.Object,System.Object)">
            <summary>
                Set property value by specifying a column value (i.e. use the <c>ColumnToPropertyAdapter</c> when assigning the
                value)
            </summary>
            <param name="entity">Entity to retrieve value from</param>
            <param name="columnValue">Column value</param>
            <returns>Property value</returns>
            <remarks>
                <para>
                    Will attempt to convert the value if it's not directly assignable to the property type.
                </para>
            </remarks>
        </member>
        <member name="M:Griffin.Data.Mapper.Values.PropertyMapping`1.Map(System.Data.IDataRecord,`0)">
            <summary>
                Convert the value in the specified record and assign it to the property in the entity.
            </summary>
            <param name="source">Database record</param>
            <param name="destination">Entity instance</param>
            <remarks>
                <para>Will exit the method without any assignment if the value is <c>DBNull.Value</c>.</para>
            </remarks>
        </member>
        <member name="M:Griffin.Data.Mapper.Values.PropertyMapping`1.NotForCrud">
            <summary>
                Ignore this property in insert/update statements.
            </summary>
            <exception cref="T:System.InvalidOperationException">Must always write keys.</exception>
        </member>
        <member name="M:Griffin.Data.Mapper.Values.PropertyMapping`1.NotForQueries">
            <summary>
                Ignore this column when reading from the DB.
            </summary>
            <exception cref="T:System.InvalidOperationException">Must always write keys.</exception>
        </member>
        <member name="T:Griffin.Data.Mapper.Values.PropertyToColumnValueContext`1">
            <summary>
            Used by <see cref="T:Griffin.Data.Mapper.Values.PropertyToColumnValueHandler`1"/>.
            </summary>
        </member>
        <member name="P:Griffin.Data.Mapper.Values.PropertyToColumnValueContext`1.Value">
            <summary>
            Column value
            </summary>
        </member>
        <member name="P:Griffin.Data.Mapper.Values.PropertyToColumnValueContext`1.Entity">
            <summary>
            Entire record
            </summary>
        </member>
        <member name="T:Griffin.Data.Mapper.Values.PropertyToColumnValueHandler`1">
            <summary>
                Used by the adapters in <see cref="T:Griffin.Data.Mapper.Values.PropertyMapping`1" />.
            </summary>
            <param name="context">Conversion context</param>
            <returns>Modified value</returns>
        </member>
        <member name="T:Griffin.Data.Mapper.Values.ValueHandler">
            <summary>
                Used by the adapters in <see cref="T:Griffin.Data.Mapper.Values.PropertyMapping`1" />.
            </summary>
            <param name="originalValue">Value from column or property depending on the mapping direction</param>
            <returns>Modified value</returns>
        </member>
        <member name="T:Griffin.Data.NamespaceDoc">
            <summary>
            
            </summary>
        </member>
        <member name="T:Griffin.Data.PagedResult`1">
            <summary>
            Paged result
            </summary>
            <typeparam name="T">Model type (i.e. denormalized row)</typeparam>
        </member>
        <member name="M:Griffin.Data.PagedResult`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.Data.PagedResult`1" /> class.
            </summary>
            <param name="items">The items.</param>
            <param name="totalCount">The total count (if paging is used, otherwise <c>0</c>).</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="P:Griffin.Data.PagedResult`1.Items">
            <summary>
            Gets all matching items
            </summary>
        </member>
        <member name="P:Griffin.Data.PagedResult`1.TotalCount">
            <summary>
            Gets total number of items (useful when paging is used, otherwise 0)
            </summary>
        </member>
        <member name="T:Griffin.Data.Queries.IQueryConstraints`1">
            <summary>
            Typed paging
            </summary>
            <typeparam name="T">Entity type</typeparam>
        </member>
        <member name="P:Griffin.Data.Queries.IQueryConstraints`1.PageSize">
            <summary>
            Gets number of items per page (when paging is used)
            </summary>
        </member>
        <member name="P:Griffin.Data.Queries.IQueryConstraints`1.PageNumber">
            <summary>
            Gets page number (one based index)
            </summary>
        </member>
        <member name="P:Griffin.Data.Queries.IQueryConstraints`1.SortOrder">
            <summary>
            Gets the kind of sort order
            </summary>
        </member>
        <member name="P:Griffin.Data.Queries.IQueryConstraints`1.SortPropertyName">
            <summary>
            Gets property name for the property to sort by.
            </summary>
        </member>
        <member name="M:Griffin.Data.Queries.IQueryConstraints`1.Page(System.Int32,System.Int32)">
            <summary>
            Use paging
            </summary>
            <param name="pageNumber">Page to get (one based index).</param>
            <param name="pageSize">Number of items per page.</param>
            <returns>Current instance</returns>
        </member>
        <member name="M:Griffin.Data.Queries.IQueryConstraints`1.SortBy(System.String)">
            <summary>
            Sort ascending by a property
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns>Current instance</returns>
        </member>
        <member name="M:Griffin.Data.Queries.IQueryConstraints`1.SortByDescending(System.String)">
            <summary>
            Sort descending by a property.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns>Current instance</returns>
        </member>
        <member name="M:Griffin.Data.Queries.IQueryConstraints`1.SortBy(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Property to sort by (ascending)
            </summary>
            <param name="property">The property.</param>
        </member>
        <member name="M:Griffin.Data.Queries.IQueryConstraints`1.SortByDescending(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Property to sort by (descending)
            </summary>
            <param name="property">The property</param>
        </member>
        <member name="T:Griffin.Data.Queries.IQueryResult`1">
            <summary>
                Defines minimum parameters for query search results.
            </summary>
            <typeparam name="T">Type of return model</typeparam>
        </member>
        <member name="P:Griffin.Data.Queries.IQueryResult`1.Items">
            <summary>
                Gets all matching items
            </summary>
        </member>
        <member name="P:Griffin.Data.Queries.IQueryResult`1.TotalCount">
            <summary>
                Gets total number of items (useful when paging is used)
            </summary>
        </member>
        <member name="T:Griffin.Data.Queries.QueryConstraints`1">
            <summary>
                Typed constraints
            </summary>
            <typeparam name="T">Model to query</typeparam>
        </member>
        <member name="M:Griffin.Data.Queries.QueryConstraints`1.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Griffin.Data.Queries.QueryConstraints`1" /> class.
            </summary>
            <remarks>Will per default return the first 50 items</remarks>
        </member>
        <member name="P:Griffin.Data.Queries.QueryConstraints`1.StartRecord">
            <summary>
                Gets start record (in the data source)
            </summary>
            <remarks>Calculated with the help of PageNumber and PageSize.</remarks>
        </member>
        <member name="P:Griffin.Data.Queries.QueryConstraints`1.ModelType">
            <summary>
                Gets model which will be queried.
            </summary>
        </member>
        <member name="M:Griffin.Data.Queries.QueryConstraints`1.ValidatePropertyName(System.String)">
            <summary>
                Make sure that the property exists in the model.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="P:Griffin.Data.Queries.QueryConstraints`1.PageSize">
            <summary>
                Gets number of items per page (when paging is used)
            </summary>
        </member>
        <member name="P:Griffin.Data.Queries.QueryConstraints`1.PageNumber">
            <summary>
                Gets page number (one based index)
            </summary>
        </member>
        <member name="P:Griffin.Data.Queries.QueryConstraints`1.SortOrder">
            <summary>
                Gets the kind of sort order
            </summary>
        </member>
        <member name="P:Griffin.Data.Queries.QueryConstraints`1.SortPropertyName">
            <summary>
                Gets property name for the property to sort by.
            </summary>
        </member>
        <member name="M:Griffin.Data.Queries.QueryConstraints`1.Page(System.Int32,System.Int32)">
            <summary>
                Use paging
            </summary>
            <param name="pageNumber">Page to get (one based index).</param>
            <param name="pageSize">Number of items per page.</param>
            <returns>Current instance</returns>
        </member>
        <member name="M:Griffin.Data.Queries.QueryConstraints`1.SortBy(System.String)">
            <summary>
                Sort ascending by a property
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns>Current instance</returns>
        </member>
        <member name="M:Griffin.Data.Queries.QueryConstraints`1.SortByDescending(System.String)">
            <summary>
                Sort descending by a property.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns>Current instance</returns>
        </member>
        <member name="M:Griffin.Data.Queries.QueryConstraints`1.SortBy(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
                Property to sort by (ascending)
            </summary>
            <param name="property">The property.</param>
        </member>
        <member name="M:Griffin.Data.Queries.QueryConstraints`1.SortByDescending(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
                Property to sort by (descending)
            </summary>
            <param name="property">The property</param>
        </member>
        <member name="T:Griffin.Data.Queries.QueryConstraintsExtensions">
            <summary>
                Extensions for <see cref="T:Griffin.Data.Queries.QueryConstraints`1" />
            </summary>
        </member>
        <member name="M:Griffin.Data.Queries.QueryConstraintsExtensions.ApplyTo``1(Griffin.Data.Queries.IQueryConstraints{``0},System.Linq.IQueryable{``0})">
            <summary>
                Apply the query information to a LINQ statement
            </summary>
            <typeparam name="T">Model type</typeparam>
            <param name="instance">constraints instance</param>
            <param name="query">LINQ queryable</param>
            <returns>Modified query</returns>
        </member>
        <member name="M:Griffin.Data.Queries.QueryConstraintsExtensions.OrderBy``1(System.Linq.IQueryable{``0},System.String,System.Object[])">
            <summary>
                Apply ordering to a LINQ query
            </summary>
            <typeparam name="T">Model type</typeparam>
            <param name="source">Linq query</param>
            <param name="propertyName">Property to sort by</param>
            <param name="values">DUNNO?</param>
            <returns>Ordered query</returns>
        </member>
        <member name="M:Griffin.Data.Queries.QueryConstraintsExtensions.OrderByDescending``1(System.Linq.IQueryable{``0},System.String,System.Object[])">
            <summary>
                Apply ordering to a LINQ query
            </summary>
            <typeparam name="T">Model type</typeparam>
            <param name="source">Linq query</param>
            <param name="propertyName">Property to sort by</param>
            <param name="values">DUNNO?</param>
            <returns>Ordered query</returns>
        </member>
        <member name="M:Griffin.Data.Queries.QueryConstraintsExtensions.ToSearchResult``1(System.Linq.IQueryable{``0},Griffin.Data.Queries.IQueryConstraints{``0})">
            <summary>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              System.String)">
            <summary>
                Gets last value of an parameter.
            </summary>
            <param name="name">Parameter name</param>
            <returns>String if found; otherwise <c>null</c>.</returns>
        </member>
        <member name="M:Griffin.Net.Protocols.Http.Messages.ParameterCollection.GetEnumerator">
            <summary>
                Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
                A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Griffin.Net.Protocols.Http.Messages.ParameterCollection.Parse(System.String)">
            <summary>
            Parse string
            </summary>
            <param name="value">contains "a=b,c=d" etc</param>
        </member>
        <member name="M:Griffin.Net.Protocols.Http.Messages.ParameterCollection.Parse(System.String,Griffin.Net.Protocols.Http.Messages.ParameterCollection)">
            <summary>
            Parse string
            </summary>
            <param name="value">contains "a=b,c=d" etc</param>
            <param name="target">Collection to fill with the values</param>
        </member>
        <member name="M:Griffin.Net.Protocols.Http.Messages.ParameterCollection.Add(System.String,System.String)">
            <summary>
                Add a query string parameter.
            </summary>
            <param name="name">Parameter name</param>
            <param name="value">Value</param>
        </member>
        <member name="M:Griffin.Net.Protocols.Http.Messages.ParameterCollection.Exists(System.String)">
            <summary>
                Checks if the specified parameter exists
            </summary>
            <param name="name">Parameter name.</param>
            <returns><c>true</c> if found; otherwise <c>false</c>;</returns>
        </member>
        <member name="M:Griffin.Net.Protocols.Http.Messages.ParameterCollection.Get(System.String)">
            <summary>
                Get a parameter.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Griffin.Net.Protocols.Http.Messages.ParameterCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
                Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
                An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Griffin.Net.Protocols.Http.Messages.ParameterCollection.Clear">
            <summary>
                Remove all item
            </summary>
        </member>
        <member name="M:Griffin.Net.Protocols.Http.Messages.ParameterCollection.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>
            A string that represents the current object.
            </returns>
        </member>
        <member name="T:Griffin.Net.Protocols.Http.Messages.ParseException">
            <summary>
            Failed to parse message
            </summary>
        </member>
        <member name="M:Griffin.Net.Protocols.Http.Messages.ParseException.#ctor(System.String)">
            <summary>
            Creates a new instance of <see cref="T:Griffin.Net.Protocols.Http.Messages.ParseException"/>.
            </summary>
            <param name="errorMessage">error message</param>
        </member>
        <member name="T:Griffin.Net.Protocols.Http.Messages.ReaderResult">
            <summary>
            Result from <see cref="M:Griffin.Net.Protocols.Http.Messages.TextReaderExtensions.ReadToEnd(System.IO.TextReader,System.String)"/>
            </summary>
        </member>
        <member name="M:Griffin.Net.Protocols.Http.Messages.ReaderResult.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.Net.Protocols.Http.Messages.ReaderResult" /> class.
            </summary>
        </member>
        <member name="P:Griffin.Net.Protocols.Http.Messages.ReaderResult.Value">
            <summary>
            Value read
            </summary>
        </member>
        <member name="P:Griffin.Net.Protocols.Http.Messages.ReaderResult.Delimiter">
            <summary>
            Found delimiter
            </summary>
        </member>
        <member name="T:Griffin.Net.Protocols.Http.Messages.TextReaderExtensions">
            <summary>
            Extensions for the standard text reader
            </summary>
        </member>
        <member name="M:Griffin.Net.Protocols.Http.Messages.TextReaderExtensions.ReadToEnd(System.IO.TextReader,System.String)">
            <summary>
            </summary>
            <param name="reader"></param>
            <param name="delimiters"></param>
            <returns></returns>
        </member>
        <member name="T:Griffin.Net.Protocols.Http.Messages.UrlDecoder">
            <summary>
            Parses query string
            </summary>
        </member>
        <member name="M:Griffin.Net.Protocols.Http.Messages.UrlDecoder.Parse(System.IO.TextReader,Griffin.Net.Protocols.Http.IParameterCollection)">
            <summary>
            Parse a query string
            </summary>
            <param name="reader">string to parse</param>
            <param name="parameters">Parameter collection to fill</param>
            <returns>A collection</returns>
            <exception cref="T:System.ArgumentNullException"><c>reader</c> is <c>null</c>.</exception>
        </member>
        <member name="M:Griffin.Net.Protocols.Http.Messages.UrlDecoder.Parse(System.String)">
            <summary>
            Parse a query string
            </summary>
            <param name="queryString">string to parse</param>
            <returns>A collection</returns>
            <exception cref="T:System.ArgumentNullException"><c>queryString</c> is <c>null</c>.</exception>
        </member>
        <member name="T:Griffin.Net.Protocols.Http.PipelinedMessageQueue">
            <summary>
                A priority message queue which uses <c>ConcurrentPriorityQueue</c> from Microsoft
                (http://blogs.msdn.com/b/pfxteam/archive/2010/04/04/9990342.aspx)
            </summary>
        </member>
        <member name="M:Griffin.Net.Protocols.Http.PipelinedMessageQueue.Enqueue(System.Object)">
            <summary>
                Enqueue a message
            </summary>
            <param name="message">message to enqueue</param>
            <remarks>
                <para>
                    Messages do not have to be placed in order, place them as they should be sent out.
                </para>
            </remarks>
        </member>
        <member name="M:Griffin.Net.Protocols.Http.PipelinedMessageQueue.TryDequeue(System.Object@)">
            <summary>
                Get the next message that should be sent
            </summary>
            <param name="msg">Message to send</param>
            <returns><c>true</c> if there was a message to send.</returns>
        </member>
        <member name="T:Griffin.Net.Protocols.Http.Range">
            <summary>
                Represents a HTTP range.
            </summary>
        </member>
        <member name="M:Griffin.Net.Protocols.Http.Range.#ctor(System.Int32,System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:Griffin.Net.Protocols.Http.Range" /> class.
            </summary>
            <param name="position">The position to start at in the stream/file.</param>
            <param name="count">Number of bytes in this range.</param>
        </member>
        <member name="M:Griffin.Net.Protocols.Http.Range.#ctor(System.String,System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:Griffin.Net.Protocols.Http.Range" /> class.
            </summary>
            <param name="range">The range <c>"bytes "</c> should not be included.</param>
            <param name="streamLength">Total size of stream/file</param>
            <example>
                Last 100 bytes
                <code>
            -100
            </code>
                Specific range
                <code>
            100-199
            </code>
                From index 200 and the rest
                <code>
            200-
            </code>
            </example>
        </member>
        <member name="P:Griffin.Net.Protocols.Http.Range.IsDone">
            <summary>
                Gets value indicating if everything have been read using the <see cref="M:Griffin.Net.Protocols.Http.Range.Read(System.IO.Stream,System.Byte[],System.Int32,System.Int32)" /> method.
            </summary>
        </member>
        <member name="P:Griffin.Net.Protocols.Http.Range.Count">
            <summary>
                Gets number of bytes to read
            </summary>
        </member>
        <member name="P:Griffin.Net.Protocols.Http.Range.EndPosition">
            <summary>
                Gets where to stop read
            </summary>
        </member>
        <member name="P:Griffin.Net.Protocols.Http.Range.Position">
            <summary>
                Gets start position
            </summary>
        </member>
        <member name="M:Griffin.Net.Protocols.Http.Range.Read(System.IO.Stream,System.Byte[],System.Int32,System.Int32)">
            <summary>
                Reads from the specified stream and puts the content in the specified byte buffer.
            </summary>
            <param name="source">Read the range from this stream.</param>
            <param name="buffer">Buffer to copy stream bytes to.</param>
            <param name="offset">The offset in the buffer to start writing.</param>
            <param name="count">Number of bytes available to write to in the buffer.</param>
            <returns></returns>
            <remarks>
                The stream must support seeking since this method will move to our range position before
                start reading. Do note that the move is only made for the first read. Make sure that the position isn't changed
                until
                everything have been read in this range.
            </remarks>
        </member>
        <member name="M:Griffin.Net.Protocols.Http.Range.ToString">
            <summary>
                Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
                A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:Griffin.Net.Protocols.Http.RangeCollection">
            <summary>
            Collection of ranges which have been specified in the Range header.
            </summary>
        </member>
        <member name="P:Griffin.Net.Protocols.Http.RangeCollection.TotalLength">
            <summary>
            Total length of all ranges (i.e. the number of bytes to transfer)
            </summary>
        </member>
        <member name="P:Griffin.Net.Protocols.Http.RangeCollection.Item(System.Int32)">
            <summary>
            Get one of the ranges.
            </summary>
            <param name="index">Zero based index</param>
            <returns>Range</returns>
        </member>
        <member name="P:Griffin.Net.Protocols.Http.RangeCollection.Count">
            <summary>
            Gets number of ranges
            </summary>
        </member>
        <member name="M:Griffin.Net.Protocols.Http.RangeCollection.GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Griffin.Net.Protocols.Http.RangeCollection.Parse(System.String,System.Int32)">
            <summary>
            Parse range header value
            </summary>
            <param name="header">The "Range" header value</param>
            <param name="streamLength">File size (or size of the entire stream)</param>
        </member>
        <member name="M:Griffin.Net.Protocols.Http.RangeCollection.ToHtmlHeaderValue(System.Int32)">
            <summary>
            Create a string which is valid as value in the Content-Range header.
            </summary>
            <param name="streamLength">Length of the stream.</param>
            <returns><c>bytes X/Y</c></returns>
        </member>
        <member name="T:Griffin.Net.Protocols.Http.Serializers.FormAndFilesResult">
            <summary>
            Result from decoders.
            </summary>
        </member>
        <member name="P:Griffin.Net.Protocols.Http.Serializers.FormAndFilesResult.Files">
            <summary>
            Collection of files (or an empty collection)
            </summary>
        </member>
        <member name="P:Griffin.Net.Protocols.Http.Serializers.FormAndFilesResult.Form">
            <summary>
            HTTP form items (or an empty form)
            </summary>
        </member>
        <member name="T:Griffin.Net.Protocols.Http.Serializers.MultipartSerializer">
            <summary>
                Decodes multipart files.
            </summary>
            <remarks>
                <para>
                    Uses <c>Environment.GetFolderPath(Environment.SpecialFolder.InternetCache)</c> as temporary storage. The folder
                    <c>/var/tmp/</c> is used if the special folder is not found.
                </para>
            </remarks>
        </member>
        <member name="F:Griffin.Net.Protocols.Http.Serializers.MultipartSerializer.FormData">
            <summary>
                form-data
            </summary>
        </member>
        <member name="F:Griffin.Net.Protocols.Http.Serializers.MultipartSerializer.MimeType">
            <summary>
                Returns <c>multipart/form-data</c>
            </summary>
        </member>
        <member name="P:Griffin.Net.Protocols.Http.Serializers.MultipartSerializer.SupportedContentTypes">
            <summary>
            Content types that this serializer supports.
            </summary>
        </member>
        <member name="M:Griffin.Net.Protocols.Http.Serializers.MultipartSerializer.Serialize(System.Object,System.IO.Stream,System.String@)">
            <summary>
            Serialize an object to the stream.
            </summary>
            <param name="source">Object to serialize</param>
            <param name="destination">Stream that the serialized version will be written to</param>
            <param name="contentType">If you include the type name to it after the format name, for instance <c>json;YourApp.DTO.User,YourApp</c></param>
            <returns>Content name (will be passed to the <see cref="M:Griffin.Net.Protocols.Serializers.IMessageSerializer.Deserialize(System.String,System.IO.Stream)"/> method in the other end)</returns>
            <exception cref="T:System.Runtime.Serialization.SerializationException">Deserialization failed</exception>
        </member>
        <member name="M:Griffin.Net.Protocols.Http.Serializers.MultipartSerializer.Deserialize(System.String,System.IO.Stream)">
            <summary>
            Deserialize the content from the stream.
            </summary>
            <param name="contentType">Used to identify the object which is about to be deserialized. Specified by the <c>Serialize()</c> method when invoked in the other end point.</param>
            <param name="source">Stream that contains the object to deserialize.</param>
            <returns>Created object</returns>
            <exception cref="T:System.Runtime.Serialization.SerializationException">Deserialization failed</exception>
        </member>
        <member name="T:Griffin.Net.Protocols.Http.Serializers.UrlFormattedMessageSerializer">
            <summary>
            Serializer for <c>application/x-www-form-urlencoded</c>
            </summary>
        </member>
        <member name="F:Griffin.Net.Protocols.Http.Serializers.UrlFormattedMessageSerializer.MimeType">
            <summary>
            The mimetype that this decoder is for.
            </summary>
            <value>application/x-www-form-urlencoded</value>
        </member>
        <member name="M:Griffin.Net.Protocols.Http.Serializers.UrlFormattedMessageSerializer.Serialize(System.Object,System.IO.Stream,System.String@)">
            <summary>
            Serialize an object to the stream.
            </summary>
            <param name="source">Object to serialize</param>
            <param name="destination">Stream that the serialized version will be written to</param>
            <param name="contentType">If you include the type name to it after the format name, for instance <c>json;YourApp.DTO.User,YourApp</c></param>
            <returns>Content name (will be passed to the <see cref="M:Griffin.Net.Protocols.Serializers.IMessageSerializer.Deserialize(System.String,System.IO.Stream)"/> method in the other end)</returns>
            <exception cref="T:System.Runtime.Serialization.SerializationException">Deserialization failed</exception>
        </member>
        <member name="P:Griffin.Net.Protocols.Http.Serializers.UrlFormattedMessageSerializer.SupportedContentTypes">
            <summary>
                Content types that this serializer supports.
            </summary>
        </member>
        <member name="M:Griffin.Net.Protocols.Http.Serializers.UrlFormattedMessageSerializer.Deserialize(System.String,System.IO.Stream)">
            <summary>
            Deserialize the content from the stream.
            </summary>
            <param name="contentType">Used to identify the object which is about to be deserialized. Specified by the <c>Serialize()</c> method when invoked in the other end point.</param>
            <param name="source">Stream that contains the object to deserialize.</param>
            <returns>Created object</returns>
            <exception cref="T:System.Runtime.Serialization.SerializationException">Deserialization failed</exception>
        </member>
        <member name="T:Griffin.Net.Protocols.Http.WebSocket.IWebSocketMessage">
            <summary>
            Interface for WebSocket messages
            </summary>
        </member>
        <member name="P:Griffin.Net.Protocols.Http.WebSocket.IWebSocketMessage.Opcode">
            <summary>
            Type of message
            </summary>
        </member>
        <member name="P:Griffin.Net.Protocols.Http.WebSocket.IWebSocketMessage.Payload">
            <summary>
            Message payload
            </summary>
        </member>
        <member name="T:Griffin.Net.Protocols.Http.WebSocket.WebSocketClientConnectedEventArgs">
            <summary>
            WebSocket Connected Event which includes the handshake request and response
            </summary>
        </member>
        <member name="M:Griffin.Net.Protocols.Http.WebSocket.WebSocketClientConnectedEventArgs.#ctor(Griffin.Net.Channels.ITcpChannel,Griffin.Net.Protocols.Http.IHttpRequest,Griffin.Net.Protocols.Http.IHttpResponse)">
            <summary>
            Create a new isntance of <see cref="T:Griffin.Net.Protocols.Http.WebSocket.WebSocketClientConnectedEventArgs"/>
            </summary>
            <param name="channel">Channel used for transfers</param>
            <param name="request">Request (should contain the upgrade request)</param>
            <param name="response">Response (should include the upgrade confirmation)</param>
        </member>
        <member name="P:Griffin.Net.Protocols.Http.WebSocket.WebSocketClientConnectedEventArgs.Channel">
            <summary>
            Channel for the connected client
            </summary>
        </member>
        <member name="P:Griffin.Net.Protocols.Http.WebSocket.WebSocketClientConnectedEventArgs.Request">
            <summary>
            WebSocket handshake request
            </summary>
        </member>
        <member name="P:Griffin.Net.Protocols.Http.WebSocket.WebSocketClientConnectedEventArgs.Response">
            <summary>
            WebSocket handshake response
            </summary>
        </member>
        <member name="T:Griffin.Net.Protocols.Http.WebSocket.WebSocketClientConnectEventArgs">
            <summary>
            WebSocket Connect Event which includes the handshake request
            </summary>
        </member>
        <member name="M:Griffin.Net.Protocols.Http.WebSocket.WebSocketClientConnectEventArgs.#ctor(Griffin.Net.Channels.ITcpChannel,Griffin.Net.Protocols.Http.IHttpRequest)">
            <summary>
            Create a new instance of <see cref="T:Griffin.Net.Protocols.Http.WebSocket.WebSocketClientConnectEventArgs"/>
            </summary>
            <param name="channel">Channel that connected</param>
            <param name="request">Request that we received</param>
        </member>
        <member name="P:Griffin.Net.Protocols.Http.WebSocket.WebSocketClientConnectEventArgs.Request">
            <summary>
            WebSocket handshake request
            </summary>
        </member>
        <member name="T:Griffin.Net.Protocols.Http.WebSocket.WebSocketDecoder">
            <summary>
            Decodes websocket messages (once the HTTP handshake have been completed)
            </summary>
        </member>
        <member name="M:Griffin.Net.Protocols.Http.WebSocket.WebSocketDecoder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.Net.Protocols.Http.WebSocket.WebSocketDecoder"/> class.
            </summary>
        </member>
        <member name="M:Griffin.Net.Protocols.Http.WebSocket.WebSocketDecoder.#ctor(Griffin.Net.Protocols.Serializers.IMessageSerializer)">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.Net.Protocols.Http.WebSocket.WebSocketDecoder"/> class.
            </summary>
            <param name="messageSerializer">Custom message serializer (typically inherits from <see cref="T:Griffin.Net.Protocols.Http.WebSocket.WebSocketDecoder"/>.)</param>
        </member>
        <member name="P:Griffin.Net.Protocols.Http.WebSocket.WebSocketDecoder.MessageReceived">
            <summary>
                A message has been received.
            </summary>
            <remarks>
                Do note that streams are being reused by the decoder, so don't try to close it.
            </remarks>
        </member>
        <member name="M:Griffin.Net.Protocols.Http.WebSocket.WebSocketDecoder.ProcessReadBytes(Griffin.Net.Channels.ISocketBuffer)">
            <summary>
            We've received bytes from the socket. Build a message out of them.
            </summary>
            <param name="buffer">Buffer</param>
        </member>
        <member name="M:Griffin.Net.Protocols.Http.WebSocket.WebSocketDecoder.Clear">
            <summary>
            Reset decoder state so that we can decode a new message
            </summary>
        </member>
        <member name="M:Griffin.Net.Protocols.Http.WebSocket.WebSocketDecoder.OnHttpMessage(System.Object)">
            <summary>
            Intercept http messages and look for websocket upgrade requests
            </summary>
            <param name="message">message from http decoder</param>
        </member>
        <member name="T:Griffin.Net.Protocols.Http.WebSocket.WebSocketEncoder">
            <summary>
            Encodes web socket messages over  HTTP
            </summary>
        </member>
        <member name="M:Griffin.Net.Protocols.Http.WebSocket.WebSocketEncoder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.Net.Protocols.Http.WebSocket.WebSocketEncoder"/> class.
            </summary>
        </member>
        <member name="M:Griffin.Net.Protocols.Http.WebSocket.WebSocketEncoder.Prepare(System.Object)">
            <summary>
                Are about to send a new message
            </summary>
            <param name="message">Message to send</param>
            <remarks>
                Can be used to prepare the next message. for instance serialize it etc.
            </remarks>
            <exception cref="T:System.NotSupportedException">Message is of a type that the encoder cannot handle.</exception>
        </member>
        <member name="M:Griffin.Net.Protocols.Http.WebSocket.WebSocketEncoder.Send(Griffin.Net.Channels.ISocketBuffer)">
            <summary>
                Buffer structure used for socket send operations.
            </summary>
            <param name="buffer">
                Do note that there are not buffer attached to the structure, you have to assign one yourself using
                <see cref="M:Griffin.Net.Channels.ISocketBuffer.SetBuffer(System.Int32,System.Int32)" />. This choice was made
                to prevent unnecessary copy operations.
            </param>
        </member>
        <member name="M:Griffin.Net.Protocols.Http.WebSocket.WebSocketEncoder.OnSendCompleted(System.Int32)">
            <summary>
                The previous <see cref="M:Griffin.Net.IMessageEncoder.Send(Griffin.Net.Channels.ISocketBuffer)" /> has just completed.
            </summary>
            <param name="bytesTransferred"></param>
            <remarks><c>true</c> if the message have been sent successfully; otherwise <c>false</c>.</remarks>
        </member>
        <member name="M:Griffin.Net.Protocols.Http.WebSocket.WebSocketEncoder.Clear">
            <summary>
            Reset encoder state for a new HTTP request.
            </summary>
        </member>
        <member name="T:Griffin.Net.Protocols.Http.WebSocket.WebSocketFin">
            <summary>
            Is final frame or not
            </summary>
            <remarks>
            <para>The specification for this flag can be found in http://tools.ietf.org/html/rfc6455#section-5.2.
            </para>
            </remarks>
        </member>
        <member name="F:Griffin.Net.Protocols.Http.WebSocket.WebSocketFin.More">
            <summary>
            There are more fragments
            </summary>
        </member>
        <member name="F:Griffin.Net.Protocols.Http.WebSocket.WebSocketFin.Final">
            <summary>
            This is the final frame
            </summary>
        </member>
        <member name="T:Griffin.Net.Protocols.Http.WebSocket.WebSocketFrame">
            <summary>
            WebSocket frame
            </summary>
            <remarks>
            <para>
            The specification for this frame can be found at http://tools.ietf.org/html/rfc6455#section-5.2.
            </para>
            </remarks>
        </member>
        <member name="F:Griffin.Net.Protocols.Http.WebSocket.WebSocketFrame.FragmentLength">
            <summary>
            Maximum fragment length. (<value>65535</value>)
            Can be up to UInt64.MaxValue
            </summary>
        </member>
        <member name="P:Griffin.Net.Protocols.Http.WebSocket.WebSocketFrame.Fin">
            <summary>
            Final frame or not
            </summary>
        </member>
        <member name="P:Griffin.Net.Protocols.Http.WebSocket.WebSocketFrame.Rsv1">
            <summary>
            Extension switch one
            </summary>
        </member>
        <member name="P:Griffin.Net.Protocols.Http.WebSocket.WebSocketFrame.Rsv2">
            <summary>
            Extension switch two
            </summary>
        </member>
        <member name="P:Griffin.Net.Protocols.Http.WebSocket.WebSocketFrame.Rsv3">
            <summary>
            Extension switch three
            </summary>
        </member>
        <member name="P:Griffin.Net.Protocols.Http.WebSocket.WebSocketFrame.Opcode">
            <summary>
            Type of frame
            </summary>
        </member>
        <member name="P:Griffin.Net.Protocols.Http.WebSocket.WebSocketFrame.Mask">
            <summary>
            Is frame masked
            </summary>
        </member>
        <member name="P:Griffin.Net.Protocols.Http.WebSocket.WebSocketFrame.MaskingKey">
            <summary>
            Masking key
            </summary>
        </member>
        <member name="P:Griffin.Net.Protocols.Http.WebSocket.WebSocketFrame.Payload">
            <summary>
            Payload of the frame
            </summary>
        </member>
        <member name="P:Griffin.Net.Protocols.Http.WebSocket.WebSocketFrame.PayloadLength">
            <summary>
            Payload length
            </summary>
        </member>
        <member name="P:Griffin.Net.Protocols.Http.WebSocket.WebSocketFrame.ExtPayloadLength">
            <summary>
            Extended payload length
            </summary>
        </member>
        <member name="M:Griffin.Net.Protocols.Http.WebSocket.WebSocketFrame.Unmask">
            <summary>
            Applies the current masking key on the payload
            </summary>
        </member>
        <member name="T:Griffin.Net.Protocols.Http.WebSocket.WebSocketListener">
            <summary>
                A HttpListener that automatically transitions all incoming requests to WebSocket protocol.
            </summary>
        </member>
        <member name="M:Griffin.Net.Protocols.Http.WebSocket.WebSocketListener.#ctor(Griffin.Net.ChannelTcpListenerConfiguration)">
            <summary>
                Create a new instance of <see cref="T:Griffin.Net.Protocols.Http.WebSocket.WebSocketListener" />.
            </summary>
            <param name="configuration">Custom server configuration</param>
        </member>
        <member name="M:Griffin.Net.Protocols.Http.WebSocket.WebSocketListener.#ctor">
            <summary>
                Create a new instance of  <see cref="T:Griffin.Net.Protocols.Http.WebSocket.WebSocketListener" />.
            </summary>
        </member>
        <member name="P:Griffin.Net.Protocols.Http.WebSocket.WebSocketListener.WebSocketMessageReceived">
            <summary>
                WebSocket message received handler
            </summary>
        </member>
        <member name="E:Griffin.Net.Protocols.Http.WebSocket.WebSocketListener.WebSocketClientConnect">
            <summary>
                A websocket client have connected (websocket handshake request is complete)
            </summary>
        </member>
        <member name="E:Griffin.Net.Protocols.Http.WebSocket.WebSocketListener.WebSocketClientConnected">
            <summary>
                A websocket client have connected (websocket handshake response is complete)
            </summary>
        </member>
        <member name="E:Griffin.Net.Protocols.Http.WebSocket.WebSocketListener.WebSocketClientDisconnected">
            <summary>
                A websocket client have disconnected
            </summary>
        </member>
        <member name="M:Griffin.Net.Protocols.Http.WebSocket.WebSocketListener.OnMessage(Griffin.Net.Channels.ITcpChannel,System.Object)">
            <summary>
            Handles the upgrade
            </summary>
            <param name="source">Channel that we've received a request from</param>
            <param name="msg">Message received.</param>
        </member>
        <member name="T:Griffin.Net.Protocols.Http.WebSocket.WebSocketMask">
            <summary>
            Is data masked or not
            </summary>
            <remarks>
            <para>
            The specification for this mask can be found in http://tools.ietf.org/html/rfc6455#section-5.2.
            </para>
            </remarks>
        </member>
        <member name="F:Griffin.Net.Protocols.Http.WebSocket.WebSocketMask.Unmask">
            <summary>
            Data is not masked
            </summary>
        </member>
        <member name="F:Griffin.Net.Protocols.Http.WebSocket.WebSocketMask.Mask">
            <summary>
            Data is masked
            </summary>
        </member>
        <member name="T:Griffin.Net.Protocols.Http.WebSocket.WebSocketMessage">
            <summary>
            WebSocket message
            </summary>
        </member>
        <member name="M:Griffin.Net.Protocols.Http.WebSocket.WebSocketMessage.#ctor(Griffin.Net.Protocols.Http.WebSocket.WebSocketOpcode)">
            <summary>
            Creates a new WebSocket message with empty payload. This is useful for control messages such as PING, PONG and CLOSE
            </summary>
            <param name="opcode">opcode</param>
        </member>
        <member name="M:Griffin.Net.Protocols.Http.WebSocket.WebSocketMessage.#ctor(Griffin.Net.Protocols.Http.WebSocket.WebSocketOpcode,System.IO.Stream)">
            <summary>
            Create a new WebSocket message with predefined payload
            </summary>
            <param name="opcode">opcode</param>
            <param name="payload">payload</param>
        </member>
        <member name="P:Griffin.Net.Protocols.Http.WebSocket.WebSocketMessage.Opcode">
            <summary>
            Kind of web socket message
            </summary>
        </member>
        <member name="P:Griffin.Net.Protocols.Http.WebSocket.WebSocketMessage.Payload">
            <summary>
            Received message
            </summary>
        </member>
        <member name="T:Griffin.Net.Protocols.Http.WebSocket.WebSocketOpcode">
            <summary>
            Type of a websocket frame.
            </summary>
            <remarks>
            <para>
            The specification for this op code can be found in http://tools.ietf.org/html/rfc6455#section-5.2 and http://tools.ietf.org/html/rfc6455#section-11.8.
            </para>
            </remarks>
        </member>
        <member name="F:Griffin.Net.Protocols.Http.WebSocket.WebSocketOpcode.Continuation">
            <summary>
            Equivalent to numeric value 0.
            Indicates a continuation frame.
            </summary>
        </member>
        <member name="F:Griffin.Net.Protocols.Http.WebSocket.WebSocketOpcode.Text">
            <summary>
            Equivalent to numeric value 1.
            Indicates a text frame.
            </summary>
        </member>
        <member name="F:Griffin.Net.Protocols.Http.WebSocket.WebSocketOpcode.Binary">
            <summary>
            Equivalent to numeric value 2.
            Indicates a binary frame.
            </summary>
        </member>
        <member name="F:Griffin.Net.Protocols.Http.WebSocket.WebSocketOpcode.Close">
            <summary>
            Equivalent to numeric value 8.
            Indicates a connection close frame.
            </summary>
        </member>
        <member name="F:Griffin.Net.Protocols.Http.WebSocket.WebSocketOpcode.Ping">
            <summary>
            Equivalent to numeric value 9.
            Indicates a ping frame.
            </summary>
        </member>
        <member name="F:Griffin.Net.Protocols.Http.WebSocket.WebSocketOpcode.Pong">
            <summary>
            Equivalent to numeric value 10.
            Indicates a pong frame.
            </summary>
        </member>
        <member name="T:Griffin.Net.Protocols.Http.WebSocket.WebSocketRequest">
            <summary>
            WebSocket request includes the initial handshake request
            </summary>
        </member>
        <member name="P:Griffin.Net.Protocols.Http.WebSocket.WebSocketRequest.Handshake">
            <summary>
            Cookies of the handshake request
            </summary>
        </member>
        <member name="T:Griffin.Net.Protocols.Http.WebSocket.WebSocketResponse">
            <summary>
            WebSocket response
            </summary>
        </member>
        <member name="T:Griffin.Net.Protocols.Http.WebSocket.WebSocketRsv">
            <summary>
                Websocket extension switch
            </summary>
            <remarks>
                <para>
                    The specification for this option can be found in http://tools.ietf.org/html/rfc6455#section-5.2 and
                    http://tools.ietf.org/html/rfc6455#section-5.8.
                </para>
            </remarks>
        </member>
        <member name="F:Griffin.Net.Protocols.Http.WebSocket.WebSocketRsv.Off">
            <summary>
                Off
            </summary>
        </member>
        <member name="F:Griffin.Net.Protocols.Http.WebSocket.WebSocketRsv.On">
            <summary>
                On
            </summary>
        </member>
        <member name="T:Griffin.Net.Protocols.Http.WebSocket.WebSocketUpgradeRequest">
            <summary>
            HTTP request used to indicate that we want to use the WEBSOCKET protocol.
            </summary>
        </member>
        <member name="M:Griffin.Net.Protocols.Http.WebSocket.WebSocketUpgradeRequest.#ctor">
            <summary>
            Create a new instance of <see cref="T:Griffin.Net.Protocols.Http.WebSocket.WebSocketUpgradeRequest"/>.
            </summary>
        </member>
        <member name="T:Griffin.Net.Protocols.Http.WebSocket.WebSocketUpgradeResponse">
            <summary>
            Used to confirm that we can switch to WEBSOCKETs from regular HTTP Requests.
            </summary>
        </member>
        <member name="M:Griffin.Net.Protocols.Http.WebSocket.WebSocketUpgradeResponse.#ctor(System.String)">
            <summary>
            Create a new instance of <see cref="T:Griffin.Net.Protocols.Http.WebSocket.WebSocketUpgradeResponse"/>
            </summary>
            <param name="webSocketKey">Key from the HTTP request.</param>
        </member>
        <member name="M:Griffin.Net.Protocols.Http.WebSocket.WebSocketUtils.HashWebSocketKey(System.String)">
            <summary>
            Hashes the client WebSocket key for the server
            </summary>
            <param name="webSocketKey"></param>
            <returns></returns>
        </member>
        <member name="M:Griffin.Net.Protocols.Http.WebSocket.WebSocketUtils.CreateWebSocketKey">
            <summary>
            Creates a new random WebSocket key for the client
            </summary>
            <returns></returns>
        </member>
        <member name="M:Griffin.Net.Protocols.Http.WebSocket.WebSocketUtils.IsWebSocketUpgrade(Griffin.Net.Protocols.Http.IHttpMessage)">
            <summary>
            Check if http message is a valid WebSocket upgrade request
            </summary>
            <param name="httpMessage">message to check</param>
            <returns>true if message is a valid WebSocket upgrade request</returns>
        </member>
        <member name="M:Griffin.Net.Protocols.Http.WebSocket.WebSocketUtils.CreateMaskingKey">
            <summary>
            Creates a new radom masking key
            </summary>
            <returns>masking key</returns>
        </member>
        <member name="M:Griffin.Net.Protocols.Http.WebSocket.WebSocketUtils.ToBigEndianUInt16(System.Byte[])">
            <summary>
            Helper function to convert a byte array to a short using big endian
            </summary>
            <param name="value">byte array</param>
            <returns></returns>
        </member>
        <member name="M:Griffin.Net.Protocols.Http.WebSocket.WebSocketUtils.ToBigEndianUInt64(System.Byte[])">
            <summary>
            Helper function to convert a byte array to a long using big endian
            </summary>
            <param name="value">byte array</param>
            <returns></returns>
        </member>
        <member name="M:Griffin.Net.Protocols.Http.WebSocket.WebSocketUtils.GetBigEndianBytes(System.UInt16)">
            <summary>
            Helper function to convert a short to a byte array using big endian
            </summary>
            <param name="value">short</param>
            <returns></returns>
        </member>
        <member name="M:Griffin.Net.Protocols.Http.WebSocket.WebSocketUtils.GetBigEndianBytes(System.UInt64)">
            <summary>
            Helper function to convert a long to a byte array using big endian
            </summary>
            <param name="value">long</param>
            <returns></returns>
        </member>
        <member name="T:Griffin.Net.Protocols.IMessagingListener">
            <summary>
            Used to listen on new messages
            </summary>
        </member>
        <member name="P:Griffin.Net.Protocols.IMessagingListener.ChannelFactory">
            <summary>
                Used to create channels. Default is <see cref="T:Griffin.Net.Channels.TcpChannelFactory" />.
            </summary>
        </member>
        <member name="P:Griffin.Net.Protocols.IMessagingListener.MessageReceived">
            <summary>
                Delegate invoked when a new message is received
            </summary>
        </member>
        <member name="P:Griffin.Net.Protocols.IMessagingListener.MessageSent">
            <summary>
                Delegate invoked when a message has been sent to the remote end point
            </summary>
        </member>
        <member name="E:Griffin.Net.Protocols.IMessagingListener.ClientConnected">
            <summary>
                A client has connected (nothing has been sent or received yet)
            </summary>
        </member>
        <member name="E:Griffin.Net.Protocols.IMessagingListener.ClientDisconnected">
            <summary>
                A client has disconnected
            </summary>
        </member>
        <member name="M:Griffin.Net.Protocols.IMessagingListener.Start(System.Net.IPAddress,System.Int32)">
            <summary>
                Start this listener
            </summary>
            <param name="address">Address to accept connections on</param>
            <param name="port">Port to use. Set to <c>0</c> to let the OS decide which port to use. </param>
            <seealso cref="P:Griffin.Net.ChannelTcpListener.LocalPort" />
        </member>
        <member name="M:Griffin.Net.Protocols.IMessagingListener.Stop">
            <summary>
            Stop the listener.
            </summary>
        </member>
        <member name="T:Griffin.Net.Protocols.MicroMsg.MicroMessageClient">
            <summary>
                A client implementation for transferring objects over the MicroMessage protocol
            </summary>
        </member>
        <member name="M:Griffin.Net.Protocols.MicroMsg.MicroMessageClient.#ctor(Griffin.Net.Protocols.Serializers.IMessageSerializer)">
            <summary>
                Initializes a new instance of the <see cref="T:Griffin.Net.Protocols.MicroMsg.MicroMessageClient" /> class.
            </summary>
            <param name="serializer">The serializer.</param>
        </member>
        <member name="M:Griffin.Net.Protocols.MicroMsg.MicroMessageClient.#ctor(Griffin.Net.Protocols.Serializers.IMessageSerializer,Griffin.Net.Channels.ClientSideSslStreamBuilder)">
            <summary>
                Initializes a new instance of the <see cref="T:Griffin.Net.Protocols.MicroMsg.MicroMessageClient" /> class.
            </summary>
            <param name="serializer">The serializer.</param>
            <param name="sslStreamBuilder">The SSL stream builder.</param>
        </member>
        <member name="M:Griffin.Net.Protocols.MicroMsg.MicroMessageClient.ConnectAsync(System.Net.IPAddress,System.Int32)">
            <summary>
                Connect to server
            </summary>
            <param name="address">The address.</param>
            <param name="port">The port.</param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException">
                Socket is already connected
                or
                There is already a pending connect.
            </exception>
        </member>
        <member name="M:Griffin.Net.Protocols.MicroMsg.MicroMessageClient.ReceiveAsync">
            <summary>
                Receive an object
            </summary>
            <returns>completion task</returns>
        </member>
        <member name="M:Griffin.Net.Protocols.MicroMsg.MicroMessageClient.SendAsync(System.Object)">
            <summary>
                Send an object
            </summary>
            <param name="message">Message to send</param>
            <returns>completion task (completed once the message have been delivered).</returns>
            <remarks>
                <para>All objects are enqueued and sent in order as soon as possible</para>
            </remarks>
        </member>
        <member name="T:Griffin.Net.Protocols.MicroMsg.MicroMessageDecoder">
            <summary>
            Decode messages encoded with <see cref="T:Griffin.Net.Protocols.MicroMsg.MicroMessageEncoder"/>.
            </summary>
            <remarks>
            <para>As <see cref="T:Griffin.Net.Protocols.MicroMsg.MicroMessageEncoder"/> can out-of-the-box send <c>Stream</c>-drived classes and <c>byte[]</c> arrays this class
            has to handle that too.
            </para>
            <para>
            Streams will always be either <c>MemoryStream</c> or <c>FileStream</c> depending of the content-length. Same things goes for messages
            which are sent as <c>byte[]</c> arrays. They will also be received as streams.
            </para>
            </remarks>
        </member>
        <member name="F:Griffin.Net.Protocols.MicroMsg.MicroMessageDecoder.Version">
            <summary>
            Protocol version
            </summary>
        </member>
        <member name="F:Griffin.Net.Protocols.MicroMsg.MicroMessageDecoder.FixedHeaderLength">
            <summary>
            Size of the fixed header: version (1), content length (4), type name length (1) = 8
            </summary>
            <remarks>
            The header size field is not included in the actual header count as it always have to be read to 
            get the actual header size.
            </remarks>
        </member>
        <member name="M:Griffin.Net.Protocols.MicroMsg.MicroMessageDecoder.#ctor(Griffin.Net.Protocols.Serializers.IMessageSerializer)">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.Net.Protocols.MicroMsg.MicroMessageDecoder" /> class.
            </summary>
            <param name="serializer">The serializer used to decode the message that is being transported with MicroMsg.</param>
            <exception cref="T:System.ArgumentNullException">serializer</exception>
        </member>
        <member name="M:Griffin.Net.Protocols.MicroMsg.MicroMessageDecoder.Clear">
            <summary>
            Reset the decoder so that we can parse a new message
            </summary>
        </member>
        <member name="P:Griffin.Net.Protocols.MicroMsg.MicroMessageDecoder.MessageReceived">
            <summary>
            A new message have been received.
            </summary>
            <remarks>
            <para>The message will be a deserialized message or a <c>Stream</c> derived object (if the sender sent a <c>Stream</c> or a <c>byte[]</c> array).</para>
            </remarks>
        </member>
        <member name="M:Griffin.Net.Protocols.MicroMsg.MicroMessageDecoder.ProcessReadBytes(Griffin.Net.Channels.ISocketBuffer)">
            <summary>
            Process bytes that we've received on the socket.
            </summary>
            <param name="buffer">Buffer to process.</param>
        </member>
        <member name="T:Griffin.Net.Protocols.MicroMsg.MicroMessageEncoder">
            <summary>
                Takes any object that the serializer supports and transfers it over the wire.
            </summary>
            <remarks>
                The encoder also natively supports <c>byte[]</c> arrays and <c>Stream</c> derived objects (as long as the stream
                have a size specified). These objects
                will be transferred without invoking the serializer.
            </remarks>
        </member>
        <member name="F:Griffin.Net.Protocols.MicroMsg.MicroMessageEncoder.Version">
            <summary>
                PROTOCOL version
            </summary>
        </member>
        <member name="F:Griffin.Net.Protocols.MicroMsg.MicroMessageEncoder.FixedHeaderLength">
            <summary>
                Size of the fixed header: version (1), content length (4), type name length (1) = 8
            </summary>
            <remarks>
                The header size field is not included in the actual header count as it always have to be read to
                get the actual header size.
            </remarks>
        </member>
        <member name="M:Griffin.Net.Protocols.MicroMsg.MicroMessageEncoder.#ctor(Griffin.Net.Protocols.Serializers.IMessageSerializer)">
            <summary>
                Initializes a new instance of the <see cref="T:Griffin.Net.Protocols.MicroMsg.MicroMessageEncoder" /> class.
            </summary>
            <param name="serializer">
                Serializer used to serialize the messages that should be sent. You might want to pick a
                serializer which is reasonable fast.
            </param>
        </member>
        <member name="M:Griffin.Net.Protocols.MicroMsg.MicroMessageEncoder.#ctor(Griffin.Net.Protocols.Serializers.IMessageSerializer,Griffin.Net.Buffers.IBufferSlice)">
            <summary>
                Initializes a new instance of the <see cref="T:Griffin.Net.Protocols.MicroMsg.MicroMessageEncoder" /> class.
            </summary>
            <param name="serializer">
                Serializer used to serialize the messages that should be sent. You might want to pick a
                serializer which is reasonable fast.
            </param>
            <param name="bufferSlice">Used when sending information.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
                bufferSlice; At least the header should fit in the buffer, and the header
                can be up to 520 bytes in the current version.
            </exception>
        </member>
        <member name="M:Griffin.Net.Protocols.MicroMsg.MicroMessageEncoder.Prepare(System.Object)">
            <summary>
                Are about to send a new message
            </summary>
            <param name="message">Message to send</param>
            <remarks>
                Can be used to prepare the next message. for instance serialize it etc.
            </remarks>
            <exception cref="T:System.NotSupportedException">Message is of a type that the encoder cannot handle.</exception>
        </member>
        <member name="M:Griffin.Net.Protocols.MicroMsg.MicroMessageEncoder.Send(Griffin.Net.Channels.ISocketBuffer)">
            <summary>
                Serialize message and sent it add it to the buffer
            </summary>
            <param name="args">Socket buffer</param>
        </member>
        <member name="M:Griffin.Net.Protocols.MicroMsg.MicroMessageEncoder.OnSendCompleted(System.Int32)">
            <summary>
                The previous <see cref="M:Griffin.Net.IMessageEncoder.Send(Griffin.Net.Channels.ISocketBuffer)" /> has just completed.
            </summary>
            <param name="bytesTransferred"></param>
            <remarks>
                <c>true</c> if the message have been sent successfully; otherwise <c>false</c>.
            </remarks>
        </member>
        <member name="M:Griffin.Net.Protocols.MicroMsg.MicroMessageEncoder.Clear">
            <summary>
                Remove everything used for the last message
            </summary>
        </member>
        <member name="T:Griffin.Net.Protocols.MicroMsg.MicroMessageTcpListener">
            <summary>
            Server for the MicroMsg protocol
            </summary>
        </member>
        <member name="M:Griffin.Net.Protocols.MicroMsg.MicroMessageTcpListener.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.Net.Protocols.MicroMsg.MicroMessageTcpListener"/> class.
            </summary>
        </member>
        <member name="M:Griffin.Net.Protocols.MicroMsg.MicroMessageTcpListener.#ctor(Griffin.Net.ChannelTcpListenerConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.Net.Protocols.MicroMsg.MicroMessageTcpListener"/> class.
            </summary>
            <param name="configuration">Configuration to use.</param>
        </member>
        <member name="T:Griffin.Net.Protocols.MicroMsg.NamespaceDoc">
            <summary>
                MicroMessage is a small message format with a binary header.
            </summary>
            <remarks>
            <para>
            The header was designed to be backwards compatible and support newer versions. The contents of the body is unspecified and up to the peers to decide.
            </para>
                The header contains the following fields:
                <list type="table">
                    <item>
                        <term>Headerlength</term>
                        <description><c>ushort</c>, number of bytes that are for the header. First byte is directly after this field. <para>This field was added
            to be able to include new features without affecting previous versions</para></description>
                    </item>
                    <item>
                        <term>Version</term>
                        <description><c>byte</c>, Defines the version of the micro protocol. Current version is 1.</description>
                    </item>
                    <item>
                        <term>ContentLength</term>
                        <description><c>int</c>, Defines the length of the body. The body starts directly after the header.</description>
                    </item>
                    <item>
                        <term>Typelength</term>
                        <description><c>ubyte</c>, Defines the length of the next header value.</description>
                    </item>
                    <item>
                        <term>TypeName</term>
                        <description>
                            Fully qualified assembly name of the type that is our payload.
                            <para>
                                The default encoding of the name is UTF8. You may use another encoding (to support foreign characters in the type names), but then it's important that you communicate out the encoding.
                            </para>
                        </description>
                    </item>
                </list>
                <para>
                    To work with computers that use different byte ordering, all integer values that are sent over the network are sent in network byte order which has the most significant byte first.
                </para>
            </remarks>
        </member>
        <member name="T:Griffin.Net.Protocols.Serializers.CompositeIMessageSerializer">
            <summary>
                Can provide one or more decoders.
            </summary>
            <remarks>
                The default implementation constructor uses <see cref="T:Griffin.Net.Protocols.Http.Serializers.UrlFormattedMessageSerializer" /> and
                <see cref="T:Griffin.Net.Protocols.Http.Serializers.MultipartSerializer" />
            </remarks>
        </member>
        <member name="M:Griffin.Net.Protocols.Serializers.CompositeIMessageSerializer.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Griffin.Net.Protocols.Serializers.CompositeIMessageSerializer" /> class.
            </summary>
        </member>
        <member name="P:Griffin.Net.Protocols.Serializers.CompositeIMessageSerializer.DefaultEncoding">
            <summary>
                Encoding to use if not specified in the HTTP request.
            </summary>
        </member>
        <member name="M:Griffin.Net.Protocols.Serializers.CompositeIMessageSerializer.Serialize(System.Object,System.IO.Stream,System.String@)">
            <summary>
                Serialize an object to the stream.
            </summary>
            <param name="source">Object to serialize</param>
            <param name="destination">Stream that the serialized version will be written to</param>
            <param name="contentType">
                If you include the type name to it after the format name, for instance
                <c>json;YourApp.DTO.User,YourApp</c>
            </param>
            <returns>Content name (will be passed to the <see cref="M:Griffin.Net.Protocols.Serializers.IMessageSerializer.Deserialize(System.String,System.IO.Stream)" /> method in the other end)</returns>
            <exception cref="T:System.Runtime.Serialization.SerializationException">Deserialization failed</exception>
        </member>
        <member name="P:Griffin.Net.Protocols.Serializers.CompositeIMessageSerializer.SupportedContentTypes">
            <summary>
                Content types that this serializer supports.
            </summary>
        </member>
        <member name="M:Griffin.Net.Protocols.Serializers.CompositeIMessageSerializer.Deserialize(System.String,System.IO.Stream)">
            <summary>
                Deserialize the content from the stream.
            </summary>
            <param name="contentType">
                Used to identify the object which is about to be deserialized. Specified by the
                <c>Serialize()</c> method when invoked in the other end point.
            </param>
            <param name="source">Stream that contains the object to deserialize.</param>
            <returns>Created object</returns>
            <exception cref="T:System.Runtime.Serialization.SerializationException">Deserialization failed</exception>
        </member>
        <member name="M:Griffin.Net.Protocols.Serializers.CompositeIMessageSerializer.Add(System.String,Griffin.Net.Protocols.Serializers.IMessageSerializer)">
            <summary>
                Add another handlers.
            </summary>
            <param name="mimeType">Mime type</param>
            <param name="decoder">The decoder implementation. Must be thread safe.</param>
        </member>
        <member name="T:Griffin.Net.Protocols.Serializers.DataContractMessageSerializer">
            <summary>
                Uses the DataContract XML serializer.
            </summary>
        </member>
        <member name="F:Griffin.Net.Protocols.Serializers.DataContractMessageSerializer.MimeType">
            <summary>
                <c>application/x-datacontract</c>
            </summary>
        </member>
        <member name="M:Griffin.Net.Protocols.Serializers.DataContractMessageSerializer.Serialize(System.Object,System.IO.Stream,System.String@)">
            <summary>
            Serialize an object to the stream.
            </summary>
            <param name="source">Object to serialize</param>
            <param name="destination">Stream that the serialized version will be written to</param>
            <param name="contentType">If you include the type name to it after the format name, for instance
            <c>json;type=YourApp.DTO.User-YourApp</c></param>
        </member>
        <member name="P:Griffin.Net.Protocols.Serializers.DataContractMessageSerializer.SupportedContentTypes">
            <summary>
                Content types that this serializer supports.
            </summary>
        </member>
        <member name="M:Griffin.Net.Protocols.Serializers.DataContractMessageSerializer.Deserialize(System.String,System.IO.Stream)">
            <summary>
            Deserialize the content from the stream.
            </summary>
            <param name="contentType">Used to identify the object which is about to be deserialized. Specified by the
            <c>Serialize()</c> method when invoked in the other end point.</param>
            <param name="source">Stream that contains the object to deserialize.</param>
            <returns>
            Created object
            </returns>
            <exception cref="T:System.ArgumentNullException">contentType</exception>
            <exception cref="T:System.FormatException">Failed to build a type from ' + contentType + '.</exception>
        </member>
        <member name="T:Griffin.Net.Protocols.Serializers.DecoderFailureException">
            <summary>
                A decoder failed to decode request/response body
            </summary>
        </member>
        <member name="M:Griffin.Net.Protocols.Serializers.DecoderFailureException.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Griffin.Net.Protocols.Serializers.DecoderFailureException" /> class.
            </summary>
            <param name="errorMessage">The error message.</param>
        </member>
        <member name="M:Griffin.Net.Protocols.Serializers.DecoderFailureException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.Net.Protocols.Serializers.DecoderFailureException"/> class.
            </summary>
            <param name="errorMessage">The error message.</param>
            <param name="inner">The inner.</param>
        </member>
        <member name="T:Griffin.Net.Protocols.Serializers.IMessageSerializer">
            <summary>
                Serialize or deserialize messages.
            </summary>
            <remarks>
                <para>
                    A suggestions is that you use the <c>Type.AssemblyQualifiedName</c> as the content name of your application
                    is .NET only.
                </para>
                <para>The methods must be isolated (i.e. should be able to call the same instance them from several threads).</para>
                <para>
                    The content type should follow the format defined by the HTTP specification (RFC2616) where the media type can
                    be followed by a semicolon and then
                    commaseparated key-value pairs. However, we might want to include the .NET type in the message which contains a
                    colon between the FullName and the Assembly. In the content type
                    we therefore need to replace it with a hypen. See example below
                </para>
                <code>
            application/json;type=Your.App.Namespace.SomeType-YourApp
            </code>
                <para>
                    That allows us to support media types which are used by HTTP and other protocols where other parameters are
                    included, for example:
                </para>
                <code>
            application/x-www-form-urlencoded;charset=windows-1250;type=Your.App.Namespace.SomeType-YourApp
            </code>
            <para>
            You can use <see cref="T:Griffin.Net.Protocols.Http.Messages.HttpHeaderValue"/> if you want to extract the actual content type and it's parameters.
            </para>
            </remarks>
        </member>
        <member name="P:Griffin.Net.Protocols.Serializers.IMessageSerializer.SupportedContentTypes">
            <summary>
                Content types that this serializer supports.
            </summary>
        </member>
        <member name="M:Griffin.Net.Protocols.Serializers.IMessageSerializer.Deserialize(System.String,System.IO.Stream)">
            <summary>
                Deserialize the content from the stream.
            </summary>
            <param name="contentType">
                Used to identify the object which is about to be deserialized. Specified by the
                <c>Serialize()</c> method when invoked in the other end point.
            </param>
            <param name="source">Stream that contains the object to deserialize.</param>
            <returns>Created object</returns>
            <exception cref="T:System.Runtime.Serialization.SerializationException">Deserialization failed</exception>
        </member>
        <member name="M:Griffin.Net.Protocols.Serializers.IMessageSerializer.Serialize(System.Object,System.IO.Stream,System.String@)">
            <summary>
                Serialize an object to the stream.
            </summary>
            <param name="source">Object to serialize</param>
            <param name="destination">Stream that the serialized version will be written to</param>
            <param name="contentType">
                If you include the type name to it after the format name, for instance
                <c>json;type=YourApp.DTO.User-YourApp</c>
            </param>
            <returns>Content name (will be passed to the <see cref="M:Griffin.Net.Protocols.Serializers.IMessageSerializer.Deserialize(System.String,System.IO.Stream)" /> method in the other end)</returns>
            <exception cref="T:System.Runtime.Serialization.SerializationException">Deserialization failed</exception>
        </member>
        <member name="T:Griffin.Net.Protocols.Serializers.Mono.HttpMultipart">
             <summary>
             Stream-based multipart handling.
            
             In this incarnation deals with an HttpInputStream as we are now using
             IntPtr-based streams instead of byte [].   In the future, we will also
             send uploads above a certain threshold into the disk (to implement
             limit-less HttpInputFiles). 
             </summary>
             <remarks>
             Taken from HttpRequest in mono (http://www.mono-project.com)
             </remarks>
        </member>
        <member name="T:Griffin.Net.Protocols.Strings.StringDecoder">
            <summary>
            Decodes messages that are represented as strings.
            </summary>
        </member>
        <member name="M:Griffin.Net.Protocols.Strings.StringDecoder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.Net.Protocols.Strings.StringDecoder"/> class.
            </summary>
        </member>
        <member name="P:Griffin.Net.Protocols.Strings.StringDecoder.Encoding">
            <summary>
            Text encoding to use.
            </summary>
        </member>
        <member name="M:Griffin.Net.Protocols.Strings.StringDecoder.ProcessReadBytes(Griffin.Net.Channels.ISocketBuffer)">
            <summary>
                We've received bytes from the socket. Build a message out of them.
            </summary>
            <param name="buffer">Buffer</param>
            <remarks></remarks>
        </member>
        <member name="M:Griffin.Net.Protocols.Strings.StringDecoder.Clear">
            <summary>
            Reset decoder state.
            </summary>
        </member>
        <member name="P:Griffin.Net.Protocols.Strings.StringDecoder.MessageReceived">
            <summary>
                A message has been received.
            </summary>
            <remarks>
                Do note that streams are being reused by the decoder, so don't try to close it.
            </remarks>
        </member>
        <member name="T:Griffin.Net.Protocols.Strings.StringEncoder">
            <summary>
            Encodes strings using UTF8 and sends them over the network with a binary header (<c>int</c>).
            </summary>
        </member>
        <member name="M:Griffin.Net.Protocols.Strings.StringEncoder.Prepare(System.Object)">
            <summary>
                Prepare the encoder so that the specified object can be encoded next.
            </summary>
            <param name="message">Message to send</param>
            <remarks>
                Can be used to prepare the next message. for instance serialize it etc.
            </remarks>
            <exception cref="T:System.NotSupportedException">Message is of a type that the encoder cannot handle.</exception>
        </member>
        <member name="M:Griffin.Net.Protocols.Strings.StringEncoder.Send(Griffin.Net.Channels.ISocketBuffer)">
            <summary>
                Buffer structure used for socket send operations.
            </summary>
            <param name="buffer">
                Do note that there are not buffer attached to the structure, you have to assign one yourself using
                <see cref="M:Griffin.Net.Channels.ISocketBuffer.SetBuffer(System.Int32,System.Int32)" />. This choice was made
                to prevent unnecessary copy operations.
            </param>
            <remarks>
                The <c>buffer</c> variable is typically a wrapper around <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" />, but may be something
                else if required.
            </remarks>
        </member>
        <member name="M:Griffin.Net.Protocols.Strings.StringEncoder.OnSendCompleted(System.Int32)">
            <summary>
                The previous <see cref="M:Griffin.Net.IMessageEncoder.Send(Griffin.Net.Channels.ISocketBuffer)" /> has just completed.
            </summary>
            <param name="bytesTransferred"></param>
            <remarks><c>true</c> if the message have been sent successfully; otherwise <c>false</c>.</remarks>
        </member>
        <member name="M:Griffin.Net.Protocols.Strings.StringEncoder.Clear">
            <summary>
                Remove everything used for the last message
            </summary>
        </member>
        <member name="T:Griffin.ObjectExtensions">
            <summary>
            Extension methods for object.
            </summary>
        </member>
        <member name="M:Griffin.ObjectExtensions.ToDictionary(System.Object)">
            <summary>
                Turn anonymous object to dictionary
            </summary>
            <param name="data">Anonymous object</param>
            <returns>Dictionary</returns>
        </member>
        <member name="T:Griffin.QueueFullException">
            <summary>
                Queue is full and no more items may be enqueued.
            </summary>
        </member>
        <member name="M:Griffin.QueueFullException.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Griffin.QueueFullException" /> class.
            </summary>
            <param name="queueName">Name of the queue.</param>
        </member>
        <member name="M:Griffin.QueueFullException.#ctor(System.String,System.Exception)">
            <summary>
                Initializes a new instance of the <see cref="T:Griffin.QueueFullException" /> class.
            </summary>
            <param name="queueName">Name of the queue.</param>
            <param name="inner">The inner.</param>
        </member>
        <member name="P:Griffin.QueueFullException.QueueName">
            <summary>
                Name of the queue that is full.
            </summary>
        </member>
        <member name="T:Griffin.Reflection.ExpressionExtensions">
            <summary>
                Small helpers for expressions
            </summary>
        </member>
        <member name="M:Griffin.Reflection.ExpressionExtensions.GetMemberInfo(System.Linq.Expressions.Expression)">
            <summary>
            Gets the member info.
            </summary>
            <param name="method">The method.</param>
            <returns></returns>
            <remarks>Used to get property information</remarks>
        </member>
        <member name="M:Griffin.Reflection.ExpressionExtensions.GetPropertyInfo``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Get property information.
            </summary>
            <typeparam name="TSource">Entity type.</typeparam>
            <typeparam name="TProperty">Expression pointing at the property.</typeparam>
            <param name="propertyLambda">The property lambda.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">
            </exception>
        </member>
        <member name="T:Griffin.Security.IPasswordHasher">
            <summary>
                Used to hash passwords allowing different parts of Griffin.Framework to reuse the hashing to provide features like
                authentication.
            </summary>
        </member>
        <member name="M:Griffin.Security.IPasswordHasher.Compare(System.String,System.String)">
            <summary>
                Compare two hashes.
            </summary>
            <param name="hashedPassword1">First hash</param>
            <param name="hashedPassword2">Second hash</param>
            <returns>
                Allows us to make sure that all comparisons take about the same time so that the comparison is not exited
                early if the hashes differ in the beginning.
            </returns>
        </member>
        <member name="M:Griffin.Security.IPasswordHasher.CreateSalt">
            <summary>
                Generate a salt that can be used to hash passwords.
            </summary>
            <returns>Generated salt</returns>
        </member>
        <member name="M:Griffin.Security.IPasswordHasher.HashPassword(System.String,System.String)">
            <summary>
                Hash password using the specified salt
            </summary>
            <param name="password"></param>
            <param name="salt"></param>
            <returns></returns>
            <remarks>
                <para>
                    Implementations should hashed passwords by using colon as separator.
                    <code>Hash(string.Format("{0}:{1}", password, salt))</code>
                </para>
            </remarks>
        </member>
        <member name="T:Griffin.Security.PasswordHasherRfc2898">
            <summary>
                Uses <c>RNGCryptoServiceProvider</c> to generate the salt and <c>Rfc2898DeriveBytes</c> for hashing.
            </summary>
        </member>
        <member name="M:Griffin.Security.PasswordHasherRfc2898.CreateSalt">
            <summary>
                Uses <c>RNGCryptoServiceProvider</c> to generate a 24 byte long salt which is then base64 encoded.
            </summary>
            <returns>Base64 encoded salt</returns>
        </member>
        <member name="M:Griffin.Security.PasswordHasherRfc2898.HashPassword(System.String,System.String)">
            <summary>
                Hashes password using 1000 iterations
            </summary>
            <param name="password">Password to hash</param>
            <param name="salt">Typically created with <see cref="M:Griffin.Security.PasswordHasherRfc2898.CreateSalt" /></param>
            <returns></returns>
            <remarks>
                <para>
                    The hash is generated from "password:salt" which is then hashed using <c>Rfc2898DeriveBytes</c> and 1000
                    iterations.
                </para>
            </remarks>
        </member>
        <member name="M:Griffin.Security.PasswordHasherRfc2898.Compare(System.String,System.String)">
            <summary>
                Compares two passwords using a compare in length-constant time.
            </summary>
            <param name="hashedPassword1">First hash</param>
            <param name="hashedPassword2">Second hash</param>
            <returns><c>true</c> if they are equal; otherwise false.</returns>
        </member>
        <member name="M:Griffin.Security.PasswordHasherRfc2898.SlowEquals(System.Byte[],System.Byte[])">
            <summary>
                Compares two byte arrays in length-constant time. This comparison
                method is used so that password hashes cannot be extracted from
                on-line systems using a timing attack and then attacked off-line.
            </summary>
            <param name="a">The first byte array.</param>
            <param name="b">The second byte array.</param>
            <returns>True if both byte arrays are equal. False otherwise.</returns>
            <remarks>
                Credits: https://crackstation.net/hashing-security.htm#aspsourcecode
            </remarks>
        </member>
        <member name="T:Griffin.TypeExtensions">
            <summary>
                Extension methods for <c>Type</c>.
            </summary>
        </member>
        <member name="M:Griffin.TypeExtensions.GetSimpleAssemblyQualifiedName(System.Type)">
            <summary>
                Get assembly qualified name, but without the version and public token.
            </summary>
            <param name="type">Type to get name for</param>
            <returns>Simple assembly qualified name. Example: <code>"MyApp.Contracts.User, MyApp.Contracts"</code></returns>
        </member>
        <member name="M:Griffin.TypeExtensions.GetFriendlyTypeName(System.Type)">
            <summary>
                Get type name as we define it in code.
            </summary>
            <param name="t">The type to get a name for.</param>
            <returns>String representation</returns>
        </member>
        <member name="M:Griffin.TypeExtensions.IsAssignableFromGeneric(System.Type,System.Type)">
            <summary>
                Check if generic types matches
            </summary>
            <param name="serviceType">Service/interface</param>
            <param name="concreteType">Concrete/class</param>
            <returns><c>true</c> if the concrete implements the service; otherwise <c>false</c></returns>
        </member>
        <member name="M:Griffin.TypeExtensions.IsSimpleType(System.Type)">
            <summary>
                Checks if the specified type is a type which should not be traversed when building an object hiararchy.
            </summary>
            <param name="type">Type to check</param>
            <returns><c>true</c> if it's a simple type; otherwise <c>false</c>.</returns>
            <example>
                <code>
            public string Build(object instance)
            {
                var sb = new StringBuilder();
                Build(instance, "", sb);
                return sb.ToString();
            }
            
            protected void Build(object instance, string prefix, StringBuilder result)
            {
                foreach (var propInfo in instance.GetType().GetProperties())
                {
                    if (instance.GetType().IsSimpleType())
                    {
                        var value = propInfo.GetValue(instance, null);
                        result.AppendLine(prefix + propInfo.Name + ": " + value);
                    }
                    else
                    {
                        var newPrefix = prefix == "" ? propInfo.Name : prefix + ".";
                        Build(newPrefix, 
            }
            
            while (!type.IsSimpleType())
            {
            }
            
            </code>
            </example>
        </member>
        <member name="T:Griffin.WaitHandleExtensions">
            <summary>
            Extensions to make it easier to work with thread synchronization objects.
            </summary>
        </member>
        <member name="M:Griffin.WaitHandleExtensions.AsTask(System.Threading.WaitHandle)">
            <summary>
            Convert a wait handle to a TPL Task.
            </summary>
            <param name="handle">Handle to convert</param>
            <returns>Generated task.</returns>
            
        </member>
        <member name="M:Griffin.WaitHandleExtensions.AsTask(System.Threading.WaitHandle,System.TimeSpan)">
            <summary>
            Convert a wait handle to a task
            </summary>
            <param name="handle">Wait handle</param>
            <param name="timeout">Max time to wait</param>
            <returns>Created task.</returns>
        </member>
    </members>
</doc>
